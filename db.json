{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/pic/WX20230512-133517@2x.png","path":"pic/WX20230512-133517@2x.png","modified":1,"renderable":0},{"_id":"source/pic/WX20230512-134440@2x.png","path":"pic/WX20230512-134440@2x.png","modified":1,"renderable":0},{"_id":"source/pic/WX20230512-135224@2x.png","path":"pic/WX20230512-135224@2x.png","modified":1,"renderable":0},{"_id":"source/pic/WX20230512-135651@2x.png","path":"pic/WX20230512-135651@2x.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"7309e9d9419a087637fc43af3f907f447ddeac0f","modified":1683882362214},{"_id":"source/_posts/写在开始.md","hash":"bfed375222864f6ec62e84a72b0e6e64ae01a3f0","modified":1683865526232},{"_id":"source/_posts/.DS_Store","hash":"4ed029bbfafb763159d4aedf6ef3545ce436f461","modified":1683880562045},{"_id":"source/_posts/数据结构——链表、栈、队列.md","hash":"bc0cd4653b545c4d118f8c97a65daa448414be35","modified":1683874568869},{"_id":"source/categories/index.md","hash":"c4341f93590f8ff79651a9f72a97db8b6fc4e513","modified":1683864213844},{"_id":"source/about/index.md","hash":"e8b9981d64c11329f381759304223d52d08ede36","modified":1683882946595},{"_id":"source/_posts/基于springboot——一个简单的BDD实践.md","hash":"d5d8ea494ef2d753084d58c8d404c20cd87f67b7","modified":1683875896534},{"_id":"source/pic/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1683869812151},{"_id":"source/pic/WX20230512-134440@2x.png","hash":"6ed7f7e161d48077cfd87311ac683e54bfb97c31","modified":1683870291047},{"_id":"source/pic/WX20230512-133517@2x.png","hash":"d617ca3a51222c882123cfdededaac95038da7fa","modified":1683869733608},{"_id":"source/pic/WX20230512-135651@2x.png","hash":"f91c923bca69bdd3255ffdc280f9057897ff5529","modified":1683871014499},{"_id":"source/pic/WX20230512-135224@2x.png","hash":"19d8ce9542a08e41d4d0e43c245e09b4579245ce","modified":1683870747168},{"_id":"source/archives/index.md","hash":"2c82b3299a27f10a0aace2bd9f38d0a6c29a1196","modified":1683864182810},{"_id":"source/tags/index.md","hash":"a9c769c96f67661761b5be501b5de5d0ec15399a","modified":1683864264601},{"_id":"source/_posts/LeetCode/LeetCode-862.md","hash":"8695bf5c668a5fe73ba3b9bfd52b86361dad2831","modified":1683879998934},{"_id":"source/_posts/LeetCode/LeetCode-934.md","hash":"d0da4f815e7111c668a81130e76e135a3a56065a","modified":1683878126547},{"_id":"source/_posts/LeetCode/LeetCode-386.md","hash":"96caf901cb0b8a3459f0aceab91373a1134eec0a","modified":1683878123289},{"_id":"source/_posts/LeetCode/.DS_Store","hash":"0e9252d2f338dd4b3720401cb0c44ff26de7c3d3","modified":1683876673521},{"_id":"source/_posts/LeetCode/LeetCode-406.md","hash":"388e2a522442b546527343356aeff34fc711c778","modified":1683879365118},{"_id":"source/_posts/algorithm/KMP-algorithm.md","hash":"b467a7d94de0073e98bec09661521a99490b077b","modified":1683878947607},{"_id":"source/_posts/algorithm/.DS_Store","hash":"cc4d101e11405c3cbfd53df69fa3552d28074001","modified":1683877552983},{"_id":"source/_posts/algorithm/chatGPT-with-confluence.md","hash":"de598fcf48ebab0f9781a0a63a8ef4cb34bd0f97","modified":1683878231660},{"_id":"source/_posts/数据结构——链表、栈、队列/WX20230512-133517@2x.png","hash":"d617ca3a51222c882123cfdededaac95038da7fa","modified":1683869733608},{"_id":"source/_posts/数据结构——链表、栈、队列/WX20230512-135224@2x.png","hash":"19d8ce9542a08e41d4d0e43c245e09b4579245ce","modified":1683870747168},{"_id":"source/_posts/algorithm/KMP-algorithm/1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg","hash":"bb8e87b6b3f9408d15d78e168f69762edd0568f9","modified":1683878587114},{"_id":"source/_posts/algorithm/KMP-algorithm/1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg","hash":"297c539e5c28c45b29268b4f8eb0e5dbc4ab4400","modified":1683878552800},{"_id":"source/_posts/数据结构——链表、栈、队列/WX20230512-135651@2x.png","hash":"f91c923bca69bdd3255ffdc280f9057897ff5529","modified":1683871014499},{"_id":"source/_posts/algorithm/KMP-algorithm/1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg","hash":"ff2a29a51614cd18803c1224018a0b64e75f8a37","modified":1683878675856},{"_id":"source/_posts/数据结构——链表、栈、队列/WX20230512-134440@2x.png","hash":"6ed7f7e161d48077cfd87311ac683e54bfb97c31","modified":1683870291047},{"_id":"source/_posts/algorithm/KMP-algorithm/1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg","hash":"a38ec026bf142a48b3398a50fff2254e44b162aa","modified":1683878830973},{"_id":"source/_posts/algorithm/chatGPT-with-confluence/output_7_1-3877587.png","hash":"72bbe932380a3b2f6cc5b3340cbfa5177d246a26","modified":1683877536000},{"_id":"source/_posts/algorithm/chatGPT-with-confluence/output_8_1-3877587.png","hash":"dc4f1f97a2d6ac9e2dc2bebba8b16765f5a04642","modified":1683877536000},{"_id":"source/_posts/algorithm/chatGPT-with-confluence/output_8_1.png","hash":"dc4f1f97a2d6ac9e2dc2bebba8b16765f5a04642","modified":1683877536000},{"_id":"source/_posts/algorithm/chatGPT-with-confluence/output_7_1.png","hash":"72bbe932380a3b2f6cc5b3340cbfa5177d246a26","modified":1683877536000},{"_id":"source/_posts/基于springboot——一个简单的BDD实践/WX20230512-151458@2x.png","hash":"a256001d8968da2719170aba9ebc99809a5cd6dd","modified":1683875702644},{"_id":"source/_posts/algorithm/KMP-algorithm/1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg","hash":"51a4588eb5aff45461044499c6fe9537b92200ae","modified":1683878723675},{"_id":"source/_posts/LeetCode/LeetCode-386/1603875858-aRThUF-QQ20201028-170405@2x.png","hash":"3f73e2ffd71da371b29bb2569ac8f2fc0cff2d6d","modified":1683876723109},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1683863729939},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1683863729939},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1683863729940},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1683863729940},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1683863729939},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1683863729940},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1683863729940},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1683863729941},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1683863729941},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1683863729949},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1683863729939},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1683863729939},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1683863729940},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1683863729940},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1683863729943},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1683863729940},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1683863729940},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1683863729940},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1683863729940},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1683863729940},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1683863729940},{"_id":"themes/next/_config.yml","hash":"808f0166aa7c07b47825195b08a422ce2247d698","modified":1683880194934},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1683863729940},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1683863729941},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1683863729941},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1683863729941},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1683863729941},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1683863729941},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1683863729941},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1683863729941},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1683863729942},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1683863729943},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1683863729942},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1683863729943},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1683863729943},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1683863729943},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1683863729943},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1683863729943},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1683863729943},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1683863729943},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1683863729943},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1683863729943},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1683863729944},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1683863729944},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1683863729943},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1683863729944},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1683863729944},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1683863729944},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1683863729944},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1683863729944},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1683863729944},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1683863729944},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1683863729944},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1683863729949},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1683863729949},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1683863729944},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1683863729944},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1683863729950},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1683863729949},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1683863729949},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1683863729949},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1683863729949},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1683863729940},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1683863729940},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1683863729940},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1683863729940},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1683863729942},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1683863729942},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1683863729942},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1683863729942},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1683863729942},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1683863729942},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1683863729942},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1683863729942},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1683863729943},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1683863729942},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1683863729942},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1683863729943},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1683863729945},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1683863729944},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1683863729943},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1683863729944},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1683863729945},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1683863729945},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1683863729946},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1683863729945},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1683863729946},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1683863729946},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1683863729946},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1683863729947},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1683863729947},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1683863729947},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1683863729949},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1683863729947},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1683863729948},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1683863729950},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1683863729950},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1683863729948},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1683863729948},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1683863729950},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1683863729950},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1683863729950},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1683863729950},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1683863729950},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1683863729950},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1683863729950},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1683863729950},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1683863729951},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1683863729951},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1683863729951},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1683863729951},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1683863729951},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1683863729951},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1683863729951},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1683863729951},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1683863729951},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1683863729958},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1683863729951},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1683863729957},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1683863729958},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1683863729958},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1683863729959},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1683863729959},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1683863729959},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1683863729959},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1683863729959},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1683863729959},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1683863729959},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1683863729959},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1683863729959},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1683863729959},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1683863729959},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1683863729959},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1683863729959},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1683863729959},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1683863729960},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1683863729960},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1683863729945},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1683863729960},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1683863729960},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1683863729945},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1683863729945},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1683863729945},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1683863729945},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1683863729945},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1683863729945},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1683863729945},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1683863729945},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1683863729946},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1683863729946},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1683863729946},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1683863729946},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1683863729946},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1683863729946},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1683863729946},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1683863729947},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1683863729946},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1683863729947},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1683863729946},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1683863729947},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1683863729947},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1683863729947},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1683863729947},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1683863729947},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1683863729947},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1683863729947},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1683863729947},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1683863729947},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1683863729947},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1683863729947},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1683863729948},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1683863729948},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1683863729948},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1683863729948},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1683863729948},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1683863729948},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1683863729948},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1683863729948},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1683863729948},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1683863729948},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1683863729949},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1683863729949},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1683863729948},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1683863729948},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1683863729949},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1683863729948},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1683863729948},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1683863729949},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1683863729949},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1683863729950},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1683863729949},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1683863729950},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1683863729949},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1683863729950},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1683863729950},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1683863729950},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1683863729950},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1683863729950},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1683863729958},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1683863729958},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1683863729958},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1683863729958},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1683863729958},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1683863729960},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1683863729961},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1683863729961},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1683863729960},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1683863729952},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1683863729952},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1683863729952},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1683863729953},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1683863729954},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1683863729954},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1683863729955},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1683863729955},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1683863729955},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1683863729956},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1683863729956},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1683863729956},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1683863729956},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1683863729957},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1683863729957},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1683863729957},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1683863729957},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1683863729957},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1683863729957},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1683863729957},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1683863729957},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1683863729957},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1683863729957},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1683863729957},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1683863729958},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1683863729958},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1683863729958},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1683863729958},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1683863729958},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1683863729958},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1683863729958},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1683863729958},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1683863729961},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1683863729960},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1683863729952},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1683863729952},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1683863729952},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1683863729952},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1683863729953},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1683863729952},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1683863729952},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1683863729952},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1683863729953},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1683863729953},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1683863729953},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1683863729953},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1683863729953},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1683863729953},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1683863729953},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1683863729953},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1683863729953},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1683863729953},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1683863729953},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1683863729953},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1683863729954},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1683863729953},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1683863729954},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1683863729954},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1683863729954},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1683863729954},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1683863729954},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1683863729954},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1683863729954},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1683863729954},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1683863729954},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1683863729955},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1683863729955},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1683863729955},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1683863729955},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1683863729955},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1683863729955},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1683863729955},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1683863729955},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1683863729955},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1683863729955},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1683863729956},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1683863729956},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1683863729956},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1683863729956},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1683863729956},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1683863729956},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1683863729956},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1683863729956},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1683863729957},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1683863729957},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1683863729957},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1683863729960},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1683863729961},{"_id":"public/atom.xml","hash":"fcd76ab09fc9ba491130762b0ae68e54d6997c50","modified":1683885213521},{"_id":"public/sitemap.xml","hash":"90b52f704cd1cad763e1b055bf3dd28aa753bc98","modified":1683885213521},{"_id":"public/about/index.html","hash":"eebc004b7bdec735248afd2df994f82810cd2341","modified":1683885213521},{"_id":"public/categories/index.html","hash":"08867df13c7b9691953886752fd46dd60c753bc4","modified":1683885213521},{"_id":"public/archives/index.html","hash":"e76c5614139887f5059a1d7081aeccab856bbd4c","modified":1683885213521},{"_id":"public/tags/index.html","hash":"b82632934c7a07e50c0ee4f2fbb5490d78001b6b","modified":1683885213521},{"_id":"public/2023/05/12/写在开始/index.html","hash":"603bd0de326a1e69221cb511de3a48d1702f5c16","modified":1683885213521},{"_id":"public/archives/2023/index.html","hash":"191d4aa33723a2845f1c3ef7c81510fdcd14e614","modified":1683885213521},{"_id":"public/archives/2023/05/index.html","hash":"078816badd3a6e4533effc7aa6c1ec198964d99d","modified":1683885213521},{"_id":"public/categories/life/index.html","hash":"f0b4cc4ea49703bdd7ecb90603486827ffb89cba","modified":1683885213521},{"_id":"public/categories/技术/index.html","hash":"86fcd38bde7565a3eb946ab2cb47007b940e74d5","modified":1683885213521},{"_id":"public/tags/Trying/index.html","hash":"6baf9b0293ee2d7f9dca0f55caa0a7b957b45ce1","modified":1683885213521},{"_id":"public/tags/项目/index.html","hash":"75fb353b235a771c28090470470b1208ab1d4db4","modified":1683885213521},{"_id":"public/tags/java/index.html","hash":"3147e851471eead3ce4e6937fd898b873e04d9d9","modified":1683885213521},{"_id":"public/tags/数据结构/index.html","hash":"5b4576899278c631887e9344c68822d14e9cacc4","modified":1683885213521},{"_id":"public/tags/力扣之旅/index.html","hash":"d13d6432be15e0b5a6a82ffc1513199225f37bf6","modified":1683885213521},{"_id":"public/tags/DFS/index.html","hash":"af5f06e807a5856dbdda4b006f8bd29a6ef9da86","modified":1683885213521},{"_id":"public/2023/05/12/LeetCode/LeetCode-862/index.html","hash":"c3685891afc37eeac4dde4b66e7469c5df91b332","modified":1683885213521},{"_id":"public/2023/05/12/LeetCode/LeetCode-406/index.html","hash":"9564d404cf8949d9f2f904402779dbcb7be94f1a","modified":1683885213521},{"_id":"public/2023/05/12/algorithm/KMP-algorithm/index.html","hash":"47dbafe30a52bd99bc8e380938fe3745029586ac","modified":1683885213521},{"_id":"public/2023/05/12/algorithm/chatGPT-with-confluence/index.html","hash":"48b55a80e210a7fb4e8fc03f204245ca02881ef3","modified":1683885213521},{"_id":"public/2023/05/12/LeetCode/LeetCode-386/index.html","hash":"412947b9dc7175cc6b28e07f399cd686be2213d9","modified":1683885213521},{"_id":"public/2023/05/12/LeetCode/LeetCode-934/index.html","hash":"3bdeb64d492534e431eef9262369f2df86a18074","modified":1683885213521},{"_id":"public/2023/05/12/基于springboot——一个简单的BDD实践/index.html","hash":"2082eaa51c242ce660f6b2f9810527da14ad2325","modified":1683885213521},{"_id":"public/2023/05/12/数据结构——链表、栈、队列/index.html","hash":"0c9f9492b476616df0ec957ff5e7e2f3151eccdf","modified":1683885213521},{"_id":"public/index.html","hash":"67abb4960c9bdb290c7a3ef4a05d892258afb4ae","modified":1683885213521},{"_id":"public/tags/前缀和/index.html","hash":"7c9a5a18ab7f1a833159c7888c0bf7f657658d4e","modified":1683885213521},{"_id":"public/tags/单调队列/index.html","hash":"26e48cc5fb2ce8588c342d98850c248417b67c47","modified":1683885213521},{"_id":"public/tags/算法/index.html","hash":"78b49fda1f7915c798a77d875ea9fb8d5c06401c","modified":1683885213521},{"_id":"public/tags/python/index.html","hash":"a70bf613681ade9fa90c09bf056d017b8598c515","modified":1683885213521},{"_id":"public/tags/chatGpt/index.html","hash":"817e37d9ed0137aed319af6bac177f5ee9e3ff74","modified":1683885213521},{"_id":"public/pic/WX20230512-133517@2x.png","hash":"d617ca3a51222c882123cfdededaac95038da7fa","modified":1683885213521},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1683885213521},{"_id":"public/pic/WX20230512-134440@2x.png","hash":"6ed7f7e161d48077cfd87311ac683e54bfb97c31","modified":1683885213521},{"_id":"public/pic/WX20230512-135224@2x.png","hash":"19d8ce9542a08e41d4d0e43c245e09b4579245ce","modified":1683885213521},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1683885213521},{"_id":"public/pic/WX20230512-135651@2x.png","hash":"f91c923bca69bdd3255ffdc280f9057897ff5529","modified":1683885213521},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1683885213521},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1683885213521},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1683885213521},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1683885213521},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1683885213521},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1683885213521},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1683885213521},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1683885213521},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1683885213521},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1683885213521},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1683885213521},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1683885213521},{"_id":"public/2023/05/12/数据结构——链表、栈、队列/WX20230512-134440@2x.png","hash":"6ed7f7e161d48077cfd87311ac683e54bfb97c31","modified":1683885213521},{"_id":"public/2023/05/12/数据结构——链表、栈、队列/WX20230512-133517@2x.png","hash":"d617ca3a51222c882123cfdededaac95038da7fa","modified":1683885213521},{"_id":"public/2023/05/12/数据结构——链表、栈、队列/WX20230512-135224@2x.png","hash":"19d8ce9542a08e41d4d0e43c245e09b4579245ce","modified":1683885213521},{"_id":"public/2023/05/12/数据结构——链表、栈、队列/WX20230512-135651@2x.png","hash":"f91c923bca69bdd3255ffdc280f9057897ff5529","modified":1683885213521},{"_id":"public/2023/05/12/algorithm/chatGPT-with-confluence/output_7_1-3877587.png","hash":"72bbe932380a3b2f6cc5b3340cbfa5177d246a26","modified":1683885213521},{"_id":"public/2023/05/12/algorithm/chatGPT-with-confluence/output_7_1.png","hash":"72bbe932380a3b2f6cc5b3340cbfa5177d246a26","modified":1683885213521},{"_id":"public/2023/05/12/algorithm/chatGPT-with-confluence/output_8_1-3877587.png","hash":"dc4f1f97a2d6ac9e2dc2bebba8b16765f5a04642","modified":1683885213521},{"_id":"public/2023/05/12/algorithm/chatGPT-with-confluence/output_8_1.png","hash":"dc4f1f97a2d6ac9e2dc2bebba8b16765f5a04642","modified":1683885213521},{"_id":"public/2023/05/12/algorithm/KMP-algorithm/1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg","hash":"297c539e5c28c45b29268b4f8eb0e5dbc4ab4400","modified":1683885213521},{"_id":"public/2023/05/12/algorithm/KMP-algorithm/1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg","hash":"ff2a29a51614cd18803c1224018a0b64e75f8a37","modified":1683885213521},{"_id":"public/2023/05/12/algorithm/KMP-algorithm/1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg","hash":"a38ec026bf142a48b3398a50fff2254e44b162aa","modified":1683885213521},{"_id":"public/2023/05/12/algorithm/KMP-algorithm/1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg","hash":"bb8e87b6b3f9408d15d78e168f69762edd0568f9","modified":1683885213521},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1683885213521},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1683885213521},{"_id":"public/2023/05/12/基于springboot——一个简单的BDD实践/WX20230512-151458@2x.png","hash":"a256001d8968da2719170aba9ebc99809a5cd6dd","modified":1683885213521},{"_id":"public/2023/05/12/algorithm/KMP-algorithm/1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg","hash":"51a4588eb5aff45461044499c6fe9537b92200ae","modified":1683885213521},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1683885213521},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1683885213521},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1683885213521},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1683885213521},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1683885213521},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1683885213521},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1683885213521},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1683885213521},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1683885213521},{"_id":"public/css/main.css","hash":"40cdd7ec328415cac7377b7021ba943eae2fad00","modified":1683885213521},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1683885213521},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1683885213521},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1683885213521},{"_id":"public/2023/05/12/LeetCode/LeetCode-386/1603875858-aRThUF-QQ20201028-170405@2x.png","hash":"3f73e2ffd71da371b29bb2569ac8f2fc0cff2d6d","modified":1683885213521}],"Category":[{"name":"life","_id":"clhkds2dc0004bml75ch94en1"},{"name":"技术","_id":"clhkds2de000bbml70hkx3ki8"}],"Data":[],"Page":[{"title":"关于","date":"2023-05-12T04:01:43.000Z","type":"about","_content":"\n### 关于我\n\n----\n\n##### *大多数人都生活在平静的绝望中*\n\n------\n\n半路出家的程序员，90后，游戏乐器电影技术均有涉猎。\n\n\n\n\n\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2023-05-12 12:01:43\ntype : \"about\"\n---\n\n### 关于我\n\n----\n\n##### *大多数人都生活在平静的绝望中*\n\n------\n\n半路出家的程序员，90后，游戏乐器电影技术均有涉猎。\n\n\n\n\n\n\n\n\n\n","updated":"2023-05-12T09:15:46.595Z","path":"about/index.html","comments":1,"layout":"page","_id":"clhkds2d80000bml70ib686mv","content":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><hr>\n<h5 id=\"大多数人都生活在平静的绝望中\"><a href=\"#大多数人都生活在平静的绝望中\" class=\"headerlink\" title=\"大多数人都生活在平静的绝望中\"></a><em>大多数人都生活在平静的绝望中</em></h5><hr>\n<p>半路出家的程序员，90后，游戏乐器电影技术均有涉猎。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><hr>\n<h5 id=\"大多数人都生活在平静的绝望中\"><a href=\"#大多数人都生活在平静的绝望中\" class=\"headerlink\" title=\"大多数人都生活在平静的绝望中\"></a><em>大多数人都生活在平静的绝望中</em></h5><hr>\n<p>半路出家的程序员，90后，游戏乐器电影技术均有涉猎。</p>\n"},{"title":"文章分类","date":"2023-05-12T04:01:27.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2023-05-12 12:01:27\ntype: \"categories\"\n---\n","updated":"2023-05-12T04:03:33.844Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clhkds2db0002bml7hrvv542k","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"归档","date":"2023-05-12T04:01:36.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: 归档\ndate: 2023-05-12 12:01:36\ntype: \"archives\"\n---\n","updated":"2023-05-12T04:03:02.810Z","path":"archives/index.html","comments":1,"layout":"page","_id":"clhkds2dd0006bml75njt4m3u","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2023-05-12T03:46:53.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2023-05-12 11:46:53\ntype: \"tags\"\n---\n","updated":"2023-05-12T04:04:24.601Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clhkds2dd0008bml7h0xs03lo","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"写在开始","date":"2023-05-12T04:14:16.000Z","_content":"\n​\t\t很早之前就有一个想要搭建个人博客的想法，但是由于学业，工作等原因一直没有付诸于实践。在入职新公司后，由于有了时间，加上一些个人原因，使得我决定开始搭建一个简单的个人blog。Blog中将会记录我的在技术上遇到的一些问题和尝试，以及记录自己的学习和成长过程。\n","source":"_posts/写在开始.md","raw":"---\ntitle: 写在开始\ndate: 2023-05-12 12:14:16\ncategories: life\ntags:\n  - Trying\n---\n\n​\t\t很早之前就有一个想要搭建个人博客的想法，但是由于学业，工作等原因一直没有付诸于实践。在入职新公司后，由于有了时间，加上一些个人原因，使得我决定开始搭建一个简单的个人blog。Blog中将会记录我的在技术上遇到的一些问题和尝试，以及记录自己的学习和成长过程。\n","slug":"写在开始","published":1,"updated":"2023-05-12T04:25:26.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkds2d90001bml7etg2b9r9","content":"<p>​        很早之前就有一个想要搭建个人博客的想法，但是由于学业，工作等原因一直没有付诸于实践。在入职新公司后，由于有了时间，加上一些个人原因，使得我决定开始搭建一个简单的个人blog。Blog中将会记录我的在技术上遇到的一些问题和尝试，以及记录自己的学习和成长过程。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​        很早之前就有一个想要搭建个人博客的想法，但是由于学业，工作等原因一直没有付诸于实践。在入职新公司后，由于有了时间，加上一些个人原因，使得我决定开始搭建一个简单的个人blog。Blog中将会记录我的在技术上遇到的一些问题和尝试，以及记录自己的学习和成长过程。</p>\n"},{"title":"springboot+cucumber实践","date":"2023-05-12T07:09:40.000Z","_content":"\n# springboot+cucumber实践\n\n## why BDD\n\n- **满足业务目标。**\n- **关注用户需求**\n- **良好的可读性**\n\n其实对于我自己来说，也有其他原因：\n\n1.因为客观原因，有时候项目开发结束后才拿到PRD，所以在开发前期，通过一些方式确定明确的业务流程会比直接上手开发可以更容易的发现问题。相比较DD文档，BDD的feature可能是对于非开发人员更易懂的方案。\n\n2.因为文档往往存在滞后，帮助将来的自己或是其他接手的同学去更快的回顾或是了解某个业务的诉求。\n\n<!-- more -->\n\n## 一个样例项目的开始\n\n#### 项目分层：\n\n![WX20230512-151458@2x](基于springboot——一个简单的BDD实践/WX20230512-151458@2x.png)\n\n#### 代码：\n\n以**功能配置**单上线操作为例\n\napplication中存在一个上线接口\n\n```java\nclass interface ConfigurationCmdService{\n    /**\n     * 上线功能\n     *\n     * @param cmd\n     * @return\n     */\n    Result<Boolean>  online(ConfigOnlineCmd cmd);\n}\n/**\n* 接口需要实现上线功能\n* 假设操作只需要3步：\n*\t1.查到需要上线的配置\n*   2.上线操作\n*   3.更新db\n*/\nclass class ConfigurationCmdServiceImpl implements ConfigurationCmdService{\n\t    \n    private final ConfigRepository    repository;\n\n\n    private final ConfigFactory factory;\n\n    public ConfigurationCmdServiceImpl(ConfigRepository repository,ConfigFactory factory){\n        this.repository = repository;\n        this.factory = factory;\n    }\n\n    public ManualQueryServiceImpl(SnapshotRepository repository, ManualSnapshotFactory factory) {\n        this.repository = repository;\n        this.factory = factory;\n    }\n    @AutoWired\n    Result<Boolean>  online(ConfigOnlineCmd cmd){\n        Config config = repository.queryById(cmd.getId());\n        config.online();\n        //可能还有其他的一些操作\n        return repository.update(config);\n    }\n}\n```\n\n## BDD的接入\n\n### 前置工作\n\n#### cucumber依赖\n\n```xml\n<!-- bdd依赖 -->\n<dependency>\n  <groupId>io.cucumber</groupId>\n  <artifactId>cucumber-core</artifactId>\n</dependency>\n<dependency>\n  <groupId>io.cucumber</groupId>\n  <artifactId>cucumber-java</artifactId>\n</dependency>\n<dependency>\n  <groupId>io.cucumber</groupId>\n  <artifactId>cucumber-junit</artifactId>\n  <scope>test</scope>\n</dependency>\n<dependency>\n  <groupId>io.cucumber</groupId>\n  <artifactId>cucumber-spring</artifactId>\n</dependency>\n```\n\n#### 结合junit4\n\n```xml\n<plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>${maven-surefire-plugin.version}</version>\n                <configuration>\n                    <includes>\n                        com.example.**Test.java\n                    </includes>\n                    <testFailureIgnore>false</testFailureIgnore>\n                    <skipTests>false</skipTests>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.apache.maven.surefire</groupId>\n                        <artifactId>surefire-junit4</artifactId>\n                        <version>2.22.2</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n```\n\n#### 结合jacoco生成单测报告\n\n```xml\n<plugin>\n  <groupId>org.jacoco</groupId>\n  <artifactId>jacoco-maven-plugin</artifactId>\n  <version>${jacoco.version}</version>\n  <executions>\n    <execution>\n      <goals>\n        <goal>prepare-agent</goal>\n      </goals>\n    </execution>\n    <execution>\n      <id>report</id>\n      <phase>prepare-package</phase>\n      <goals>\n        <goal>report</goal>\n      </goals>\n      <configuration>\n        <excludes>\n          <!-- -排掉工具类包 比方说，需要排出工具包-->\n          <exclude>com.example.util.*</exclude>\n        </excludes>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```\n\n\n\n### 第一步\n\n启动类\n\nglue实际上是告诉cucumber启动后去扫描对应包下含有@CucumberContextConfiguration的文件\n\n```java\n@RunWith(Cucumber.class)\n@CucumberOptions(\n        features = {\"classpath:feature\"},\n        glue = {\"com.example.step\"},\n        plugin = {\"pretty\",\"html:target/html-reports.htm\"}\n)\npublic class ApplicationTest {\n\n}\n```\n\n配置在测试中需要启动的bean以及一些需要去mock的bean、\n\ninit方法在运行之前触发，reset方法见第四步\n\n```java\n@CucumberContextConfiguration\n@SpringBootTest(classes = {\n        SpringTestConfig.class,\n        MockObjectConfiguration.class\n    }\n)\npublic class SpringTest {\n\n    @Autowired\n    private List<Resetable> resetables;\n\n    @Before\n    public void init(){\n        CollectionUtils.emptyIfNull(resetables)\n                .stream().forEach(v->v.reset());\n    }\n}\n```\n\n\n\n### 第二步\n\n在classpath:feature下新建一个feature文件\n\n\\#language:zh-CN代表语言为中文\n\n```feature\n#language:zh-CN\n功能:配置的CMD操作\n  场景:上线一条配置\n    假设存在以下配置\n        |id  | content| status | bizCode |\n        |1\t |xxxxx   | AUDIT  | XXXX    |\n        |2\t |xxxxx   | DRAFT  | XXXX    |\n    当id为\"1\"上线\n        | languageType | bizCode |\n        | zh_CN        | 008     |\n    那么id为\"1\"的配置状态为\"上线中\"\n```\n\n### 第三步\n\n实现上述的功能：\n\n```java\npublic class ContentStep {\n\n    @Autowired\n    private FakeConfigRepositoryImpl       configRepository;\n\n    private String                            result;\n\n    @Autowired\n    private ConfigurationCmdService cmdService;\n\n    private final String DEFAULT_CODE = \"xxx\";\n\n    AssertService contentAssertService = new AssertService<>();\n\n    private static final Map<String,String> codeMap = new HashMap<String,String>(){\n        {\n            put(\"上线\",\"ONLINE\");\n            put(\"审核\",\"AUDIT\");\n            put(\"草稿\",\"DRAFT\");\n        }\n    };\n\n    @假如(\"假设存在以下配置\")\n    public void 存在以下内容(DataTable dataTable) {\n        //根据dataTable去创建一条内容\n        List<Config> configs = ConfigTransform.transToConfig(dataTable.entries());\n        contentRepository.createAll(configs);\n    }\n\n    @那么(\"id为{string}的配置状态为{string}\")\n    public void id为的配置状态为(String id,String status){\n        Config config = configRepository.queryById(id);\n        //判断结果\n        Assert.assertEquals(config.getStatus(),codeMap.get(status));\n    }\n\n    @当(\"id为{string}上线\")\n    public void 在id为的目录下插入一条内容(String id){\n        //创建命令\n        ContentCreateParam param = createOnlineCmd(id);\n        //获得结果\n        result = cmdService.online(param).getData().toString();\n    }\n```\n\n### 第四步\n\nmock db、外部服务。以mock db为例\n\nDB使用一个map来模拟数据库操作\n\nreset操作用于清空map，每一条用例都会自动清空map。\n\n```java\npublic class FakeConfigRepositoryImpl implements SearchDataRepository ,Resetable{\n\n    @Getter\n    private final Map<String, SearchDataDO> doMap;\n\n    private final ConfigConverter converter;\n\n    public FakeSearchDataRepositoryImpl(SearchDataConverter converter) {\n        this.doMap = new HashMap<>();\n        this.converter = converter;\n    }\n\n    /**\n     * 创建数据\n     *\n     * @param config\n     * @return\n     */\n    @Override\n    public boolean create(Config config) {\n        ConfigDO configDo = converter.convert2DO(config);\n        doMap.put(String.valueOf(config.getId()),configDo);\n        return true;\n    }\n\n    /**\n     * 更新数据\n     *\n     * @param searchData\n     * @return\n     */\n    @Override\n    public boolean update(Config config) {\n        create(searchData);\n        return true;\n    }\n\n    @Override\n    public void reset() {\n        doMap.clear();\n    }\n```\n\nspring-test和spring-context版本必须一致，否则会报错\n\n","source":"_posts/基于springboot——一个简单的BDD实践.md","raw":"---\ntitle: springboot+cucumber实践\ndate: 2023-05-12 15:09:40\ncategories: 技术\ntags:\n  - 项目\n  - java\n---\n\n# springboot+cucumber实践\n\n## why BDD\n\n- **满足业务目标。**\n- **关注用户需求**\n- **良好的可读性**\n\n其实对于我自己来说，也有其他原因：\n\n1.因为客观原因，有时候项目开发结束后才拿到PRD，所以在开发前期，通过一些方式确定明确的业务流程会比直接上手开发可以更容易的发现问题。相比较DD文档，BDD的feature可能是对于非开发人员更易懂的方案。\n\n2.因为文档往往存在滞后，帮助将来的自己或是其他接手的同学去更快的回顾或是了解某个业务的诉求。\n\n<!-- more -->\n\n## 一个样例项目的开始\n\n#### 项目分层：\n\n![WX20230512-151458@2x](基于springboot——一个简单的BDD实践/WX20230512-151458@2x.png)\n\n#### 代码：\n\n以**功能配置**单上线操作为例\n\napplication中存在一个上线接口\n\n```java\nclass interface ConfigurationCmdService{\n    /**\n     * 上线功能\n     *\n     * @param cmd\n     * @return\n     */\n    Result<Boolean>  online(ConfigOnlineCmd cmd);\n}\n/**\n* 接口需要实现上线功能\n* 假设操作只需要3步：\n*\t1.查到需要上线的配置\n*   2.上线操作\n*   3.更新db\n*/\nclass class ConfigurationCmdServiceImpl implements ConfigurationCmdService{\n\t    \n    private final ConfigRepository    repository;\n\n\n    private final ConfigFactory factory;\n\n    public ConfigurationCmdServiceImpl(ConfigRepository repository,ConfigFactory factory){\n        this.repository = repository;\n        this.factory = factory;\n    }\n\n    public ManualQueryServiceImpl(SnapshotRepository repository, ManualSnapshotFactory factory) {\n        this.repository = repository;\n        this.factory = factory;\n    }\n    @AutoWired\n    Result<Boolean>  online(ConfigOnlineCmd cmd){\n        Config config = repository.queryById(cmd.getId());\n        config.online();\n        //可能还有其他的一些操作\n        return repository.update(config);\n    }\n}\n```\n\n## BDD的接入\n\n### 前置工作\n\n#### cucumber依赖\n\n```xml\n<!-- bdd依赖 -->\n<dependency>\n  <groupId>io.cucumber</groupId>\n  <artifactId>cucumber-core</artifactId>\n</dependency>\n<dependency>\n  <groupId>io.cucumber</groupId>\n  <artifactId>cucumber-java</artifactId>\n</dependency>\n<dependency>\n  <groupId>io.cucumber</groupId>\n  <artifactId>cucumber-junit</artifactId>\n  <scope>test</scope>\n</dependency>\n<dependency>\n  <groupId>io.cucumber</groupId>\n  <artifactId>cucumber-spring</artifactId>\n</dependency>\n```\n\n#### 结合junit4\n\n```xml\n<plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>${maven-surefire-plugin.version}</version>\n                <configuration>\n                    <includes>\n                        com.example.**Test.java\n                    </includes>\n                    <testFailureIgnore>false</testFailureIgnore>\n                    <skipTests>false</skipTests>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.apache.maven.surefire</groupId>\n                        <artifactId>surefire-junit4</artifactId>\n                        <version>2.22.2</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n```\n\n#### 结合jacoco生成单测报告\n\n```xml\n<plugin>\n  <groupId>org.jacoco</groupId>\n  <artifactId>jacoco-maven-plugin</artifactId>\n  <version>${jacoco.version}</version>\n  <executions>\n    <execution>\n      <goals>\n        <goal>prepare-agent</goal>\n      </goals>\n    </execution>\n    <execution>\n      <id>report</id>\n      <phase>prepare-package</phase>\n      <goals>\n        <goal>report</goal>\n      </goals>\n      <configuration>\n        <excludes>\n          <!-- -排掉工具类包 比方说，需要排出工具包-->\n          <exclude>com.example.util.*</exclude>\n        </excludes>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```\n\n\n\n### 第一步\n\n启动类\n\nglue实际上是告诉cucumber启动后去扫描对应包下含有@CucumberContextConfiguration的文件\n\n```java\n@RunWith(Cucumber.class)\n@CucumberOptions(\n        features = {\"classpath:feature\"},\n        glue = {\"com.example.step\"},\n        plugin = {\"pretty\",\"html:target/html-reports.htm\"}\n)\npublic class ApplicationTest {\n\n}\n```\n\n配置在测试中需要启动的bean以及一些需要去mock的bean、\n\ninit方法在运行之前触发，reset方法见第四步\n\n```java\n@CucumberContextConfiguration\n@SpringBootTest(classes = {\n        SpringTestConfig.class,\n        MockObjectConfiguration.class\n    }\n)\npublic class SpringTest {\n\n    @Autowired\n    private List<Resetable> resetables;\n\n    @Before\n    public void init(){\n        CollectionUtils.emptyIfNull(resetables)\n                .stream().forEach(v->v.reset());\n    }\n}\n```\n\n\n\n### 第二步\n\n在classpath:feature下新建一个feature文件\n\n\\#language:zh-CN代表语言为中文\n\n```feature\n#language:zh-CN\n功能:配置的CMD操作\n  场景:上线一条配置\n    假设存在以下配置\n        |id  | content| status | bizCode |\n        |1\t |xxxxx   | AUDIT  | XXXX    |\n        |2\t |xxxxx   | DRAFT  | XXXX    |\n    当id为\"1\"上线\n        | languageType | bizCode |\n        | zh_CN        | 008     |\n    那么id为\"1\"的配置状态为\"上线中\"\n```\n\n### 第三步\n\n实现上述的功能：\n\n```java\npublic class ContentStep {\n\n    @Autowired\n    private FakeConfigRepositoryImpl       configRepository;\n\n    private String                            result;\n\n    @Autowired\n    private ConfigurationCmdService cmdService;\n\n    private final String DEFAULT_CODE = \"xxx\";\n\n    AssertService contentAssertService = new AssertService<>();\n\n    private static final Map<String,String> codeMap = new HashMap<String,String>(){\n        {\n            put(\"上线\",\"ONLINE\");\n            put(\"审核\",\"AUDIT\");\n            put(\"草稿\",\"DRAFT\");\n        }\n    };\n\n    @假如(\"假设存在以下配置\")\n    public void 存在以下内容(DataTable dataTable) {\n        //根据dataTable去创建一条内容\n        List<Config> configs = ConfigTransform.transToConfig(dataTable.entries());\n        contentRepository.createAll(configs);\n    }\n\n    @那么(\"id为{string}的配置状态为{string}\")\n    public void id为的配置状态为(String id,String status){\n        Config config = configRepository.queryById(id);\n        //判断结果\n        Assert.assertEquals(config.getStatus(),codeMap.get(status));\n    }\n\n    @当(\"id为{string}上线\")\n    public void 在id为的目录下插入一条内容(String id){\n        //创建命令\n        ContentCreateParam param = createOnlineCmd(id);\n        //获得结果\n        result = cmdService.online(param).getData().toString();\n    }\n```\n\n### 第四步\n\nmock db、外部服务。以mock db为例\n\nDB使用一个map来模拟数据库操作\n\nreset操作用于清空map，每一条用例都会自动清空map。\n\n```java\npublic class FakeConfigRepositoryImpl implements SearchDataRepository ,Resetable{\n\n    @Getter\n    private final Map<String, SearchDataDO> doMap;\n\n    private final ConfigConverter converter;\n\n    public FakeSearchDataRepositoryImpl(SearchDataConverter converter) {\n        this.doMap = new HashMap<>();\n        this.converter = converter;\n    }\n\n    /**\n     * 创建数据\n     *\n     * @param config\n     * @return\n     */\n    @Override\n    public boolean create(Config config) {\n        ConfigDO configDo = converter.convert2DO(config);\n        doMap.put(String.valueOf(config.getId()),configDo);\n        return true;\n    }\n\n    /**\n     * 更新数据\n     *\n     * @param searchData\n     * @return\n     */\n    @Override\n    public boolean update(Config config) {\n        create(searchData);\n        return true;\n    }\n\n    @Override\n    public void reset() {\n        doMap.clear();\n    }\n```\n\nspring-test和spring-context版本必须一致，否则会报错\n\n","slug":"基于springboot——一个简单的BDD实践","published":1,"updated":"2023-05-12T07:18:16.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkds2db0003bml77s13br6e","content":"<h1 id=\"springboot-cucumber实践\"><a href=\"#springboot-cucumber实践\" class=\"headerlink\" title=\"springboot+cucumber实践\"></a>springboot+cucumber实践</h1><h2 id=\"why-BDD\"><a href=\"#why-BDD\" class=\"headerlink\" title=\"why BDD\"></a>why BDD</h2><ul>\n<li><strong>满足业务目标。</strong></li>\n<li><strong>关注用户需求</strong></li>\n<li><strong>良好的可读性</strong></li>\n</ul>\n<p>其实对于我自己来说，也有其他原因：</p>\n<p>1.因为客观原因，有时候项目开发结束后才拿到PRD，所以在开发前期，通过一些方式确定明确的业务流程会比直接上手开发可以更容易的发现问题。相比较DD文档，BDD的feature可能是对于非开发人员更易懂的方案。</p>\n<p>2.因为文档往往存在滞后，帮助将来的自己或是其他接手的同学去更快的回顾或是了解某个业务的诉求。</p>\n<span id=\"more\"></span>\n<h2 id=\"一个样例项目的开始\"><a href=\"#一个样例项目的开始\" class=\"headerlink\" title=\"一个样例项目的开始\"></a>一个样例项目的开始</h2><h4 id=\"项目分层：\"><a href=\"#项目分层：\" class=\"headerlink\" title=\"项目分层：\"></a>项目分层：</h4><p><img src=\"/2023/05/12/%E5%9F%BA%E4%BA%8Espringboot%E2%80%94%E2%80%94%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84BDD%E5%AE%9E%E8%B7%B5/WX20230512-151458@2x.png\" alt=\"WX20230512-151458@2x\"></p>\n<h4 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><p>以<strong>功能配置</strong>单上线操作为例</p>\n<p>application中存在一个上线接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">interface</span> ConfigurationCmdService&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上线功能</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cmd</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Result&lt;Boolean&gt;  <span class=\"title function_\">online</span><span class=\"params\">(ConfigOnlineCmd cmd)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 接口需要实现上线功能</span></span><br><span class=\"line\"><span class=\"comment\">* 假设操作只需要3步：</span></span><br><span class=\"line\"><span class=\"comment\">*\t1.查到需要上线的配置</span></span><br><span class=\"line\"><span class=\"comment\">*   2.上线操作</span></span><br><span class=\"line\"><span class=\"comment\">*   3.更新db</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">class</span> ConfigurationCmdServiceImpl <span class=\"keyword\">implements</span> <span class=\"title class_\">ConfigurationCmdService</span>&#123;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConfigRepository    repository;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConfigFactory factory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ConfigurationCmdServiceImpl</span><span class=\"params\">(ConfigRepository repository,ConfigFactory factory)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.repository = repository;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.factory = factory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ManualQueryServiceImpl</span><span class=\"params\">(SnapshotRepository repository, ManualSnapshotFactory factory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.repository = repository;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.factory = factory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@AutoWired</span></span><br><span class=\"line\">    Result&lt;Boolean&gt;  <span class=\"title function_\">online</span><span class=\"params\">(ConfigOnlineCmd cmd)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Config</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> repository.queryById(cmd.getId());</span><br><span class=\"line\">        config.online();</span><br><span class=\"line\">        <span class=\"comment\">//可能还有其他的一些操作</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> repository.update(config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"BDD的接入\"><a href=\"#BDD的接入\" class=\"headerlink\" title=\"BDD的接入\"></a>BDD的接入</h2><h3 id=\"前置工作\"><a href=\"#前置工作\" class=\"headerlink\" title=\"前置工作\"></a>前置工作</h3><h4 id=\"cucumber依赖\"><a href=\"#cucumber依赖\" class=\"headerlink\" title=\"cucumber依赖\"></a>cucumber依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- bdd依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.cucumber<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cucumber-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.cucumber<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cucumber-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.cucumber<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cucumber-junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.cucumber<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cucumber-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"结合junit4\"><a href=\"#结合junit4\" class=\"headerlink\" title=\"结合junit4\"></a>结合junit4</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-surefire-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;maven-surefire-plugin.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                        com.example.**Test.java</span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">testFailureIgnore</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">testFailureIgnore</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">skipTests</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">skipTests</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.surefire<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>surefire-junit4<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.22.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"结合jacoco生成单测报告\"><a href=\"#结合jacoco生成单测报告\" class=\"headerlink\" title=\"结合jacoco生成单测报告\"></a>结合jacoco生成单测报告</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.jacoco<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jacoco-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jacoco.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>prepare-agent<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>report<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>prepare-package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>report<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- -排掉工具类包 比方说，需要排出工具包--&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span>com.example.util.*<span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>启动类</p>\n<p>glue实际上是告诉cucumber启动后去扫描对应包下含有@CucumberContextConfiguration的文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(Cucumber.class)</span></span><br><span class=\"line\"><span class=\"meta\">@CucumberOptions(</span></span><br><span class=\"line\"><span class=\"meta\">        features = &#123;&quot;classpath:feature&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">        glue = &#123;&quot;com.example.step&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">        plugin = &#123;&quot;pretty&quot;,&quot;html:target/html-reports.htm&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApplicationTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置在测试中需要启动的bean以及一些需要去mock的bean、</p>\n<p>init方法在运行之前触发，reset方法见第四步</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CucumberContextConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(classes = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">        SpringTestConfig.class,</span></span><br><span class=\"line\"><span class=\"meta\">        MockObjectConfiguration.class</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Resetable&gt; resetables;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        CollectionUtils.emptyIfNull(resetables)</span><br><span class=\"line\">                .stream().forEach(v-&gt;v.reset());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>在classpath:feature下新建一个feature文件</p>\n<p>#language:zh-CN代表语言为中文</p>\n<figure class=\"highlight feature\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#language:zh-CN</span></span><br><span class=\"line\">功能:配置的CMD操作</span><br><span class=\"line\">  场景:上线一条配置</span><br><span class=\"line\">    假设存在以下配置</span><br><span class=\"line\">        |<span class=\"string\">id  </span>|<span class=\"string\"> content</span>|<span class=\"string\"> status </span>|<span class=\"string\"> bizCode </span>|</span><br><span class=\"line\">        |<span class=\"string\">1\t </span>|<span class=\"string\">xxxxx   </span>|<span class=\"string\"> AUDIT  </span>|<span class=\"string\"> XXXX    </span>|</span><br><span class=\"line\">        |<span class=\"string\">2\t </span>|<span class=\"string\">xxxxx   </span>|<span class=\"string\"> DRAFT  </span>|<span class=\"string\"> XXXX    </span>|</span><br><span class=\"line\">    当id为<span class=\"string\">&quot;1&quot;</span>上线</span><br><span class=\"line\">        |<span class=\"string\"> languageType </span>|<span class=\"string\"> bizCode </span>|</span><br><span class=\"line\">        |<span class=\"string\"> zh_CN        </span>|<span class=\"string\"> 008     </span>|</span><br><span class=\"line\">    那么id为<span class=\"string\">&quot;1&quot;</span>的配置状态为<span class=\"string\">&quot;上线中&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h3><p>实现上述的功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ContentStep</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FakeConfigRepositoryImpl       configRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String                            result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConfigurationCmdService cmdService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEFAULT_CODE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;xxx&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">AssertService</span> <span class=\"variable\">contentAssertService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AssertService</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String,String&gt; codeMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String,String&gt;()&#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            put(<span class=\"string\">&quot;上线&quot;</span>,<span class=\"string\">&quot;ONLINE&quot;</span>);</span><br><span class=\"line\">            put(<span class=\"string\">&quot;审核&quot;</span>,<span class=\"string\">&quot;AUDIT&quot;</span>);</span><br><span class=\"line\">            put(<span class=\"string\">&quot;草稿&quot;</span>,<span class=\"string\">&quot;DRAFT&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    @假如(<span class=\"string\">&quot;假设存在以下配置&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> 存在以下内容(DataTable dataTable) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据dataTable去创建一条内容</span></span><br><span class=\"line\">        List&lt;Config&gt; configs = ConfigTransform.transToConfig(dataTable.entries());</span><br><span class=\"line\">        contentRepository.createAll(configs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @那么(<span class=\"string\">&quot;id为&#123;string&#125;的配置状态为&#123;string&#125;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> id为的配置状态为(String id,String status)&#123;</span><br><span class=\"line\">        <span class=\"type\">Config</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> configRepository.queryById(id);</span><br><span class=\"line\">        <span class=\"comment\">//判断结果</span></span><br><span class=\"line\">        Assert.assertEquals(config.getStatus(),codeMap.get(status));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @当(<span class=\"string\">&quot;id为&#123;string&#125;上线&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> 在id为的目录下插入一条内容(String id)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建命令</span></span><br><span class=\"line\">        <span class=\"type\">ContentCreateParam</span> <span class=\"variable\">param</span> <span class=\"operator\">=</span> createOnlineCmd(id);</span><br><span class=\"line\">        <span class=\"comment\">//获得结果</span></span><br><span class=\"line\">        result = cmdService.online(param).getData().toString();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h3><p>mock db、外部服务。以mock db为例</p>\n<p>DB使用一个map来模拟数据库操作</p>\n<p>reset操作用于清空map，每一条用例都会自动清空map。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FakeConfigRepositoryImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SearchDataRepository</span> ,Resetable&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Getter</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, SearchDataDO&gt; doMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConfigConverter converter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FakeSearchDataRepositoryImpl</span><span class=\"params\">(SearchDataConverter converter)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.doMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.converter = converter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> config</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">create</span><span class=\"params\">(Config config)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigDO</span> <span class=\"variable\">configDo</span> <span class=\"operator\">=</span> converter.convert2DO(config);</span><br><span class=\"line\">        doMap.put(String.valueOf(config.getId()),configDo);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更新数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> searchData</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">update</span><span class=\"params\">(Config config)</span> &#123;</span><br><span class=\"line\">        create(searchData);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reset</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        doMap.clear();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>spring-test和spring-context版本必须一致，否则会报错</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"springboot-cucumber实践\"><a href=\"#springboot-cucumber实践\" class=\"headerlink\" title=\"springboot+cucumber实践\"></a>springboot+cucumber实践</h1><h2 id=\"why-BDD\"><a href=\"#why-BDD\" class=\"headerlink\" title=\"why BDD\"></a>why BDD</h2><ul>\n<li><strong>满足业务目标。</strong></li>\n<li><strong>关注用户需求</strong></li>\n<li><strong>良好的可读性</strong></li>\n</ul>\n<p>其实对于我自己来说，也有其他原因：</p>\n<p>1.因为客观原因，有时候项目开发结束后才拿到PRD，所以在开发前期，通过一些方式确定明确的业务流程会比直接上手开发可以更容易的发现问题。相比较DD文档，BDD的feature可能是对于非开发人员更易懂的方案。</p>\n<p>2.因为文档往往存在滞后，帮助将来的自己或是其他接手的同学去更快的回顾或是了解某个业务的诉求。</p>","more":"<h2 id=\"一个样例项目的开始\"><a href=\"#一个样例项目的开始\" class=\"headerlink\" title=\"一个样例项目的开始\"></a>一个样例项目的开始</h2><h4 id=\"项目分层：\"><a href=\"#项目分层：\" class=\"headerlink\" title=\"项目分层：\"></a>项目分层：</h4><p><img src=\"/2023/05/12/%E5%9F%BA%E4%BA%8Espringboot%E2%80%94%E2%80%94%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84BDD%E5%AE%9E%E8%B7%B5/WX20230512-151458@2x.png\" alt=\"WX20230512-151458@2x\"></p>\n<h4 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><p>以<strong>功能配置</strong>单上线操作为例</p>\n<p>application中存在一个上线接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">interface</span> ConfigurationCmdService&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上线功能</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cmd</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Result&lt;Boolean&gt;  <span class=\"title function_\">online</span><span class=\"params\">(ConfigOnlineCmd cmd)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 接口需要实现上线功能</span></span><br><span class=\"line\"><span class=\"comment\">* 假设操作只需要3步：</span></span><br><span class=\"line\"><span class=\"comment\">*\t1.查到需要上线的配置</span></span><br><span class=\"line\"><span class=\"comment\">*   2.上线操作</span></span><br><span class=\"line\"><span class=\"comment\">*   3.更新db</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">class</span> ConfigurationCmdServiceImpl <span class=\"keyword\">implements</span> <span class=\"title class_\">ConfigurationCmdService</span>&#123;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConfigRepository    repository;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConfigFactory factory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ConfigurationCmdServiceImpl</span><span class=\"params\">(ConfigRepository repository,ConfigFactory factory)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.repository = repository;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.factory = factory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ManualQueryServiceImpl</span><span class=\"params\">(SnapshotRepository repository, ManualSnapshotFactory factory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.repository = repository;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.factory = factory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@AutoWired</span></span><br><span class=\"line\">    Result&lt;Boolean&gt;  <span class=\"title function_\">online</span><span class=\"params\">(ConfigOnlineCmd cmd)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Config</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> repository.queryById(cmd.getId());</span><br><span class=\"line\">        config.online();</span><br><span class=\"line\">        <span class=\"comment\">//可能还有其他的一些操作</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> repository.update(config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"BDD的接入\"><a href=\"#BDD的接入\" class=\"headerlink\" title=\"BDD的接入\"></a>BDD的接入</h2><h3 id=\"前置工作\"><a href=\"#前置工作\" class=\"headerlink\" title=\"前置工作\"></a>前置工作</h3><h4 id=\"cucumber依赖\"><a href=\"#cucumber依赖\" class=\"headerlink\" title=\"cucumber依赖\"></a>cucumber依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- bdd依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.cucumber<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cucumber-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.cucumber<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cucumber-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.cucumber<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cucumber-junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.cucumber<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cucumber-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"结合junit4\"><a href=\"#结合junit4\" class=\"headerlink\" title=\"结合junit4\"></a>结合junit4</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-surefire-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;maven-surefire-plugin.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                        com.example.**Test.java</span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">testFailureIgnore</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">testFailureIgnore</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">skipTests</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">skipTests</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.surefire<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>surefire-junit4<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.22.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"结合jacoco生成单测报告\"><a href=\"#结合jacoco生成单测报告\" class=\"headerlink\" title=\"结合jacoco生成单测报告\"></a>结合jacoco生成单测报告</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.jacoco<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jacoco-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jacoco.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>prepare-agent<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>report<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>prepare-package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>report<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- -排掉工具类包 比方说，需要排出工具包--&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span>com.example.util.*<span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>启动类</p>\n<p>glue实际上是告诉cucumber启动后去扫描对应包下含有@CucumberContextConfiguration的文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(Cucumber.class)</span></span><br><span class=\"line\"><span class=\"meta\">@CucumberOptions(</span></span><br><span class=\"line\"><span class=\"meta\">        features = &#123;&quot;classpath:feature&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">        glue = &#123;&quot;com.example.step&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">        plugin = &#123;&quot;pretty&quot;,&quot;html:target/html-reports.htm&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApplicationTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置在测试中需要启动的bean以及一些需要去mock的bean、</p>\n<p>init方法在运行之前触发，reset方法见第四步</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CucumberContextConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(classes = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">        SpringTestConfig.class,</span></span><br><span class=\"line\"><span class=\"meta\">        MockObjectConfiguration.class</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Resetable&gt; resetables;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        CollectionUtils.emptyIfNull(resetables)</span><br><span class=\"line\">                .stream().forEach(v-&gt;v.reset());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>在classpath:feature下新建一个feature文件</p>\n<p>#language:zh-CN代表语言为中文</p>\n<figure class=\"highlight feature\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#language:zh-CN</span></span><br><span class=\"line\">功能:配置的CMD操作</span><br><span class=\"line\">  场景:上线一条配置</span><br><span class=\"line\">    假设存在以下配置</span><br><span class=\"line\">        |<span class=\"string\">id  </span>|<span class=\"string\"> content</span>|<span class=\"string\"> status </span>|<span class=\"string\"> bizCode </span>|</span><br><span class=\"line\">        |<span class=\"string\">1\t </span>|<span class=\"string\">xxxxx   </span>|<span class=\"string\"> AUDIT  </span>|<span class=\"string\"> XXXX    </span>|</span><br><span class=\"line\">        |<span class=\"string\">2\t </span>|<span class=\"string\">xxxxx   </span>|<span class=\"string\"> DRAFT  </span>|<span class=\"string\"> XXXX    </span>|</span><br><span class=\"line\">    当id为<span class=\"string\">&quot;1&quot;</span>上线</span><br><span class=\"line\">        |<span class=\"string\"> languageType </span>|<span class=\"string\"> bizCode </span>|</span><br><span class=\"line\">        |<span class=\"string\"> zh_CN        </span>|<span class=\"string\"> 008     </span>|</span><br><span class=\"line\">    那么id为<span class=\"string\">&quot;1&quot;</span>的配置状态为<span class=\"string\">&quot;上线中&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h3><p>实现上述的功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ContentStep</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FakeConfigRepositoryImpl       configRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String                            result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConfigurationCmdService cmdService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEFAULT_CODE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;xxx&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">AssertService</span> <span class=\"variable\">contentAssertService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AssertService</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String,String&gt; codeMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String,String&gt;()&#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            put(<span class=\"string\">&quot;上线&quot;</span>,<span class=\"string\">&quot;ONLINE&quot;</span>);</span><br><span class=\"line\">            put(<span class=\"string\">&quot;审核&quot;</span>,<span class=\"string\">&quot;AUDIT&quot;</span>);</span><br><span class=\"line\">            put(<span class=\"string\">&quot;草稿&quot;</span>,<span class=\"string\">&quot;DRAFT&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    @假如(<span class=\"string\">&quot;假设存在以下配置&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> 存在以下内容(DataTable dataTable) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据dataTable去创建一条内容</span></span><br><span class=\"line\">        List&lt;Config&gt; configs = ConfigTransform.transToConfig(dataTable.entries());</span><br><span class=\"line\">        contentRepository.createAll(configs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @那么(<span class=\"string\">&quot;id为&#123;string&#125;的配置状态为&#123;string&#125;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> id为的配置状态为(String id,String status)&#123;</span><br><span class=\"line\">        <span class=\"type\">Config</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> configRepository.queryById(id);</span><br><span class=\"line\">        <span class=\"comment\">//判断结果</span></span><br><span class=\"line\">        Assert.assertEquals(config.getStatus(),codeMap.get(status));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @当(<span class=\"string\">&quot;id为&#123;string&#125;上线&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> 在id为的目录下插入一条内容(String id)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建命令</span></span><br><span class=\"line\">        <span class=\"type\">ContentCreateParam</span> <span class=\"variable\">param</span> <span class=\"operator\">=</span> createOnlineCmd(id);</span><br><span class=\"line\">        <span class=\"comment\">//获得结果</span></span><br><span class=\"line\">        result = cmdService.online(param).getData().toString();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h3><p>mock db、外部服务。以mock db为例</p>\n<p>DB使用一个map来模拟数据库操作</p>\n<p>reset操作用于清空map，每一条用例都会自动清空map。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FakeConfigRepositoryImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SearchDataRepository</span> ,Resetable&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Getter</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, SearchDataDO&gt; doMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConfigConverter converter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FakeSearchDataRepositoryImpl</span><span class=\"params\">(SearchDataConverter converter)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.doMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.converter = converter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> config</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">create</span><span class=\"params\">(Config config)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigDO</span> <span class=\"variable\">configDo</span> <span class=\"operator\">=</span> converter.convert2DO(config);</span><br><span class=\"line\">        doMap.put(String.valueOf(config.getId()),configDo);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更新数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> searchData</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">update</span><span class=\"params\">(Config config)</span> &#123;</span><br><span class=\"line\">        create(searchData);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reset</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        doMap.clear();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>spring-test和spring-context版本必须一致，否则会报错</p>"},{"title":"数据结构——链表、栈、队列","date":"2023-05-12T05:15:17.000Z","_content":"\n### 前言\n\n​\t链表、队列、栈，是数据结构中最基础的几个结构，而链表是最基础的。之后的复杂数据结构大都是在其基础上演化出来的。\n\n### 链表\n\n​\t一种线程数据结构，与数组不同的是，它在内存空间中不一定是顺序存储的，为了保证链表中元素的连续性，一般使用一个指针来找到下一个元素。\n\n![linkedlist](数据结构——链表、栈、队列/WX20230512-133517@2x.png)\n\n<!-- more -->\n\n使用java实现一个链表链表，首先需要定义一个节点\n\n```java\nclass Node<T> {\n        T       value;\n        Node<T> next;\n\n        public Node(T value) {\n            this.value = value;\n        }\n    }\n```\n\n因此，对于链表来说，如果想要根据索引查找元素，只能从头开始，时间复杂度O(N).\n\n如果在Node中增加了前驱节点，那么就会成为双向链表。\n\n![doublelinkedlist](数据结构——链表、栈、队列/WX20230512-134440@2x.png)\n\nJava中的LinkedList就是典型的双向链表。\n\n如果在LinkedList上结合HashMap(Set)就是**LinkedHashMap**(Set),既保证了元素的有序性，有可以O1获取元素。\n\n一个简单的链表实现如下\n\n```java\npublic class LinkedList<T> {\n    private class Node<T> {\n        T       value;\n        Node<T> next;\n\n        public Node(T value) {\n            this.value = value;\n        }\n    }\n\n    /**\n     * 长度/length\n     */\n    Integer N;\n\n    /**\n     * 根节点/root\n     */\n    Node    root;\n\n    /**\n     * 初始化根节点/init root\n     */\n    public LinkedList() {\n        this.root = new Node(null);\n        N = 0;\n    }\n\n    /**\n     * 插入/insert\n     * \n     * @param value\n     */\n    public void insert(T value) {\n        // 新建结点/new\n        Node<T> tNode = new Node<>(value);\n        // 插入结点/insert\n        Node next = root.next;\n        root.next = tNode;\n        tNode.next = next;\n        // 长度+1/length++\n        N++;\n    }\n\n    /**\n     * 删除/delete\n     */\n    public void remove() {\n        if (N == 0) {\n            return;\n        }\n        // 删除/delete\n        Node next = root.next;\n        Node next1 = next.next;\n        root.next = next1;\n        // 长度-1/length--\n        N--;\n    }\n\n    public void printList() {\n        Node curr = root.next;\n        for (Integer i = 0; i < N; i++) {\n            System.out.println(curr.value);\n            curr = curr.next;\n        }\n        System.out.println(\"\\n\");\n    }\n}\n```\n\n#### \t算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大/小元素等。链表也是实现跳表的基础。\n\n### 队列/栈\n\n​\t链表和队列本质上是一种特殊的单链表，不同之处在于他们限制了元素的插入/删除顺序。\n\n#### \t队列：\n\n​\t对于队列来说，元素从一端进入，从另一端出去，也就是先入的元素先被删除，英文叫做：First In，First Out，简写FIFO。\n\n![queue](数据结构——链表、栈、队列/WX20230512-135224@2x.png)\n\n​\t队列比较经典的使用是在广度优先搜索当中(树的层序遍历其实也是广度优先搜索)。除此之外，队列也可以拥有顺序，称之为优先队列，在java已经有实现，称之为**PriorityQueue**。\n\n#### \t栈：\n\n​\t栈则相反，元素从一端进，就要从一端出。也就是先进后出，英文叫做：First In，Last Out，简称FILO。\n\n![stack](数据结构——链表、栈、队列/WX20230512-135651@2x.png)\n\n​\t栈在算法中经常使用到，诸如括号标点匹配问题，单调栈问题等，递归也是一种特殊的对栈的使用。\n","source":"_posts/数据结构——链表、栈、队列.md","raw":"---\ntitle: 数据结构——链表、栈、队列\ndate: 2023-05-12 13:15:17\ncategories: 技术\ntags:\n  - 数据结构\n  - java\n---\n\n### 前言\n\n​\t链表、队列、栈，是数据结构中最基础的几个结构，而链表是最基础的。之后的复杂数据结构大都是在其基础上演化出来的。\n\n### 链表\n\n​\t一种线程数据结构，与数组不同的是，它在内存空间中不一定是顺序存储的，为了保证链表中元素的连续性，一般使用一个指针来找到下一个元素。\n\n![linkedlist](数据结构——链表、栈、队列/WX20230512-133517@2x.png)\n\n<!-- more -->\n\n使用java实现一个链表链表，首先需要定义一个节点\n\n```java\nclass Node<T> {\n        T       value;\n        Node<T> next;\n\n        public Node(T value) {\n            this.value = value;\n        }\n    }\n```\n\n因此，对于链表来说，如果想要根据索引查找元素，只能从头开始，时间复杂度O(N).\n\n如果在Node中增加了前驱节点，那么就会成为双向链表。\n\n![doublelinkedlist](数据结构——链表、栈、队列/WX20230512-134440@2x.png)\n\nJava中的LinkedList就是典型的双向链表。\n\n如果在LinkedList上结合HashMap(Set)就是**LinkedHashMap**(Set),既保证了元素的有序性，有可以O1获取元素。\n\n一个简单的链表实现如下\n\n```java\npublic class LinkedList<T> {\n    private class Node<T> {\n        T       value;\n        Node<T> next;\n\n        public Node(T value) {\n            this.value = value;\n        }\n    }\n\n    /**\n     * 长度/length\n     */\n    Integer N;\n\n    /**\n     * 根节点/root\n     */\n    Node    root;\n\n    /**\n     * 初始化根节点/init root\n     */\n    public LinkedList() {\n        this.root = new Node(null);\n        N = 0;\n    }\n\n    /**\n     * 插入/insert\n     * \n     * @param value\n     */\n    public void insert(T value) {\n        // 新建结点/new\n        Node<T> tNode = new Node<>(value);\n        // 插入结点/insert\n        Node next = root.next;\n        root.next = tNode;\n        tNode.next = next;\n        // 长度+1/length++\n        N++;\n    }\n\n    /**\n     * 删除/delete\n     */\n    public void remove() {\n        if (N == 0) {\n            return;\n        }\n        // 删除/delete\n        Node next = root.next;\n        Node next1 = next.next;\n        root.next = next1;\n        // 长度-1/length--\n        N--;\n    }\n\n    public void printList() {\n        Node curr = root.next;\n        for (Integer i = 0; i < N; i++) {\n            System.out.println(curr.value);\n            curr = curr.next;\n        }\n        System.out.println(\"\\n\");\n    }\n}\n```\n\n#### \t算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大/小元素等。链表也是实现跳表的基础。\n\n### 队列/栈\n\n​\t链表和队列本质上是一种特殊的单链表，不同之处在于他们限制了元素的插入/删除顺序。\n\n#### \t队列：\n\n​\t对于队列来说，元素从一端进入，从另一端出去，也就是先入的元素先被删除，英文叫做：First In，First Out，简写FIFO。\n\n![queue](数据结构——链表、栈、队列/WX20230512-135224@2x.png)\n\n​\t队列比较经典的使用是在广度优先搜索当中(树的层序遍历其实也是广度优先搜索)。除此之外，队列也可以拥有顺序，称之为优先队列，在java已经有实现，称之为**PriorityQueue**。\n\n#### \t栈：\n\n​\t栈则相反，元素从一端进，就要从一端出。也就是先进后出，英文叫做：First In，Last Out，简称FILO。\n\n![stack](数据结构——链表、栈、队列/WX20230512-135651@2x.png)\n\n​\t栈在算法中经常使用到，诸如括号标点匹配问题，单调栈问题等，递归也是一种特殊的对栈的使用。\n","slug":"数据结构——链表、栈、队列","published":1,"updated":"2023-05-12T06:56:08.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkds2dd0007bml7gnfs8h6z","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>​    链表、队列、栈，是数据结构中最基础的几个结构，而链表是最基础的。之后的复杂数据结构大都是在其基础上演化出来的。</p>\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><p>​    一种线程数据结构，与数组不同的是，它在内存空间中不一定是顺序存储的，为了保证链表中元素的连续性，一般使用一个指针来找到下一个元素。</p>\n<p><img src=\"/2023/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/WX20230512-133517@2x.png\" alt=\"linkedlist\"></p>\n<span id=\"more\"></span>\n<p>使用java实现一个链表链表，首先需要定义一个节点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        T       value;</span><br><span class=\"line\">        Node&lt;T&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>因此，对于链表来说，如果想要根据索引查找元素，只能从头开始，时间复杂度O(N).</p>\n<p>如果在Node中增加了前驱节点，那么就会成为双向链表。</p>\n<p><img src=\"/2023/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/WX20230512-134440@2x.png\" alt=\"doublelinkedlist\"></p>\n<p>Java中的LinkedList就是典型的双向链表。</p>\n<p>如果在LinkedList上结合HashMap(Set)就是<strong>LinkedHashMap</strong>(Set),既保证了元素的有序性，有可以O1获取元素。</p>\n<p>一个简单的链表实现如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LinkedList</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        T       value;</span><br><span class=\"line\">        Node&lt;T&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 长度/length</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Integer N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根节点/root</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Node    root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化根节点/init root</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LinkedList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.root = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入/insert</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新建结点/new</span></span><br><span class=\"line\">        Node&lt;T&gt; tNode = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;&gt;(value);</span><br><span class=\"line\">        <span class=\"comment\">// 插入结点/insert</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> root.next;</span><br><span class=\"line\">        root.next = tNode;</span><br><span class=\"line\">        tNode.next = next;</span><br><span class=\"line\">        <span class=\"comment\">// 长度+1/length++</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除/delete</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (N == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 删除/delete</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> root.next;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">next1</span> <span class=\"operator\">=</span> next.next;</span><br><span class=\"line\">        root.next = next1;</span><br><span class=\"line\">        <span class=\"comment\">// 长度-1/length--</span></span><br><span class=\"line\">        N--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> root.next;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            System.out.println(curr.value);</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大-小元素等。链表也是实现跳表的基础。\"><a href=\"#算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大-小元素等。链表也是实现跳表的基础。\" class=\"headerlink\" title=\"算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大/小元素等。链表也是实现跳表的基础。\"></a>算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大/小元素等。链表也是实现跳表的基础。</h4><h3 id=\"队列-栈\"><a href=\"#队列-栈\" class=\"headerlink\" title=\"队列/栈\"></a>队列/栈</h3><p>​    链表和队列本质上是一种特殊的单链表，不同之处在于他们限制了元素的插入/删除顺序。</p>\n<h4 id=\"队列：\"><a href=\"#队列：\" class=\"headerlink\" title=\"队列：\"></a>队列：</h4><p>​    对于队列来说，元素从一端进入，从另一端出去，也就是先入的元素先被删除，英文叫做：First In，First Out，简写FIFO。</p>\n<p><img src=\"/2023/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/WX20230512-135224@2x.png\" alt=\"queue\"></p>\n<p>​    队列比较经典的使用是在广度优先搜索当中(树的层序遍历其实也是广度优先搜索)。除此之外，队列也可以拥有顺序，称之为优先队列，在java已经有实现，称之为<strong>PriorityQueue</strong>。</p>\n<h4 id=\"栈：\"><a href=\"#栈：\" class=\"headerlink\" title=\"栈：\"></a>栈：</h4><p>​    栈则相反，元素从一端进，就要从一端出。也就是先进后出，英文叫做：First In，Last Out，简称FILO。</p>\n<p><img src=\"/2023/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/WX20230512-135651@2x.png\" alt=\"stack\"></p>\n<p>​    栈在算法中经常使用到，诸如括号标点匹配问题，单调栈问题等，递归也是一种特殊的对栈的使用。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>​    链表、队列、栈，是数据结构中最基础的几个结构，而链表是最基础的。之后的复杂数据结构大都是在其基础上演化出来的。</p>\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><p>​    一种线程数据结构，与数组不同的是，它在内存空间中不一定是顺序存储的，为了保证链表中元素的连续性，一般使用一个指针来找到下一个元素。</p>\n<p><img src=\"/2023/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/WX20230512-133517@2x.png\" alt=\"linkedlist\"></p>","more":"<p>使用java实现一个链表链表，首先需要定义一个节点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        T       value;</span><br><span class=\"line\">        Node&lt;T&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>因此，对于链表来说，如果想要根据索引查找元素，只能从头开始，时间复杂度O(N).</p>\n<p>如果在Node中增加了前驱节点，那么就会成为双向链表。</p>\n<p><img src=\"/2023/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/WX20230512-134440@2x.png\" alt=\"doublelinkedlist\"></p>\n<p>Java中的LinkedList就是典型的双向链表。</p>\n<p>如果在LinkedList上结合HashMap(Set)就是<strong>LinkedHashMap</strong>(Set),既保证了元素的有序性，有可以O1获取元素。</p>\n<p>一个简单的链表实现如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LinkedList</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        T       value;</span><br><span class=\"line\">        Node&lt;T&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 长度/length</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Integer N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根节点/root</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Node    root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化根节点/init root</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LinkedList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.root = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入/insert</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新建结点/new</span></span><br><span class=\"line\">        Node&lt;T&gt; tNode = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;&gt;(value);</span><br><span class=\"line\">        <span class=\"comment\">// 插入结点/insert</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> root.next;</span><br><span class=\"line\">        root.next = tNode;</span><br><span class=\"line\">        tNode.next = next;</span><br><span class=\"line\">        <span class=\"comment\">// 长度+1/length++</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除/delete</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (N == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 删除/delete</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> root.next;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">next1</span> <span class=\"operator\">=</span> next.next;</span><br><span class=\"line\">        root.next = next1;</span><br><span class=\"line\">        <span class=\"comment\">// 长度-1/length--</span></span><br><span class=\"line\">        N--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> root.next;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            System.out.println(curr.value);</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大-小元素等。链表也是实现跳表的基础。\"><a href=\"#算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大-小元素等。链表也是实现跳表的基础。\" class=\"headerlink\" title=\"算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大/小元素等。链表也是实现跳表的基础。\"></a>算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大/小元素等。链表也是实现跳表的基础。</h4><h3 id=\"队列-栈\"><a href=\"#队列-栈\" class=\"headerlink\" title=\"队列/栈\"></a>队列/栈</h3><p>​    链表和队列本质上是一种特殊的单链表，不同之处在于他们限制了元素的插入/删除顺序。</p>\n<h4 id=\"队列：\"><a href=\"#队列：\" class=\"headerlink\" title=\"队列：\"></a>队列：</h4><p>​    对于队列来说，元素从一端进入，从另一端出去，也就是先入的元素先被删除，英文叫做：First In，First Out，简写FIFO。</p>\n<p><img src=\"/2023/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/WX20230512-135224@2x.png\" alt=\"queue\"></p>\n<p>​    队列比较经典的使用是在广度优先搜索当中(树的层序遍历其实也是广度优先搜索)。除此之外，队列也可以拥有顺序，称之为优先队列，在java已经有实现，称之为<strong>PriorityQueue</strong>。</p>\n<h4 id=\"栈：\"><a href=\"#栈：\" class=\"headerlink\" title=\"栈：\"></a>栈：</h4><p>​    栈则相反，元素从一端进，就要从一端出。也就是先进后出，英文叫做：First In，Last Out，简称FILO。</p>\n<p><img src=\"/2023/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/WX20230512-135651@2x.png\" alt=\"stack\"></p>\n<p>​    栈在算法中经常使用到，诸如括号标点匹配问题，单调栈问题等，递归也是一种特殊的对栈的使用。</p>"},{"title":"LeetCode-386","author":"Ray","top":true,"cover":false,"date":"2023-05-12T07:31:09.000Z","_content":"\n### Q：\n\n给你一个整数 `n` ，按字典序返回范围 `[1, n]` 内所有整数。\n\n你必须设计一个时间复杂度为 `O(n)` 且使用 `O(1)` 额外空间的算法。\n\n<!-- more -->\n\n### S：\n\n首先：字典序可以抽象为一棵树，如下图所示\n\n![1603875858-aRThUF-QQ20201028-170405@2x](LeetCode-386/1603875858-aRThUF-QQ20201028-170405@2x.png)\n\n所以，有小到大输出其实就是输出他的先序遍历\n\n**参考二叉搜索树的先序遍历写法**\n\n​    1.递归：\n\n​        此处不一样的是需要舍去头结点0，以1-9分别为根节点进行遍历输出：\n\n​            1.递归结束条件，当前结点＞n，则递归结束\n\n​            2.将元素值添加进入res,遍历其10个兄弟结点，进入递归其子节点\n\n````java\n```java\nclass Solution {\n    public List<Integer> lexicalOrder(int n) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 1; i < 10; i++){\n             dfs(n, i, list);\n        }\n        return list;\n    }\n    private void dfs(int n,int i,List<Integer>list){\n        if(i>n){\n            return ;\n        }\n        list.add(i);\n        for(int j=0;j<=9;j++){\n            dfs(n,i*10+j,list);\n        }\n    }\n\n}\n```\n````\n\n\n\n​    2.迭代:\n\n​\t**tipp **：`while(curr%10==0) curr/=10;` 这行代码的目的是处理那些在字典序中应该提前结束的数字。\n\n例如，假设 `n` 是 130。我们在字典序中遍历时，应该是这样的顺序：1, 10, 11, ..., 19, 2, 20, ..., 29, ..., 13, 130, 14, ..., 19, 2, ..., 9。\n\n当我们的 `curr` 变成 130 后，如果我们直接 `curr+=1`，那么 `curr` 就变成了 131，这显然是超过 `n` 的，而且不符合字典序。我们应该跳过所有 13x（x > 0）的数字，直接变成 14。\n\n这就是 `while(curr%10==0) curr/=10;` 这行代码的目的：当 `curr` 的最后一位是 0（即 `curr%10==0`）时，我们应该退回到上一层（即 `curr/=10`）。在这个例子中，130 退回到 13，然后 `curr+=1` 变成 14，这样就符合字典序了。\n\n这样的处理能保证我们的遍历顺序始终是按照字典序进行的，即先遍历同一层的数，然后再遍历下一层的数。\n\n       ```java\n       class Solution {\n            public List<Integer> lexicalOrder(int n) {\n                List<Integer> list = new ArrayList<>();\n                int curr = 1;\n                // 遍历/traverse\n                for(int i=0;i<n;i++){\n                    list.add(curr);\n                    if(curr*10<=n){\n                        curr*=10;//遍历下一层/find next level number\n                    }else{\n                        if(curr>=n)   curr/=10;//如果比n大，结束遍历退回上一层/If greater than n, end traversal and return to previous level\n                        curr+=1;\n                        while(curr%10==0) curr/=10;\n                    }\n                }\n                return list;\n            }\n       \n       }\n       ```\n\n","source":"_posts/LeetCode/LeetCode-386.md","raw":"---\ntitle: LeetCode-386\nauthor: Ray\ntop: true\ncover: false\ndate: 2023-05-12 15:31:09\ncategories: 技术\ntags: \n  - 力扣之旅\n  - java\n  - DFS\n---\n\n### Q：\n\n给你一个整数 `n` ，按字典序返回范围 `[1, n]` 内所有整数。\n\n你必须设计一个时间复杂度为 `O(n)` 且使用 `O(1)` 额外空间的算法。\n\n<!-- more -->\n\n### S：\n\n首先：字典序可以抽象为一棵树，如下图所示\n\n![1603875858-aRThUF-QQ20201028-170405@2x](LeetCode-386/1603875858-aRThUF-QQ20201028-170405@2x.png)\n\n所以，有小到大输出其实就是输出他的先序遍历\n\n**参考二叉搜索树的先序遍历写法**\n\n​    1.递归：\n\n​        此处不一样的是需要舍去头结点0，以1-9分别为根节点进行遍历输出：\n\n​            1.递归结束条件，当前结点＞n，则递归结束\n\n​            2.将元素值添加进入res,遍历其10个兄弟结点，进入递归其子节点\n\n````java\n```java\nclass Solution {\n    public List<Integer> lexicalOrder(int n) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 1; i < 10; i++){\n             dfs(n, i, list);\n        }\n        return list;\n    }\n    private void dfs(int n,int i,List<Integer>list){\n        if(i>n){\n            return ;\n        }\n        list.add(i);\n        for(int j=0;j<=9;j++){\n            dfs(n,i*10+j,list);\n        }\n    }\n\n}\n```\n````\n\n\n\n​    2.迭代:\n\n​\t**tipp **：`while(curr%10==0) curr/=10;` 这行代码的目的是处理那些在字典序中应该提前结束的数字。\n\n例如，假设 `n` 是 130。我们在字典序中遍历时，应该是这样的顺序：1, 10, 11, ..., 19, 2, 20, ..., 29, ..., 13, 130, 14, ..., 19, 2, ..., 9。\n\n当我们的 `curr` 变成 130 后，如果我们直接 `curr+=1`，那么 `curr` 就变成了 131，这显然是超过 `n` 的，而且不符合字典序。我们应该跳过所有 13x（x > 0）的数字，直接变成 14。\n\n这就是 `while(curr%10==0) curr/=10;` 这行代码的目的：当 `curr` 的最后一位是 0（即 `curr%10==0`）时，我们应该退回到上一层（即 `curr/=10`）。在这个例子中，130 退回到 13，然后 `curr+=1` 变成 14，这样就符合字典序了。\n\n这样的处理能保证我们的遍历顺序始终是按照字典序进行的，即先遍历同一层的数，然后再遍历下一层的数。\n\n       ```java\n       class Solution {\n            public List<Integer> lexicalOrder(int n) {\n                List<Integer> list = new ArrayList<>();\n                int curr = 1;\n                // 遍历/traverse\n                for(int i=0;i<n;i++){\n                    list.add(curr);\n                    if(curr*10<=n){\n                        curr*=10;//遍历下一层/find next level number\n                    }else{\n                        if(curr>=n)   curr/=10;//如果比n大，结束遍历退回上一层/If greater than n, end traversal and return to previous level\n                        curr+=1;\n                        while(curr%10==0) curr/=10;\n                    }\n                }\n                return list;\n            }\n       \n       }\n       ```\n\n","slug":"LeetCode/LeetCode-386","published":1,"updated":"2023-05-12T07:55:23.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkds2de0009bml7hcej0unv","content":"<h3 id=\"Q：\"><a href=\"#Q：\" class=\"headerlink\" title=\"Q：\"></a>Q：</h3><p>给你一个整数 <code>n</code> ，按字典序返回范围 <code>[1, n]</code> 内所有整数。</p>\n<p>你必须设计一个时间复杂度为 <code>O(n)</code> 且使用 <code>O(1)</code> 额外空间的算法。</p>\n<span id=\"more\"></span>\n<h3 id=\"S：\"><a href=\"#S：\" class=\"headerlink\" title=\"S：\"></a>S：</h3><p>首先：字典序可以抽象为一棵树，如下图所示</p>\n<p><img src=\"/2023/05/12/LeetCode/LeetCode-386/1603875858-aRThUF-QQ20201028-170405@2x.png\" alt=\"1603875858-aRThUF-QQ20201028-170405@2x\"></p>\n<p>所以，有小到大输出其实就是输出他的先序遍历</p>\n<p><strong>参考二叉搜索树的先序遍历写法</strong></p>\n<p>​    1.递归：</p>\n<p>​        此处不一样的是需要舍去头结点0，以1-9分别为根节点进行遍历输出：</p>\n<p>​            1.递归结束条件，当前结点＞n，则递归结束</p>\n<p>​            2.将元素值添加进入res,遍历其10个兄弟结点，进入递归其子节点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">lexicalOrder</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">             dfs(n, i, list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">int</span> i,List&lt;Integer&gt;list)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.add(i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=<span class=\"number\">9</span>;j++)&#123;</span><br><span class=\"line\">            dfs(n,i*<span class=\"number\">10</span>+j,list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n<p>​    2.迭代:</p>\n<p>​    <strong>tipp </strong>：<code>while(curr%10==0) curr/=10;</code> 这行代码的目的是处理那些在字典序中应该提前结束的数字。</p>\n<p>例如，假设 <code>n</code> 是 130。我们在字典序中遍历时，应该是这样的顺序：1, 10, 11, …, 19, 2, 20, …, 29, …, 13, 130, 14, …, 19, 2, …, 9。</p>\n<p>当我们的 <code>curr</code> 变成 130 后，如果我们直接 <code>curr+=1</code>，那么 <code>curr</code> 就变成了 131，这显然是超过 <code>n</code> 的，而且不符合字典序。我们应该跳过所有 13x（x &gt; 0）的数字，直接变成 14。</p>\n<p>这就是 <code>while(curr%10==0) curr/=10;</code> 这行代码的目的：当 <code>curr</code> 的最后一位是 0（即 <code>curr%10==0</code>）时，我们应该退回到上一层（即 <code>curr/=10</code>）。在这个例子中，130 退回到 13，然后 <code>curr+=1</code> 变成 14，这样就符合字典序了。</p>\n<p>这样的处理能保证我们的遍历顺序始终是按照字典序进行的，即先遍历同一层的数，然后再遍历下一层的数。</p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">lexicalOrder</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">         List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">         <span class=\"type\">int</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">         <span class=\"comment\">// 遍历/traverse</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">             list.add(curr);</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(curr*<span class=\"number\">10</span>&lt;=n)&#123;</span><br><span class=\"line\">                 curr*=<span class=\"number\">10</span>;<span class=\"comment\">//遍历下一层/find next level number</span></span><br><span class=\"line\">             &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(curr&gt;=n)   curr/=<span class=\"number\">10</span>;<span class=\"comment\">//如果比n大，结束遍历退回上一层/If greater than n, end traversal and return to previous level</span></span><br><span class=\"line\">                 curr+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                 <span class=\"keyword\">while</span>(curr%<span class=\"number\">10</span>==<span class=\"number\">0</span>) curr/=<span class=\"number\">10</span>;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>","site":{"data":{}},"excerpt":"<h3 id=\"Q：\"><a href=\"#Q：\" class=\"headerlink\" title=\"Q：\"></a>Q：</h3><p>给你一个整数 <code>n</code> ，按字典序返回范围 <code>[1, n]</code> 内所有整数。</p>\n<p>你必须设计一个时间复杂度为 <code>O(n)</code> 且使用 <code>O(1)</code> 额外空间的算法。</p>","more":"<h3 id=\"S：\"><a href=\"#S：\" class=\"headerlink\" title=\"S：\"></a>S：</h3><p>首先：字典序可以抽象为一棵树，如下图所示</p>\n<p><img src=\"/2023/05/12/LeetCode/LeetCode-386/1603875858-aRThUF-QQ20201028-170405@2x.png\" alt=\"1603875858-aRThUF-QQ20201028-170405@2x\"></p>\n<p>所以，有小到大输出其实就是输出他的先序遍历</p>\n<p><strong>参考二叉搜索树的先序遍历写法</strong></p>\n<p>​    1.递归：</p>\n<p>​        此处不一样的是需要舍去头结点0，以1-9分别为根节点进行遍历输出：</p>\n<p>​            1.递归结束条件，当前结点＞n，则递归结束</p>\n<p>​            2.将元素值添加进入res,遍历其10个兄弟结点，进入递归其子节点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">lexicalOrder</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">             dfs(n, i, list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">int</span> i,List&lt;Integer&gt;list)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.add(i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=<span class=\"number\">9</span>;j++)&#123;</span><br><span class=\"line\">            dfs(n,i*<span class=\"number\">10</span>+j,list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n<p>​    2.迭代:</p>\n<p>​    <strong>tipp </strong>：<code>while(curr%10==0) curr/=10;</code> 这行代码的目的是处理那些在字典序中应该提前结束的数字。</p>\n<p>例如，假设 <code>n</code> 是 130。我们在字典序中遍历时，应该是这样的顺序：1, 10, 11, …, 19, 2, 20, …, 29, …, 13, 130, 14, …, 19, 2, …, 9。</p>\n<p>当我们的 <code>curr</code> 变成 130 后，如果我们直接 <code>curr+=1</code>，那么 <code>curr</code> 就变成了 131，这显然是超过 <code>n</code> 的，而且不符合字典序。我们应该跳过所有 13x（x &gt; 0）的数字，直接变成 14。</p>\n<p>这就是 <code>while(curr%10==0) curr/=10;</code> 这行代码的目的：当 <code>curr</code> 的最后一位是 0（即 <code>curr%10==0</code>）时，我们应该退回到上一层（即 <code>curr/=10</code>）。在这个例子中，130 退回到 13，然后 <code>curr+=1</code> 变成 14，这样就符合字典序了。</p>\n<p>这样的处理能保证我们的遍历顺序始终是按照字典序进行的，即先遍历同一层的数，然后再遍历下一层的数。</p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">lexicalOrder</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">         List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">         <span class=\"type\">int</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">         <span class=\"comment\">// 遍历/traverse</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">             list.add(curr);</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(curr*<span class=\"number\">10</span>&lt;=n)&#123;</span><br><span class=\"line\">                 curr*=<span class=\"number\">10</span>;<span class=\"comment\">//遍历下一层/find next level number</span></span><br><span class=\"line\">             &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(curr&gt;=n)   curr/=<span class=\"number\">10</span>;<span class=\"comment\">//如果比n大，结束遍历退回上一层/If greater than n, end traversal and return to previous level</span></span><br><span class=\"line\">                 curr+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                 <span class=\"keyword\">while</span>(curr%<span class=\"number\">10</span>==<span class=\"number\">0</span>) curr/=<span class=\"number\">10</span>;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>"},{"title":"LeetCode-406","author":"Ray","top":true,"cover":false,"date":"2023-05-12T08:13:50.000Z","_content":"\n### Q:\n\n假设有打乱顺序的一群人站成一个队列，数组 `people` 表示队列中一些人的属性（不一定按顺序）。每个 `people[i] = [hi, ki]` 表示第 `i` 个人的身高为 `hi` ，前面 **正好** 有 `ki` 个身高大于或等于 `hi` 的人。\n\n请你重新构造并返回输入数组 `people` 所表示的队列。返回的队列应该格式化为数组 `queue` ，其中 `queue[j] = [hj, kj]` 是队列中第 `j` 个人的属性（`queue[0]` 是排在队列前面的人）。\n\n<!-- more -->\n\n#### Input:\n\n```\n输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n解释：\n编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。\n编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。\n编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。\n编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。\n编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。\n```\n\n### S:\n\n一个人有<h,k>2个属性，h代表高度，同样的高度的前提下，k大的人应该在后面。 为了确定<h,i>应该去哪，我们可以考虑倒排身高，这样前面有多少个比他高的人就已知了。 假设某个队列排到<h,i>，对于已插入的前面的人来说，身高都≥他，所以当他插入第i个位置的时候，对其他人是不产生影响的（因为当身高一致,i会正序排序）\n\n```java\nclass Solution {\n    public int[][] reconstructQueue(int[][] people) {\n        Arrays.sort(people,new Comparator<int[]>(){\n            @Override\n            public int compare(int[] o1, int [] o2) {\n                return o1[0]==o2[0]?o1[1]-o2[1]:o2[0]-o1[0];\n            }\n        });\n        List<int[]> res = new ArrayList<>();\n        for(int [] peo:people){\n            res.add(peo[1], peo);\n        }\n        return res.toArray(new int [res.size()][2]);\n    }\n}\n```\n\n","source":"_posts/LeetCode/LeetCode-406.md","raw":"---\n\ntitle: LeetCode-406\nauthor: Ray\ntop: true\ncover: false\ndate: 2023-05-12 16:13:50\ncategories: 技术\ntags: \n  - 力扣之旅\n  - java\n---\n\n### Q:\n\n假设有打乱顺序的一群人站成一个队列，数组 `people` 表示队列中一些人的属性（不一定按顺序）。每个 `people[i] = [hi, ki]` 表示第 `i` 个人的身高为 `hi` ，前面 **正好** 有 `ki` 个身高大于或等于 `hi` 的人。\n\n请你重新构造并返回输入数组 `people` 所表示的队列。返回的队列应该格式化为数组 `queue` ，其中 `queue[j] = [hj, kj]` 是队列中第 `j` 个人的属性（`queue[0]` 是排在队列前面的人）。\n\n<!-- more -->\n\n#### Input:\n\n```\n输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n解释：\n编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。\n编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。\n编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。\n编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。\n编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。\n```\n\n### S:\n\n一个人有<h,k>2个属性，h代表高度，同样的高度的前提下，k大的人应该在后面。 为了确定<h,i>应该去哪，我们可以考虑倒排身高，这样前面有多少个比他高的人就已知了。 假设某个队列排到<h,i>，对于已插入的前面的人来说，身高都≥他，所以当他插入第i个位置的时候，对其他人是不产生影响的（因为当身高一致,i会正序排序）\n\n```java\nclass Solution {\n    public int[][] reconstructQueue(int[][] people) {\n        Arrays.sort(people,new Comparator<int[]>(){\n            @Override\n            public int compare(int[] o1, int [] o2) {\n                return o1[0]==o2[0]?o1[1]-o2[1]:o2[0]-o1[0];\n            }\n        });\n        List<int[]> res = new ArrayList<>();\n        for(int [] peo:people){\n            res.add(peo[1], peo);\n        }\n        return res.toArray(new int [res.size()][2]);\n    }\n}\n```\n\n","slug":"LeetCode/LeetCode-406","published":1,"updated":"2023-05-12T08:16:05.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkds2de000abml73rvk4epx","content":"<h3 id=\"Q\"><a href=\"#Q\" class=\"headerlink\" title=\"Q:\"></a>Q:</h3><p>假设有打乱顺序的一群人站成一个队列，数组 <code>people</code> 表示队列中一些人的属性（不一定按顺序）。每个 <code>people[i] = [hi, ki]</code> 表示第 <code>i</code> 个人的身高为 <code>hi</code> ，前面 <strong>正好</strong> 有 <code>ki</code> 个身高大于或等于 <code>hi</code> 的人。</p>\n<p>请你重新构造并返回输入数组 <code>people</code> 所表示的队列。返回的队列应该格式化为数组 <code>queue</code> ，其中 <code>queue[j] = [hj, kj]</code> 是队列中第 <code>j</code> 个人的属性（<code>queue[0]</code> 是排在队列前面的人）。</p>\n<span id=\"more\"></span>\n<h4 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input:\"></a>Input:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]</span><br><span class=\"line\">输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]</span><br><span class=\"line\">解释：</span><br><span class=\"line\">编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。</span><br><span class=\"line\">编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。</span><br><span class=\"line\">编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。</span><br><span class=\"line\">编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。</span><br><span class=\"line\">编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。</span><br><span class=\"line\">编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。</span><br><span class=\"line\">因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。</span><br></pre></td></tr></table></figure>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S:\"></a>S:</h3><p>一个人有&lt;h,k&gt;2个属性，h代表高度，同样的高度的前提下，k大的人应该在后面。 为了确定&lt;h,i&gt;应该去哪，我们可以考虑倒排身高，这样前面有多少个比他高的人就已知了。 假设某个队列排到&lt;h,i&gt;，对于已插入的前面的人来说，身高都≥他，所以当他插入第i个位置的时候，对其他人是不产生影响的（因为当身高一致,i会正序排序）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[][] reconstructQueue(<span class=\"type\">int</span>[][] people) &#123;</span><br><span class=\"line\">        Arrays.sort(people,<span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;<span class=\"type\">int</span>[]&gt;()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(<span class=\"type\">int</span>[] o1, <span class=\"type\">int</span> [] o2)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o1[<span class=\"number\">0</span>]==o2[<span class=\"number\">0</span>]?o1[<span class=\"number\">1</span>]-o2[<span class=\"number\">1</span>]:o2[<span class=\"number\">0</span>]-o1[<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        List&lt;<span class=\"type\">int</span>[]&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> [] peo:people)&#123;</span><br><span class=\"line\">            res.add(peo[<span class=\"number\">1</span>], peo);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span> [res.size()][<span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Q\"><a href=\"#Q\" class=\"headerlink\" title=\"Q:\"></a>Q:</h3><p>假设有打乱顺序的一群人站成一个队列，数组 <code>people</code> 表示队列中一些人的属性（不一定按顺序）。每个 <code>people[i] = [hi, ki]</code> 表示第 <code>i</code> 个人的身高为 <code>hi</code> ，前面 <strong>正好</strong> 有 <code>ki</code> 个身高大于或等于 <code>hi</code> 的人。</p>\n<p>请你重新构造并返回输入数组 <code>people</code> 所表示的队列。返回的队列应该格式化为数组 <code>queue</code> ，其中 <code>queue[j] = [hj, kj]</code> 是队列中第 <code>j</code> 个人的属性（<code>queue[0]</code> 是排在队列前面的人）。</p>","more":"<h4 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input:\"></a>Input:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]</span><br><span class=\"line\">输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]</span><br><span class=\"line\">解释：</span><br><span class=\"line\">编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。</span><br><span class=\"line\">编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。</span><br><span class=\"line\">编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。</span><br><span class=\"line\">编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。</span><br><span class=\"line\">编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。</span><br><span class=\"line\">编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。</span><br><span class=\"line\">因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。</span><br></pre></td></tr></table></figure>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S:\"></a>S:</h3><p>一个人有&lt;h,k&gt;2个属性，h代表高度，同样的高度的前提下，k大的人应该在后面。 为了确定&lt;h,i&gt;应该去哪，我们可以考虑倒排身高，这样前面有多少个比他高的人就已知了。 假设某个队列排到&lt;h,i&gt;，对于已插入的前面的人来说，身高都≥他，所以当他插入第i个位置的时候，对其他人是不产生影响的（因为当身高一致,i会正序排序）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[][] reconstructQueue(<span class=\"type\">int</span>[][] people) &#123;</span><br><span class=\"line\">        Arrays.sort(people,<span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;<span class=\"type\">int</span>[]&gt;()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(<span class=\"type\">int</span>[] o1, <span class=\"type\">int</span> [] o2)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o1[<span class=\"number\">0</span>]==o2[<span class=\"number\">0</span>]?o1[<span class=\"number\">1</span>]-o2[<span class=\"number\">1</span>]:o2[<span class=\"number\">0</span>]-o1[<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        List&lt;<span class=\"type\">int</span>[]&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> [] peo:people)&#123;</span><br><span class=\"line\">            res.add(peo[<span class=\"number\">1</span>], peo);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span> [res.size()][<span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"LeetCode-862","author":"Ray","top":true,"cover":false,"date":"2023-05-12T08:14:10.000Z","mathjax":true,"_content":"\n### Q:\n\n给你一个整数数组 `nums` 和一个整数 `k` ，找出 `nums` 中和至少为 `k` 的 **最短非空子数组** ，并返回该子数组的长度。如果不存在这样的 **子数组** ，返回 `-1` 。\n\n**子数组** 是数组中 **连续** 的一部分。\n\n<!-- more -->\n\n### Input:\n\n```\n输入：nums = [2,-1,2], k = 3\n输出：3\n```\n\n### S:\n\n​\t求连续子序列的和，很容易想到使用前缀和。\n\n​\t因为数组是存在正负的，所以无法使用二分，而暴力破解会超时。\n\n#### **优化：**\n\n​    因为是求区间最短，可以很显然可以想到滑动窗，但是这个数组并不满足单调性：\n\n​\t\t数组中存在**负数**，导致窗口值**不单调**，但是因为有负数所以才会导致当我们找到某个窗口和为K，窗内依然可能存在可行解，原因如下：\n\n​    **对于索引$i_j$前面满足≥K的所有索引${i_{0-j}}$，**\n\n​\t**如果$i_1$<$i_2$，arr[$i_1$]>arr[$i_2$],**\n\n​\t**那么可行解一定是$i_2$，**\n\n​\t**因为$i_2$更大且arr[$i_2$]更小**\n\n所以**我们可以维护一个单调队列保证窗口内值的单调性：**\n\n#### 思路：\n\n​\t基于我们总是希望对于每个右指针j，左指针能够尽可能的靠近，并且值尽可能地大。\n\n​\t如果有一个i-1的值 >i 处的值，那么i-1处的值就一定不是正确解，因为i处的值更近并且能够得到的数组和更大，如果i-1满足i一定满足，以此来减少我们的判断量\n\n​    如果队首的值满足当前值-队首值>=K,记录长度并弹出队首\n\n​    如果当前值<队列尾，那么弹出队尾保持队列单调\n\n```java\nclass Solution {\n    public int shortestSubarray(int[] A, int K) {\n        long [] arr = new long [A.length+1];\n        for(int i=0;i<A.length;i++){\n            arr[i+1] = arr[i]+A[i];\n            if(A[i]>=K) return 1;\n        }//得到前缀和数组/ get pre sum\n        int res = Integer.MAX_VALUE;\n        // for(int i=0;i<=A.length-1;i++){  //暴力破解 N^2 超时/O(N^2) out time\n        //     for(int j = i+1;j<=A.length;j++){\n        //         if(arr[j]-arr[i]>=K){\n        //             res = Math.min(j-i,res);\n        //         }\n        //     }\n        // }\n      \t\n        Deque<Integer> queue = new ArrayDeque<>();\n        for(int i=0;i<arr.length;i++){\n            while(!queue.isEmpty()&&arr[i]<=arr[queue.getLast()])   queue.removeLast();\n            while(!queue.isEmpty()&&arr[i]-arr[queue.peek()]>=K)    res = Math.min(res,i-queue.poll());\n            queue.add(i);\n        }\n        return res==Integer.MAX_VALUE?-1:res;\n    }\n}\n```\n\n","source":"_posts/LeetCode/LeetCode-862.md","raw":"---\ntitle: LeetCode-862\nauthor: Ray\ntop: true\ncover: false\ndate: 2023-05-12 16:14:10\ncategories: 技术\nmathjax: true\ntags: \n  - 力扣之旅\n  - java\n  - 前缀和\n  - 单调队列\n---\n\n### Q:\n\n给你一个整数数组 `nums` 和一个整数 `k` ，找出 `nums` 中和至少为 `k` 的 **最短非空子数组** ，并返回该子数组的长度。如果不存在这样的 **子数组** ，返回 `-1` 。\n\n**子数组** 是数组中 **连续** 的一部分。\n\n<!-- more -->\n\n### Input:\n\n```\n输入：nums = [2,-1,2], k = 3\n输出：3\n```\n\n### S:\n\n​\t求连续子序列的和，很容易想到使用前缀和。\n\n​\t因为数组是存在正负的，所以无法使用二分，而暴力破解会超时。\n\n#### **优化：**\n\n​    因为是求区间最短，可以很显然可以想到滑动窗，但是这个数组并不满足单调性：\n\n​\t\t数组中存在**负数**，导致窗口值**不单调**，但是因为有负数所以才会导致当我们找到某个窗口和为K，窗内依然可能存在可行解，原因如下：\n\n​    **对于索引$i_j$前面满足≥K的所有索引${i_{0-j}}$，**\n\n​\t**如果$i_1$<$i_2$，arr[$i_1$]>arr[$i_2$],**\n\n​\t**那么可行解一定是$i_2$，**\n\n​\t**因为$i_2$更大且arr[$i_2$]更小**\n\n所以**我们可以维护一个单调队列保证窗口内值的单调性：**\n\n#### 思路：\n\n​\t基于我们总是希望对于每个右指针j，左指针能够尽可能的靠近，并且值尽可能地大。\n\n​\t如果有一个i-1的值 >i 处的值，那么i-1处的值就一定不是正确解，因为i处的值更近并且能够得到的数组和更大，如果i-1满足i一定满足，以此来减少我们的判断量\n\n​    如果队首的值满足当前值-队首值>=K,记录长度并弹出队首\n\n​    如果当前值<队列尾，那么弹出队尾保持队列单调\n\n```java\nclass Solution {\n    public int shortestSubarray(int[] A, int K) {\n        long [] arr = new long [A.length+1];\n        for(int i=0;i<A.length;i++){\n            arr[i+1] = arr[i]+A[i];\n            if(A[i]>=K) return 1;\n        }//得到前缀和数组/ get pre sum\n        int res = Integer.MAX_VALUE;\n        // for(int i=0;i<=A.length-1;i++){  //暴力破解 N^2 超时/O(N^2) out time\n        //     for(int j = i+1;j<=A.length;j++){\n        //         if(arr[j]-arr[i]>=K){\n        //             res = Math.min(j-i,res);\n        //         }\n        //     }\n        // }\n      \t\n        Deque<Integer> queue = new ArrayDeque<>();\n        for(int i=0;i<arr.length;i++){\n            while(!queue.isEmpty()&&arr[i]<=arr[queue.getLast()])   queue.removeLast();\n            while(!queue.isEmpty()&&arr[i]-arr[queue.peek()]>=K)    res = Math.min(res,i-queue.poll());\n            queue.add(i);\n        }\n        return res==Integer.MAX_VALUE?-1:res;\n    }\n}\n```\n\n","slug":"LeetCode/LeetCode-862","published":1,"updated":"2023-05-12T08:26:38.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkds2df000ebml79egq567v","content":"<h3 id=\"Q\"><a href=\"#Q\" class=\"headerlink\" title=\"Q:\"></a>Q:</h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，找出 <code>nums</code> 中和至少为 <code>k</code> 的 <strong>最短非空子数组</strong> ，并返回该子数组的长度。如果不存在这样的 <strong>子数组</strong> ，返回 <code>-1</code> 。</p>\n<p><strong>子数组</strong> 是数组中 <strong>连续</strong> 的一部分。</p>\n<span id=\"more\"></span>\n<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input:\"></a>Input:</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,-1,2], k = 3</span><br><span class=\"line\">输出：3</span><br></pre></td></tr></table></figure>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S:\"></a>S:</h3><p>​    求连续子序列的和，很容易想到使用前缀和。</p>\n<p>​    因为数组是存在正负的，所以无法使用二分，而暴力破解会超时。</p>\n<h4 id=\"优化：\"><a href=\"#优化：\" class=\"headerlink\" title=\"优化：\"></a><strong>优化：</strong></h4><p>​    因为是求区间最短，可以很显然可以想到滑动窗，但是这个数组并不满足单调性：</p>\n<p>​        数组中存在<strong>负数</strong>，导致窗口值<strong>不单调</strong>，但是因为有负数所以才会导致当我们找到某个窗口和为K，窗内依然可能存在可行解，原因如下：</p>\n<p>​    <strong>对于索引$i_j$前面满足≥K的所有索引${i_{0-j}}$，</strong></p>\n<p>​    <strong>如果$i_1$&lt;$i_2$，arr[$i_1$]&gt;arr[$i_2$],</strong></p>\n<p>​    <strong>那么可行解一定是$i_2$，</strong></p>\n<p>​    <strong>因为$i_2$更大且arr[$i_2$]更小</strong></p>\n<p>所以<strong>我们可以维护一个单调队列保证窗口内值的单调性：</strong></p>\n<h4 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h4><p>​    基于我们总是希望对于每个右指针j，左指针能够尽可能的靠近，并且值尽可能地大。</p>\n<p>​    如果有一个i-1的值 &gt;i 处的值，那么i-1处的值就一定不是正确解，因为i处的值更近并且能够得到的数组和更大，如果i-1满足i一定满足，以此来减少我们的判断量</p>\n<p>​    如果队首的值满足当前值-队首值&gt;=K,记录长度并弹出队首</p>\n<p>​    如果当前值&lt;队列尾，那么弹出队尾保持队列单调</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">shortestSubarray</span><span class=\"params\">(<span class=\"type\">int</span>[] A, <span class=\"type\">int</span> K)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> [] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">long</span> [A.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.length;i++)&#123;</span><br><span class=\"line\">            arr[i+<span class=\"number\">1</span>] = arr[i]+A[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(A[i]&gt;=K) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"comment\">//得到前缀和数组/ get pre sum</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"comment\">// for(int i=0;i&lt;=A.length-1;i++)&#123;  //暴力破解 N^2 超时/O(N^2) out time</span></span><br><span class=\"line\">        <span class=\"comment\">//     for(int j = i+1;j&lt;=A.length;j++)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//         if(arr[j]-arr[i]&gt;=K)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//             res = Math.min(j-i,res);</span></span><br><span class=\"line\">        <span class=\"comment\">//         &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">      \t</span><br><span class=\"line\">        Deque&lt;Integer&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!queue.isEmpty()&amp;&amp;arr[i]&lt;=arr[queue.getLast()])   queue.removeLast();</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!queue.isEmpty()&amp;&amp;arr[i]-arr[queue.peek()]&gt;=K)    res = Math.min(res,i-queue.poll());</span><br><span class=\"line\">            queue.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res==Integer.MAX_VALUE?-<span class=\"number\">1</span>:res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Q\"><a href=\"#Q\" class=\"headerlink\" title=\"Q:\"></a>Q:</h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，找出 <code>nums</code> 中和至少为 <code>k</code> 的 <strong>最短非空子数组</strong> ，并返回该子数组的长度。如果不存在这样的 <strong>子数组</strong> ，返回 <code>-1</code> 。</p>\n<p><strong>子数组</strong> 是数组中 <strong>连续</strong> 的一部分。</p>","more":"<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input:\"></a>Input:</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,-1,2], k = 3</span><br><span class=\"line\">输出：3</span><br></pre></td></tr></table></figure>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S:\"></a>S:</h3><p>​    求连续子序列的和，很容易想到使用前缀和。</p>\n<p>​    因为数组是存在正负的，所以无法使用二分，而暴力破解会超时。</p>\n<h4 id=\"优化：\"><a href=\"#优化：\" class=\"headerlink\" title=\"优化：\"></a><strong>优化：</strong></h4><p>​    因为是求区间最短，可以很显然可以想到滑动窗，但是这个数组并不满足单调性：</p>\n<p>​        数组中存在<strong>负数</strong>，导致窗口值<strong>不单调</strong>，但是因为有负数所以才会导致当我们找到某个窗口和为K，窗内依然可能存在可行解，原因如下：</p>\n<p>​    <strong>对于索引$i_j$前面满足≥K的所有索引${i_{0-j}}$，</strong></p>\n<p>​    <strong>如果$i_1$&lt;$i_2$，arr[$i_1$]&gt;arr[$i_2$],</strong></p>\n<p>​    <strong>那么可行解一定是$i_2$，</strong></p>\n<p>​    <strong>因为$i_2$更大且arr[$i_2$]更小</strong></p>\n<p>所以<strong>我们可以维护一个单调队列保证窗口内值的单调性：</strong></p>\n<h4 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h4><p>​    基于我们总是希望对于每个右指针j，左指针能够尽可能的靠近，并且值尽可能地大。</p>\n<p>​    如果有一个i-1的值 &gt;i 处的值，那么i-1处的值就一定不是正确解，因为i处的值更近并且能够得到的数组和更大，如果i-1满足i一定满足，以此来减少我们的判断量</p>\n<p>​    如果队首的值满足当前值-队首值&gt;=K,记录长度并弹出队首</p>\n<p>​    如果当前值&lt;队列尾，那么弹出队尾保持队列单调</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">shortestSubarray</span><span class=\"params\">(<span class=\"type\">int</span>[] A, <span class=\"type\">int</span> K)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> [] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">long</span> [A.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.length;i++)&#123;</span><br><span class=\"line\">            arr[i+<span class=\"number\">1</span>] = arr[i]+A[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(A[i]&gt;=K) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"comment\">//得到前缀和数组/ get pre sum</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"comment\">// for(int i=0;i&lt;=A.length-1;i++)&#123;  //暴力破解 N^2 超时/O(N^2) out time</span></span><br><span class=\"line\">        <span class=\"comment\">//     for(int j = i+1;j&lt;=A.length;j++)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//         if(arr[j]-arr[i]&gt;=K)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//             res = Math.min(j-i,res);</span></span><br><span class=\"line\">        <span class=\"comment\">//         &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">      \t</span><br><span class=\"line\">        Deque&lt;Integer&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!queue.isEmpty()&amp;&amp;arr[i]&lt;=arr[queue.getLast()])   queue.removeLast();</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!queue.isEmpty()&amp;&amp;arr[i]-arr[queue.peek()]&gt;=K)    res = Math.min(res,i-queue.poll());</span><br><span class=\"line\">            queue.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res==Integer.MAX_VALUE?-<span class=\"number\">1</span>:res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"LeetCode-934","author":"Ray","top":true,"cover":false,"date":"2023-05-12T07:22:55.000Z","_content":"\n## LeetCode-934\n\n### Question:\n\n给你一个大小为 `n x n` 的二元矩阵 `grid` ，其中 `1` 表示陆地，`0` 表示水域。\n\n**岛** 是由四面相连的 `1` 形成的一个最大组，即不会与非组内的任何其他 `1` 相连。`grid` 中 **恰好存在两座岛** 。\n\n你可以将任意数量的 `0` 变为 `1` ，以使两座岛连接起来，变成 **一座岛** 。\n\n返回必须翻转的 `0` 的最小数目。\n\n<!-- more -->\n\n### Solution:\n\n因为题干中只有2个岛，所以我们可以使用深搜，先找到其中一个岛。\n\n\n\n对这个岛使用广度优先搜索，可以理解为对这个岛每次向外拓展1，当拓展第N次找到另外一个岛时，则为题干所求解。\n\n\n\n### Code：\n\n```java\nclass Solution {\n    public int shortestBridge(int[][] A) {\n        int [][] direction = new int [][]{{1,0},{-1,0},{0,1},{0,-1}};\n        Deque<int []> queue = new ArrayDeque<>();\n        int ans = -1;\n        boolean [][] visited = new boolean[A.length][A[0].length];\n        boolean flag = true;\n        for(int i=0;i<A.length&&flag;i++){\n            for(int j=0;j<A[0].length;j++) {\n                if (A[i][j] == 1) {\n                    dfs(  A, i, j, queue, visited);\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        while (!queue.isEmpty()){\n            int size = queue.size();\n            ans++;\n            for(int i=0;i<size;i++){\n                int []node = queue.poll();\n                for(int j=0;j<4;j++){\n                    int  nx = node[0]+direction[j][0];\n                    int ny = node[1]+direction[j][1];\n                    if(nx<0||nx>=A.length||ny<0||ny>=A[0].length||visited[nx][ny])    continue;\n                    if(A[nx][ny]==1)    return ans;\n                    visited[nx][ny] = true;\n                    queue.add(new int []{nx,ny});\n                }\n            }\n        }\n        return ans;\n    }\n    private void dfs(int [][]A,int i,int j,Deque queue,boolean[][]visited){\n        if(i<0||i>=A.length||j<0||j>=A[0].length||visited[i][j]||A[i][j]!=1)    return;\n        visited[i][j] = true;\n        queue.add(new int []{i,j});\n        dfs( A, i-1, j, queue, visited);\n        dfs( A, i+1, j, queue, visited);\n        dfs( A, i, j-1, queue, visited);\n        dfs( A, i, j+1, queue, visited);\n        \n    }\n}\n\n```\n\n","source":"_posts/LeetCode/LeetCode-934.md","raw":"---\ntitle: LeetCode-934\nauthor: Ray\ntop: true\ncover: false\ndate: 2023-05-12 15:22:55\ncategories: 技术\ntags: \n  - 力扣之旅\n  - java\n  - DFS\n---\n\n## LeetCode-934\n\n### Question:\n\n给你一个大小为 `n x n` 的二元矩阵 `grid` ，其中 `1` 表示陆地，`0` 表示水域。\n\n**岛** 是由四面相连的 `1` 形成的一个最大组，即不会与非组内的任何其他 `1` 相连。`grid` 中 **恰好存在两座岛** 。\n\n你可以将任意数量的 `0` 变为 `1` ，以使两座岛连接起来，变成 **一座岛** 。\n\n返回必须翻转的 `0` 的最小数目。\n\n<!-- more -->\n\n### Solution:\n\n因为题干中只有2个岛，所以我们可以使用深搜，先找到其中一个岛。\n\n\n\n对这个岛使用广度优先搜索，可以理解为对这个岛每次向外拓展1，当拓展第N次找到另外一个岛时，则为题干所求解。\n\n\n\n### Code：\n\n```java\nclass Solution {\n    public int shortestBridge(int[][] A) {\n        int [][] direction = new int [][]{{1,0},{-1,0},{0,1},{0,-1}};\n        Deque<int []> queue = new ArrayDeque<>();\n        int ans = -1;\n        boolean [][] visited = new boolean[A.length][A[0].length];\n        boolean flag = true;\n        for(int i=0;i<A.length&&flag;i++){\n            for(int j=0;j<A[0].length;j++) {\n                if (A[i][j] == 1) {\n                    dfs(  A, i, j, queue, visited);\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        while (!queue.isEmpty()){\n            int size = queue.size();\n            ans++;\n            for(int i=0;i<size;i++){\n                int []node = queue.poll();\n                for(int j=0;j<4;j++){\n                    int  nx = node[0]+direction[j][0];\n                    int ny = node[1]+direction[j][1];\n                    if(nx<0||nx>=A.length||ny<0||ny>=A[0].length||visited[nx][ny])    continue;\n                    if(A[nx][ny]==1)    return ans;\n                    visited[nx][ny] = true;\n                    queue.add(new int []{nx,ny});\n                }\n            }\n        }\n        return ans;\n    }\n    private void dfs(int [][]A,int i,int j,Deque queue,boolean[][]visited){\n        if(i<0||i>=A.length||j<0||j>=A[0].length||visited[i][j]||A[i][j]!=1)    return;\n        visited[i][j] = true;\n        queue.add(new int []{i,j});\n        dfs( A, i-1, j, queue, visited);\n        dfs( A, i+1, j, queue, visited);\n        dfs( A, i, j-1, queue, visited);\n        dfs( A, i, j+1, queue, visited);\n        \n    }\n}\n\n```\n\n","slug":"LeetCode/LeetCode-934","published":1,"updated":"2023-05-12T07:55:26.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkds2df000fbml79ox1f6ao","content":"<h2 id=\"LeetCode-934\"><a href=\"#LeetCode-934\" class=\"headerlink\" title=\"LeetCode-934\"></a>LeetCode-934</h2><h3 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question:\"></a>Question:</h3><p>给你一个大小为 <code>n x n</code> 的二元矩阵 <code>grid</code> ，其中 <code>1</code> 表示陆地，<code>0</code> 表示水域。</p>\n<p><strong>岛</strong> 是由四面相连的 <code>1</code> 形成的一个最大组，即不会与非组内的任何其他 <code>1</code> 相连。<code>grid</code> 中 <strong>恰好存在两座岛</strong> 。</p>\n<p>你可以将任意数量的 <code>0</code> 变为 <code>1</code> ，以使两座岛连接起来，变成 <strong>一座岛</strong> 。</p>\n<p>返回必须翻转的 <code>0</code> 的最小数目。</p>\n<span id=\"more\"></span>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution:\"></a>Solution:</h3><p>因为题干中只有2个岛，所以我们可以使用深搜，先找到其中一个岛。</p>\n<p>对这个岛使用广度优先搜索，可以理解为对这个岛每次向外拓展1，当拓展第N次找到另外一个岛时，则为题干所求解。</p>\n<h3 id=\"Code：\"><a href=\"#Code：\" class=\"headerlink\" title=\"Code：\"></a>Code：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">shortestBridge</span><span class=\"params\">(<span class=\"type\">int</span>[][] A)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> [][] direction = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span> [][]&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;-<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">0</span>,-<span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\">        Deque&lt;<span class=\"type\">int</span> []&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> [][] visited = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[A.length][A[<span class=\"number\">0</span>].length];</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.length&amp;&amp;flag;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;A[<span class=\"number\">0</span>].length;j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (A[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    dfs(  A, i, j, queue, visited);</span><br><span class=\"line\">                    flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> queue.size();</span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;size;i++)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> []node = queue.poll();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">4</span>;j++)&#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span>  <span class=\"variable\">nx</span> <span class=\"operator\">=</span> node[<span class=\"number\">0</span>]+direction[j][<span class=\"number\">0</span>];</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">ny</span> <span class=\"operator\">=</span> node[<span class=\"number\">1</span>]+direction[j][<span class=\"number\">1</span>];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(nx&lt;<span class=\"number\">0</span>||nx&gt;=A.length||ny&lt;<span class=\"number\">0</span>||ny&gt;=A[<span class=\"number\">0</span>].length||visited[nx][ny])    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(A[nx][ny]==<span class=\"number\">1</span>)    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">                    visited[nx][ny] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    queue.add(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span> []&#123;nx,ny&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> [][]A,<span class=\"type\">int</span> i,<span class=\"type\">int</span> j,Deque queue,<span class=\"type\">boolean</span>[][]visited)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span>||i&gt;=A.length||j&lt;<span class=\"number\">0</span>||j&gt;=A[<span class=\"number\">0</span>].length||visited[i][j]||A[i][j]!=<span class=\"number\">1</span>)    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        visited[i][j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        queue.add(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span> []&#123;i,j&#125;);</span><br><span class=\"line\">        dfs( A, i-<span class=\"number\">1</span>, j, queue, visited);</span><br><span class=\"line\">        dfs( A, i+<span class=\"number\">1</span>, j, queue, visited);</span><br><span class=\"line\">        dfs( A, i, j-<span class=\"number\">1</span>, queue, visited);</span><br><span class=\"line\">        dfs( A, i, j+<span class=\"number\">1</span>, queue, visited);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"LeetCode-934\"><a href=\"#LeetCode-934\" class=\"headerlink\" title=\"LeetCode-934\"></a>LeetCode-934</h2><h3 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question:\"></a>Question:</h3><p>给你一个大小为 <code>n x n</code> 的二元矩阵 <code>grid</code> ，其中 <code>1</code> 表示陆地，<code>0</code> 表示水域。</p>\n<p><strong>岛</strong> 是由四面相连的 <code>1</code> 形成的一个最大组，即不会与非组内的任何其他 <code>1</code> 相连。<code>grid</code> 中 <strong>恰好存在两座岛</strong> 。</p>\n<p>你可以将任意数量的 <code>0</code> 变为 <code>1</code> ，以使两座岛连接起来，变成 <strong>一座岛</strong> 。</p>\n<p>返回必须翻转的 <code>0</code> 的最小数目。</p>","more":"<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution:\"></a>Solution:</h3><p>因为题干中只有2个岛，所以我们可以使用深搜，先找到其中一个岛。</p>\n<p>对这个岛使用广度优先搜索，可以理解为对这个岛每次向外拓展1，当拓展第N次找到另外一个岛时，则为题干所求解。</p>\n<h3 id=\"Code：\"><a href=\"#Code：\" class=\"headerlink\" title=\"Code：\"></a>Code：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">shortestBridge</span><span class=\"params\">(<span class=\"type\">int</span>[][] A)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> [][] direction = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span> [][]&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;-<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">0</span>,-<span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\">        Deque&lt;<span class=\"type\">int</span> []&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> [][] visited = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[A.length][A[<span class=\"number\">0</span>].length];</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.length&amp;&amp;flag;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;A[<span class=\"number\">0</span>].length;j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (A[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    dfs(  A, i, j, queue, visited);</span><br><span class=\"line\">                    flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> queue.size();</span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;size;i++)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> []node = queue.poll();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">4</span>;j++)&#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span>  <span class=\"variable\">nx</span> <span class=\"operator\">=</span> node[<span class=\"number\">0</span>]+direction[j][<span class=\"number\">0</span>];</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">ny</span> <span class=\"operator\">=</span> node[<span class=\"number\">1</span>]+direction[j][<span class=\"number\">1</span>];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(nx&lt;<span class=\"number\">0</span>||nx&gt;=A.length||ny&lt;<span class=\"number\">0</span>||ny&gt;=A[<span class=\"number\">0</span>].length||visited[nx][ny])    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(A[nx][ny]==<span class=\"number\">1</span>)    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">                    visited[nx][ny] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    queue.add(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span> []&#123;nx,ny&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> [][]A,<span class=\"type\">int</span> i,<span class=\"type\">int</span> j,Deque queue,<span class=\"type\">boolean</span>[][]visited)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span>||i&gt;=A.length||j&lt;<span class=\"number\">0</span>||j&gt;=A[<span class=\"number\">0</span>].length||visited[i][j]||A[i][j]!=<span class=\"number\">1</span>)    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        visited[i][j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        queue.add(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span> []&#123;i,j&#125;);</span><br><span class=\"line\">        dfs( A, i-<span class=\"number\">1</span>, j, queue, visited);</span><br><span class=\"line\">        dfs( A, i+<span class=\"number\">1</span>, j, queue, visited);</span><br><span class=\"line\">        dfs( A, i, j-<span class=\"number\">1</span>, queue, visited);</span><br><span class=\"line\">        dfs( A, i, j+<span class=\"number\">1</span>, queue, visited);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"KMP algorithm","author":"Ray","top":true,"cover":false,"date":"2023-05-12T07:44:17.000Z","_content":"\n### KMP算法:\n\n​\tKMP (Knuth-Morris-Pratt) 算法是一种用于字符串搜索的算法，可以在一个文本串S内查找一个词W的出现位置。\n\n基本思想是，当子串与目标字符串不匹配时，其已知足够的信息能确定下一步的搜索不会导致目标字符串的漏检。这样，算法就不会进行无效的检查。\n\n下面是KMP算法的步骤：\n\n1. 构造一个\"部分匹配表\"（也称为 \"失败函数\"）。这是一个数组，对于给定的查找词，表中的每个元素都包含了当匹配失败时查找词应该跳转的位置。\n2. 使用这个表来进行字符串搜索。当在文本串中发生匹配失败时，可以直接跳过前面已知不会匹配的部分。\n\n<!-- more -->\n\n### Why KMP\n\n​\t传统的字符串匹配，如果从String[i]的比较失败，算法直接开始尝试从S[i+1]进行比较。这种行为是典型的 \"不从以前的错误中学习\"。我们应该注意到，一个失败的匹配将为我们提供有价值的信息--**如果String[i : i+len(P)]和P之间的匹配在第r个位置失败，那么从S[i]：第一个（r-1）连续字符必须与P的第一个（r-1）字符完全相同**。\n\n![](KMP-algorithm/1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg)\n\n​\t因此，我们可以尽可能地跳过这些不可能的字符串来优化我们的方法。\n举个例子：\n\n![](KMP-algorithm/1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg)\n\n​\t首先，P[5]未能匹配，那么这意味着S[0:5]等于P[0:5]，也就是 \"abcab\"。\n现在我们考虑：从S[1]，S[2]，S[3]最初的匹配尝试是否有机会成功？\n当我们从S[1]开始时，它不会成功。因为我们可以看到：P[1]！=P[0]，但P[1]=S[1]，所以P[0]！=S[1]。\n在S[2]中也是如此。\n但是当我们从S[3]开始时（这很重要）： **P[0] = P[3], S[3] = P[3], 所以P[0] = S[3].**\n我们可以发现，在S[3]中，有可能匹配成功。而且我们会发现，如果知道S和P在长度L内是相同的，那么任何一个i是否可以作为匹配的起点，只取决于P[0]=P[i]是否相等。这里我们可以得到KMP算法的核心下一个数组\n\n### NextArray\n\n​\t下一个数组是用于模式字符串。P的下一个数组定义为：： **next[i]代表P[0]~P[i]的一个子串，因此前k个字符正好等于后k个字符的最大k。特别是，k不能是i+1 **(因为这个子串总共只有i+1个字符，它必须等于它自己，所以它没有意义)。 **事实上，它是为了得到不同起点i时P串中最长的相同前缀和后缀的最大长度**。\n\n![](KMP-algorithm/1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg)\n\n### 匹配\n\n```java\n        int i=0;\n        int j = 0;\n        getNext(needle,next);\n        while (i < length && j < length1)\n        {\n            if (j == -1 || haystack.charAt(i) == needle.charAt(j))\n            {\n                i++;\n                j++;\n            }\n            else {\n                j = next[j];\n            }\n        }\n```\n\n![](KMP-algorithm/1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg)\n\n#### 首先：我们使用两个点来捕捉字符串。问题是如何改变这个点？\n\n#### 第二： \n\n \tString[i] != P [j] ,现在我们需要改变j来找到一个新的开始，即String的前缀等同于P。所以，下一个数组是有用的：` j = next[j]`。\n\n### 如何获得下一个数组\n\n```java\nvoid getNext(String p, int [] next)\n    {\n        next[0] = -1;\n        int i = 0, j = -1;\n\n        while (i < (p.length())){\n            if (j == -1 || p.charAt(i)==p.charAt(j)) {\n                ++i;\n                ++j;\n                next[i] = j;\n            }\n            else {\n                j = next[j];\n            }\n        }\n    }\n```\n\n**这段代码使用了一个小技巧：使next[0]=-1.你可以记住它，这将使代码更加容易；**\n\n### 动态规划：\n\nnext[i]是指p[0,next[i]]=p[i-next[i],i]的最大值(i)\n那么，如果我们知道next[0],next[1],...next[i-1]，如何知道next[i]？\n设置`next[i-1] = pre`。\n如果`p[i]=p[pre+1]`，这意味着`下一个[i]=pre+1`。\n否则如果`p[i] != p[pre+1],`就意味着`p[i-pre-1,i-1] = p[pre-1]`。\n我们应该减少pre:`pre = next[pre]`。\n\n![](KMP-algorithm/1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg)\n\n\n\n### Code:\n\n```java\n/**\n     * now we can use kmp algorithm，a prefix matching algorithm\n     *\n     */\n\n    public int strStr(String haystack, String needle){\n        //in first method,we can find that we need match all the substring if it's not match.\n        //some message have been lost: the prefix of the last string we have compared.\n        //we can start with the same prefix string to match,so that the time can be saved\n        // we can store the same prefix in a array or list, so we called kmp algorithm\n        int length = haystack.length();\n        int length1 = needle.length();\n        int i=0;\n        int j = 0;\n        int [] next = new int [length1];\n        getNext(needle,next);\n        while (i < length && j < length1)\n        {\n            if (j == -1 || haystack.charAt(i) == needle.charAt(j))\n            {\n                i++;\n                j++;\n            }\n            else {\n                j = next[j];\n            }\n        }\n\n        if (j == length1){\n            return i - j;\n        }\n        else {\n            return -1;\n        }\n    }\n\n    void getNext(String p, int [] next)\n    {\n        next[0] = -1;\n        int i = 0, j = -1;\n\n        while (i < (p.length())){\n            if (j == -1 || p.charAt(i)==p.charAt(j)) {\n                ++i;\n                ++j;\n                next[i] = j;\n            }\n            else {\n                j = next[j];\n            }\n        }\n    }\n```\n\n","source":"_posts/algorithm/KMP-algorithm.md","raw":"---\ntitle: KMP algorithm\nauthor: Ray\ntop: true\ncover: false\ndate: 2023-05-12 15:44:17\ncategories: 技术\ntags:\n  - java\n  - 算法\n---\n\n### KMP算法:\n\n​\tKMP (Knuth-Morris-Pratt) 算法是一种用于字符串搜索的算法，可以在一个文本串S内查找一个词W的出现位置。\n\n基本思想是，当子串与目标字符串不匹配时，其已知足够的信息能确定下一步的搜索不会导致目标字符串的漏检。这样，算法就不会进行无效的检查。\n\n下面是KMP算法的步骤：\n\n1. 构造一个\"部分匹配表\"（也称为 \"失败函数\"）。这是一个数组，对于给定的查找词，表中的每个元素都包含了当匹配失败时查找词应该跳转的位置。\n2. 使用这个表来进行字符串搜索。当在文本串中发生匹配失败时，可以直接跳过前面已知不会匹配的部分。\n\n<!-- more -->\n\n### Why KMP\n\n​\t传统的字符串匹配，如果从String[i]的比较失败，算法直接开始尝试从S[i+1]进行比较。这种行为是典型的 \"不从以前的错误中学习\"。我们应该注意到，一个失败的匹配将为我们提供有价值的信息--**如果String[i : i+len(P)]和P之间的匹配在第r个位置失败，那么从S[i]：第一个（r-1）连续字符必须与P的第一个（r-1）字符完全相同**。\n\n![](KMP-algorithm/1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg)\n\n​\t因此，我们可以尽可能地跳过这些不可能的字符串来优化我们的方法。\n举个例子：\n\n![](KMP-algorithm/1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg)\n\n​\t首先，P[5]未能匹配，那么这意味着S[0:5]等于P[0:5]，也就是 \"abcab\"。\n现在我们考虑：从S[1]，S[2]，S[3]最初的匹配尝试是否有机会成功？\n当我们从S[1]开始时，它不会成功。因为我们可以看到：P[1]！=P[0]，但P[1]=S[1]，所以P[0]！=S[1]。\n在S[2]中也是如此。\n但是当我们从S[3]开始时（这很重要）： **P[0] = P[3], S[3] = P[3], 所以P[0] = S[3].**\n我们可以发现，在S[3]中，有可能匹配成功。而且我们会发现，如果知道S和P在长度L内是相同的，那么任何一个i是否可以作为匹配的起点，只取决于P[0]=P[i]是否相等。这里我们可以得到KMP算法的核心下一个数组\n\n### NextArray\n\n​\t下一个数组是用于模式字符串。P的下一个数组定义为：： **next[i]代表P[0]~P[i]的一个子串，因此前k个字符正好等于后k个字符的最大k。特别是，k不能是i+1 **(因为这个子串总共只有i+1个字符，它必须等于它自己，所以它没有意义)。 **事实上，它是为了得到不同起点i时P串中最长的相同前缀和后缀的最大长度**。\n\n![](KMP-algorithm/1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg)\n\n### 匹配\n\n```java\n        int i=0;\n        int j = 0;\n        getNext(needle,next);\n        while (i < length && j < length1)\n        {\n            if (j == -1 || haystack.charAt(i) == needle.charAt(j))\n            {\n                i++;\n                j++;\n            }\n            else {\n                j = next[j];\n            }\n        }\n```\n\n![](KMP-algorithm/1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg)\n\n#### 首先：我们使用两个点来捕捉字符串。问题是如何改变这个点？\n\n#### 第二： \n\n \tString[i] != P [j] ,现在我们需要改变j来找到一个新的开始，即String的前缀等同于P。所以，下一个数组是有用的：` j = next[j]`。\n\n### 如何获得下一个数组\n\n```java\nvoid getNext(String p, int [] next)\n    {\n        next[0] = -1;\n        int i = 0, j = -1;\n\n        while (i < (p.length())){\n            if (j == -1 || p.charAt(i)==p.charAt(j)) {\n                ++i;\n                ++j;\n                next[i] = j;\n            }\n            else {\n                j = next[j];\n            }\n        }\n    }\n```\n\n**这段代码使用了一个小技巧：使next[0]=-1.你可以记住它，这将使代码更加容易；**\n\n### 动态规划：\n\nnext[i]是指p[0,next[i]]=p[i-next[i],i]的最大值(i)\n那么，如果我们知道next[0],next[1],...next[i-1]，如何知道next[i]？\n设置`next[i-1] = pre`。\n如果`p[i]=p[pre+1]`，这意味着`下一个[i]=pre+1`。\n否则如果`p[i] != p[pre+1],`就意味着`p[i-pre-1,i-1] = p[pre-1]`。\n我们应该减少pre:`pre = next[pre]`。\n\n![](KMP-algorithm/1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg)\n\n\n\n### Code:\n\n```java\n/**\n     * now we can use kmp algorithm，a prefix matching algorithm\n     *\n     */\n\n    public int strStr(String haystack, String needle){\n        //in first method,we can find that we need match all the substring if it's not match.\n        //some message have been lost: the prefix of the last string we have compared.\n        //we can start with the same prefix string to match,so that the time can be saved\n        // we can store the same prefix in a array or list, so we called kmp algorithm\n        int length = haystack.length();\n        int length1 = needle.length();\n        int i=0;\n        int j = 0;\n        int [] next = new int [length1];\n        getNext(needle,next);\n        while (i < length && j < length1)\n        {\n            if (j == -1 || haystack.charAt(i) == needle.charAt(j))\n            {\n                i++;\n                j++;\n            }\n            else {\n                j = next[j];\n            }\n        }\n\n        if (j == length1){\n            return i - j;\n        }\n        else {\n            return -1;\n        }\n    }\n\n    void getNext(String p, int [] next)\n    {\n        next[0] = -1;\n        int i = 0, j = -1;\n\n        while (i < (p.length())){\n            if (j == -1 || p.charAt(i)==p.charAt(j)) {\n                ++i;\n                ++j;\n                next[i] = j;\n            }\n            else {\n                j = next[j];\n            }\n        }\n    }\n```\n\n","slug":"algorithm/KMP-algorithm","published":1,"updated":"2023-05-12T08:09:07.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkds2dg000jbml79lpve4nz","content":"<h3 id=\"KMP算法\"><a href=\"#KMP算法\" class=\"headerlink\" title=\"KMP算法:\"></a>KMP算法:</h3><p>​    KMP (Knuth-Morris-Pratt) 算法是一种用于字符串搜索的算法，可以在一个文本串S内查找一个词W的出现位置。</p>\n<p>基本思想是，当子串与目标字符串不匹配时，其已知足够的信息能确定下一步的搜索不会导致目标字符串的漏检。这样，算法就不会进行无效的检查。</p>\n<p>下面是KMP算法的步骤：</p>\n<ol>\n<li>构造一个”部分匹配表”（也称为 “失败函数”）。这是一个数组，对于给定的查找词，表中的每个元素都包含了当匹配失败时查找词应该跳转的位置。</li>\n<li>使用这个表来进行字符串搜索。当在文本串中发生匹配失败时，可以直接跳过前面已知不会匹配的部分。</li>\n</ol>\n<span id=\"more\"></span>\n<h3 id=\"Why-KMP\"><a href=\"#Why-KMP\" class=\"headerlink\" title=\"Why KMP\"></a>Why KMP</h3><p>​    传统的字符串匹配，如果从String[i]的比较失败，算法直接开始尝试从S[i+1]进行比较。这种行为是典型的 “不从以前的错误中学习”。我们应该注意到，一个失败的匹配将为我们提供有价值的信息–<strong>如果String[i : i+len(P)]和P之间的匹配在第r个位置失败，那么从S[i]：第一个（r-1）连续字符必须与P的第一个（r-1）字符完全相同</strong>。</p>\n<p><img src=\"/2023/05/12/algorithm/KMP-algorithm/1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg\" alt></p>\n<p>​    因此，我们可以尽可能地跳过这些不可能的字符串来优化我们的方法。<br>举个例子：</p>\n<p><img src=\"/2023/05/12/algorithm/KMP-algorithm/1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg\" alt></p>\n<p>​    首先，P[5]未能匹配，那么这意味着S[0:5]等于P[0:5]，也就是 “abcab”。<br>现在我们考虑：从S[1]，S[2]，S[3]最初的匹配尝试是否有机会成功？<br>当我们从S[1]开始时，它不会成功。因为我们可以看到：P[1]！=P[0]，但P[1]=S[1]，所以P[0]！=S[1]。<br>在S[2]中也是如此。<br>但是当我们从S[3]开始时（这很重要）： <strong>P[0] = P[3], S[3] = P[3], 所以P[0] = S[3].</strong><br>我们可以发现，在S[3]中，有可能匹配成功。而且我们会发现，如果知道S和P在长度L内是相同的，那么任何一个i是否可以作为匹配的起点，只取决于P[0]=P[i]是否相等。这里我们可以得到KMP算法的核心下一个数组</p>\n<h3 id=\"NextArray\"><a href=\"#NextArray\" class=\"headerlink\" title=\"NextArray\"></a>NextArray</h3><p>​    下一个数组是用于模式字符串。P的下一个数组定义为：： <strong>next[i]代表P[0]~P[i]的一个子串，因此前k个字符正好等于后k个字符的最大k。特别是，k不能是i+1 </strong>(因为这个子串总共只有i+1个字符，它必须等于它自己，所以它没有意义)。 <strong>事实上，它是为了得到不同起点i时P串中最长的相同前缀和后缀的最大长度</strong>。</p>\n<p><img src=\"/2023/05/12/algorithm/KMP-algorithm/1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg\" alt></p>\n<h3 id=\"匹配\"><a href=\"#匹配\" class=\"headerlink\" title=\"匹配\"></a>匹配</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">getNext(needle,next);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; length &amp;&amp; j &lt; length1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || haystack.charAt(i) == needle.charAt(j))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        j = next[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/05/12/algorithm/KMP-algorithm/1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg\" alt></p>\n<h4 id=\"首先：我们使用两个点来捕捉字符串。问题是如何改变这个点？\"><a href=\"#首先：我们使用两个点来捕捉字符串。问题是如何改变这个点？\" class=\"headerlink\" title=\"首先：我们使用两个点来捕捉字符串。问题是如何改变这个点？\"></a>首先：我们使用两个点来捕捉字符串。问题是如何改变这个点？</h4><h4 id=\"第二：\"><a href=\"#第二：\" class=\"headerlink\" title=\"第二：\"></a>第二：</h4><pre><code>String[i] != P [j] ,现在我们需要改变j来找到一个新的开始，即String的前缀等同于P。所以，下一个数组是有用的：` j = next[j]`。\n</code></pre><h3 id=\"如何获得下一个数组\"><a href=\"#如何获得下一个数组\" class=\"headerlink\" title=\"如何获得下一个数组\"></a>如何获得下一个数组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">getNext</span><span class=\"params\">(String p, <span class=\"type\">int</span> [] next)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; (p.length()))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || p.charAt(i)==p.charAt(j)) &#123;</span><br><span class=\"line\">                ++i;</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">                next[i] = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j = next[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这段代码使用了一个小技巧：使next[0]=-1.你可以记住它，这将使代码更加容易；</strong></p>\n<h3 id=\"动态规划：\"><a href=\"#动态规划：\" class=\"headerlink\" title=\"动态规划：\"></a>动态规划：</h3><p>next[i]是指p[0,next[i]]=p[i-next[i],i]的最大值(i)<br>那么，如果我们知道next[0],next[1],…next[i-1]，如何知道next[i]？<br>设置<code>next[i-1] = pre</code>。<br>如果<code>p[i]=p[pre+1]</code>，这意味着<code>下一个[i]=pre+1</code>。<br>否则如果<code>p[i] != p[pre+1],</code>就意味着<code>p[i-pre-1,i-1] = p[pre-1]</code>。<br>我们应该减少pre:<code>pre = next[pre]</code>。</p>\n<p><img src=\"/2023/05/12/algorithm/KMP-algorithm/1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg\" alt></p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code:\"></a>Code:</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * now we can use kmp algorithm，a prefix matching algorithm</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">strStr</span><span class=\"params\">(String haystack, String needle)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//in first method,we can find that we need match all the substring if it&#x27;s not match.</span></span><br><span class=\"line\">        <span class=\"comment\">//some message have been lost: the prefix of the last string we have compared.</span></span><br><span class=\"line\">        <span class=\"comment\">//we can start with the same prefix string to match,so that the time can be saved</span></span><br><span class=\"line\">        <span class=\"comment\">// we can store the same prefix in a array or list, so we called kmp algorithm</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> haystack.length();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length1</span> <span class=\"operator\">=</span> needle.length();</span><br><span class=\"line\">        <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> [] next = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span> [length1];</span><br><span class=\"line\">        getNext(needle,next);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; length &amp;&amp; j &lt; length1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || haystack.charAt(i) == needle.charAt(j))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j = next[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == length1)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i - j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">getNext</span><span class=\"params\">(String p, <span class=\"type\">int</span> [] next)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; (p.length()))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || p.charAt(i)==p.charAt(j)) &#123;</span><br><span class=\"line\">                ++i;</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">                next[i] = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j = next[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"KMP算法\"><a href=\"#KMP算法\" class=\"headerlink\" title=\"KMP算法:\"></a>KMP算法:</h3><p>​    KMP (Knuth-Morris-Pratt) 算法是一种用于字符串搜索的算法，可以在一个文本串S内查找一个词W的出现位置。</p>\n<p>基本思想是，当子串与目标字符串不匹配时，其已知足够的信息能确定下一步的搜索不会导致目标字符串的漏检。这样，算法就不会进行无效的检查。</p>\n<p>下面是KMP算法的步骤：</p>\n<ol>\n<li>构造一个”部分匹配表”（也称为 “失败函数”）。这是一个数组，对于给定的查找词，表中的每个元素都包含了当匹配失败时查找词应该跳转的位置。</li>\n<li>使用这个表来进行字符串搜索。当在文本串中发生匹配失败时，可以直接跳过前面已知不会匹配的部分。</li>\n</ol>","more":"<h3 id=\"Why-KMP\"><a href=\"#Why-KMP\" class=\"headerlink\" title=\"Why KMP\"></a>Why KMP</h3><p>​    传统的字符串匹配，如果从String[i]的比较失败，算法直接开始尝试从S[i+1]进行比较。这种行为是典型的 “不从以前的错误中学习”。我们应该注意到，一个失败的匹配将为我们提供有价值的信息–<strong>如果String[i : i+len(P)]和P之间的匹配在第r个位置失败，那么从S[i]：第一个（r-1）连续字符必须与P的第一个（r-1）字符完全相同</strong>。</p>\n<p><img src=\"/2023/05/12/algorithm/KMP-algorithm/1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg\" alt></p>\n<p>​    因此，我们可以尽可能地跳过这些不可能的字符串来优化我们的方法。<br>举个例子：</p>\n<p><img src=\"/2023/05/12/algorithm/KMP-algorithm/1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg\" alt></p>\n<p>​    首先，P[5]未能匹配，那么这意味着S[0:5]等于P[0:5]，也就是 “abcab”。<br>现在我们考虑：从S[1]，S[2]，S[3]最初的匹配尝试是否有机会成功？<br>当我们从S[1]开始时，它不会成功。因为我们可以看到：P[1]！=P[0]，但P[1]=S[1]，所以P[0]！=S[1]。<br>在S[2]中也是如此。<br>但是当我们从S[3]开始时（这很重要）： <strong>P[0] = P[3], S[3] = P[3], 所以P[0] = S[3].</strong><br>我们可以发现，在S[3]中，有可能匹配成功。而且我们会发现，如果知道S和P在长度L内是相同的，那么任何一个i是否可以作为匹配的起点，只取决于P[0]=P[i]是否相等。这里我们可以得到KMP算法的核心下一个数组</p>\n<h3 id=\"NextArray\"><a href=\"#NextArray\" class=\"headerlink\" title=\"NextArray\"></a>NextArray</h3><p>​    下一个数组是用于模式字符串。P的下一个数组定义为：： <strong>next[i]代表P[0]~P[i]的一个子串，因此前k个字符正好等于后k个字符的最大k。特别是，k不能是i+1 </strong>(因为这个子串总共只有i+1个字符，它必须等于它自己，所以它没有意义)。 <strong>事实上，它是为了得到不同起点i时P串中最长的相同前缀和后缀的最大长度</strong>。</p>\n<p><img src=\"/2023/05/12/algorithm/KMP-algorithm/1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg\" alt></p>\n<h3 id=\"匹配\"><a href=\"#匹配\" class=\"headerlink\" title=\"匹配\"></a>匹配</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">getNext(needle,next);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; length &amp;&amp; j &lt; length1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || haystack.charAt(i) == needle.charAt(j))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        j = next[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/05/12/algorithm/KMP-algorithm/1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg\" alt></p>\n<h4 id=\"首先：我们使用两个点来捕捉字符串。问题是如何改变这个点？\"><a href=\"#首先：我们使用两个点来捕捉字符串。问题是如何改变这个点？\" class=\"headerlink\" title=\"首先：我们使用两个点来捕捉字符串。问题是如何改变这个点？\"></a>首先：我们使用两个点来捕捉字符串。问题是如何改变这个点？</h4><h4 id=\"第二：\"><a href=\"#第二：\" class=\"headerlink\" title=\"第二：\"></a>第二：</h4><pre><code>String[i] != P [j] ,现在我们需要改变j来找到一个新的开始，即String的前缀等同于P。所以，下一个数组是有用的：` j = next[j]`。\n</code></pre><h3 id=\"如何获得下一个数组\"><a href=\"#如何获得下一个数组\" class=\"headerlink\" title=\"如何获得下一个数组\"></a>如何获得下一个数组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">getNext</span><span class=\"params\">(String p, <span class=\"type\">int</span> [] next)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; (p.length()))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || p.charAt(i)==p.charAt(j)) &#123;</span><br><span class=\"line\">                ++i;</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">                next[i] = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j = next[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这段代码使用了一个小技巧：使next[0]=-1.你可以记住它，这将使代码更加容易；</strong></p>\n<h3 id=\"动态规划：\"><a href=\"#动态规划：\" class=\"headerlink\" title=\"动态规划：\"></a>动态规划：</h3><p>next[i]是指p[0,next[i]]=p[i-next[i],i]的最大值(i)<br>那么，如果我们知道next[0],next[1],…next[i-1]，如何知道next[i]？<br>设置<code>next[i-1] = pre</code>。<br>如果<code>p[i]=p[pre+1]</code>，这意味着<code>下一个[i]=pre+1</code>。<br>否则如果<code>p[i] != p[pre+1],</code>就意味着<code>p[i-pre-1,i-1] = p[pre-1]</code>。<br>我们应该减少pre:<code>pre = next[pre]</code>。</p>\n<p><img src=\"/2023/05/12/algorithm/KMP-algorithm/1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg\" alt></p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code:\"></a>Code:</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * now we can use kmp algorithm，a prefix matching algorithm</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">strStr</span><span class=\"params\">(String haystack, String needle)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//in first method,we can find that we need match all the substring if it&#x27;s not match.</span></span><br><span class=\"line\">        <span class=\"comment\">//some message have been lost: the prefix of the last string we have compared.</span></span><br><span class=\"line\">        <span class=\"comment\">//we can start with the same prefix string to match,so that the time can be saved</span></span><br><span class=\"line\">        <span class=\"comment\">// we can store the same prefix in a array or list, so we called kmp algorithm</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> haystack.length();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length1</span> <span class=\"operator\">=</span> needle.length();</span><br><span class=\"line\">        <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> [] next = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span> [length1];</span><br><span class=\"line\">        getNext(needle,next);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; length &amp;&amp; j &lt; length1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || haystack.charAt(i) == needle.charAt(j))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j = next[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == length1)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i - j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">getNext</span><span class=\"params\">(String p, <span class=\"type\">int</span> [] next)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; (p.length()))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || p.charAt(i)==p.charAt(j)) &#123;</span><br><span class=\"line\">                ++i;</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">                next[i] = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j = next[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"chatGPT with confluence","author":"Ray","top":true,"cover":false,"date":"2023-05-12T07:44:05.000Z","_content":"\n### Target:\n\n由于工作时Confluence中的文件太多，也比较杂乱，难以阅读，所以希望基于chatGPT能够帮助我快速从文件中获取我想要的知识\n\n<!-- more -->\n\n以下是一个demo的代码，参考了GPT官网的做法\n\n\n```python\n##爬虫\nimport requests\nimport re\nimport urllib.request\nfrom bs4 import BeautifulSoup\nfrom collections import deque\nfrom html.parser import HTMLParser\nfrom urllib.parse import urlparse\nimport os\nimport html2text\nfrom atlassian import Confluence\nimport tiktoken\nimport pandas as pd\nimport openai\nfrom openai.embeddings_utils import distances_from_embeddings\nimport numpy as np\nfrom openai.embeddings_utils import distances_from_embeddings, cosine_similarity\nimport time\n\n\n# public 的账号 和confluence空间配置\ndomain = \"confluence.xxxxx.com\"\nfull_url = \"https://confluence.xxxxx.com/\"\nlogin_url = \"https://confluence.xxxxx.com/login.action?os_destination=%2Fdologin.action\"\npage_url = \"https://confluence.xxxxx.com/display/41JTSP/\"\nuser_name = \"xxxx\"\npassword = \"xxxx\"\n# 定义要爬取的空间key，这是目前我们的空间\nspace_key = \"xxxx\"\n##数据保存地址，请自定义\nfilePath = \"\"\nprocessPath = \"\"\n\n##分隔符和替换符，主要用于文件名生成和标题还原\nsplitFlag = \"$\"\nreplaceFlag = \"_\"\n\n\n\n\n##设置openai环境\nopenai.organization = \"\"\nopenai.api_key = \"\"\n```\n\n\n```python\ndef crawler(base_url,username,password,space_key,totalSpace = False):\n    confluence = Confluence(url=base_url, username=username, password=password)\n    ##待实现，爬取所有的space\n    ##获取对应空间\n    space = confluence.get_space(space_key, expand='description.plain,homepage')\n    ##获取space页面id\n    page_id = space[\"homepage\"][\"id\"]\n    \n        # Create a directory to store the text files\n    if not os.path.exists(filePath):\n            os.mkdir(filePath)\n\n    # Create a directory to store the csv files\n    if not os.path.exists(processPath):\n            os.mkdir(processPath)\n    \n    ##子页面\n    child = confluence.get_page_child_by_type(page_id, type='page', start=None, limit=None, expand=None)\n    \n    ##初始化队列\n    queue = deque()\n    for i in child:\n        queue.append(i)\n    \n    while queue:\n        # Get the next URL from the queue\n        childPage = queue.pop()\n        ##拿到页面id\n        html = confluence.get_page_by_id(childPage[\"id\"], expand=\"body.storage\")\n        # 调用方法，将html转为纯文本\n        content = html[\"body\"][\"storage\"][\"value\"]\n        content_text = html2text.html2text(content)\n        \n        ##文本不为空写入\n        if content_text.lstrip() != \"\":\n            title = str(html[\"title\"]).replace(\"/\",replaceFlag)\n    #         if not os.path.exists(\"/Users/lei.zhou/text/\"+html[\"title\"]):\n    #             os.mkdir(\"/Users/lei.zhou/text/\")\n            with open(filePath+ childPage[\"id\"]+splitFlag+title+ \".txt\", \"w\") as f:\n                f.write(content_text)\n\n        ##加入子节点‘\n        for i in confluence.get_page_child_by_type(childPage[\"id\"], type='page', start=None, limit=None, expand=None):\n            queue.append(i)\n\n```\n\n\n```python\nmax_tokens = 500\n\ndef remove_newlines(serie):\n    serie = serie.str.replace('\\n', ' ')\n    serie = serie.str.replace('\\\\n', ' ')\n    serie = serie.str.replace('  ', ' ')\n    serie = serie.str.replace('  ', ' ')\n    return serie\ndef create_context(\n    question, df, max_len=1800, size=\"ada\"\n):\n    \"\"\"\n    寻找最相似的文本段\n    \"\"\"\n    # Get the embeddings for the question\n    q_embeddings = openai.Embedding.create(input=question, engine='text-embedding-ada-002')['data'][0]['embedding']\n    # 使用余弦算法计算最相似的文本\n    df['distances'] = distances_from_embeddings(q_embeddings, df['embeddings'].values, distance_metric='cosine')\n\n\n    returns = []\n    cur_len = 0\n\n    # 不断添加文本到上限\n    for i, row in df.sort_values('distances', ascending=True).iterrows():\n        \n        # 文本创建\n        cur_len += row['n_tokens'] + 4\n        \n        # 超出上限退出\n        if cur_len > max_len:\n            break\n        \n        # 增加文本\n        returns.append(row[\"text\"])\n\n    # 返回\n    return \"\\n\\n###\\n\\n\".join(returns)\n\n\n# token分割\ndef split_into_many(text, max_tokens = max_tokens):\n\n    # 定义分割符号，可以允许自定义\n    sentences = re.split('[.。！？!?]',text)\n\n    # 获取每段的token\n    n_tokens = [len(tokenizer.encode(\" \" + sentence)) for sentence in sentences]\n    \n    chunks = []\n    tokens_so_far = 0\n    chunk = []\n\n    # 遍历\n    for sentence, token in zip(sentences, n_tokens):\n\n        # 如果到目前为止的标记数量加上当前句子中的标记数量大于,大于最大标记数，则将该块添加到块的列表中，并重置到目前为止的块和标记数\n        if tokens_so_far + token > max_tokens:\n            chunks.append(\". \".join(chunk) + \".\")\n            chunk = []\n            tokens_so_far = 0\n\n    \n        if token > max_tokens:\n            continue\n\n        # 添加\n        chunk.append(sentence)\n        tokens_so_far += token + 1\n\n    return chunks\n\n\n##数据，模型，问题，长度，\ndef answer_question(\n    df,\n    model=\"text-davinci-003\",\n    question=\"你有什么问题\",\n    max_len=1800,\n    size=\"ada\",\n    debug=False,\n    max_tokens=1800,\n    stop_sequence=None,\n    use_GPT=False\n):\n    \"\"\"\n    回答问题\n    \"\"\"\n    context = create_context(\n        question,\n        df,\n        max_len=max_len,\n        size=size,\n    )\n    \n    # If debug, print the raw model response\n    if debug:\n        print(\"Context:\\n\" + context)\n        print(\"\\n\\n\")\n        print(f\"Answer the question based on the context below, and if the question can't be answered based on the context, say \\\"I don't know\\\"\\n\\nContext: {context}\\n\\n---\\n\\nQuestion: {question}\\nAnswer:\")\n    if use_GPT:\n        completion = openai.ChatCompletion.create(model=\"gpt-3.5-turbo\",messages=[\n    {\"role\": \"user\", \"content\": f\"Answer the question based on the context below, and if the question can't be answered based on the context, say \\\"I don't know\\\"\\n\\nContext: {context}\\n\\n---\\n\\nQuestion: {question}\\nAnswer:\"}])\n        return completion.to_dict()[\"choices\"][0][\"message\"][\"content\"]\n    try:\n        # Create a completions using the question and context\n        response = openai.Completion.create(\n            prompt=f\"Answer the question based on the context below, and if the question can't be answered based on the context, say \\\"I don't know\\\"\\n\\nContext: {context}\\n\\n---\\n\\nQuestion: {question}\\nAnswer:\",\n            temperature=0,\n            max_tokens=max_tokens,\n            top_p=1,\n            frequency_penalty=0,\n            presence_penalty=0,\n            stop=stop_sequence,\n            model=model,\n        )\n        return response[\"choices\"][0][\"text\"].strip()\n    except Exception as e:\n        print(e)\n        return \"\"\n\n    \n```\n\n\n```python\ncrawler(base_url,username,password,space_key)\n```\n\n```python\n#原始文本\ntexts=[]\n\n# 遍历\nfor file in os.listdir(filePath):\n    # 文件读取\n    with open(filePath+file, \"r\") as f:\n        titles = file.split(splitFlag)\n        if len(titles) <= 1:\n            continue\n        title = titles[1]\n        text = f.read()\n        # 标题还原，把_替换为空格插入\n        texts.append((title.replace(replaceFlag,\" \"), text))\n        \n# pd创建\ndf = pd.DataFrame(texts, columns = ['fname', 'text'])\n\n# 按行分段\ndf['text'] = df.fname + \". \" + remove_newlines(df.text)\ndf.to_csv('processed/scraped.csv')\ndf.head()\n```\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fname</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>bak.B1.1 Payment Center Integration Test Repor...</td>\n      <td>bak.B1.1 Payment Center Integration Test Repor...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit...</td>\n      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>OnlineRadio and OlineMusic B0.2 testcase revie...</td>\n      <td>OnlineRadio and OlineMusic B0.2 testcase revie...</td>\n    </tr>\n  </tbody>\n</table>\n\n\n\n\n```python\ntokenizer = tiktoken.get_encoding(\"cl100k_base\")\n\ndf = pd.read_csv('processed/scraped.csv', index_col=0)\ndf.columns = ['title', 'text']\n\ndf['n_tokens'] = df.text.apply(lambda x: len(tokenizer.encode(x)))\n\ndf\n```\n\n\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>text</th>\n      <th>n_tokens</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>1423</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>1355</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>bak.B1.1 Payment Center Integration Test Repor...</td>\n      <td>bak.B1.1 Payment Center Integration Test Repor...</td>\n      <td>1106</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit...</td>\n      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit...</td>\n      <td>1429</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>OnlineRadio and OlineMusic B0.2 testcase revie...</td>\n      <td>OnlineRadio and OlineMusic B0.2 testcase revie...</td>\n      <td>2736</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>B1 OnePortal Qulification Test Report.txt</td>\n      <td>B1 OnePortal Qulification Test Report.txt.   #...</td>\n      <td>966</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>Detailed Solution Architecture.txt</td>\n      <td>Detailed Solution Architecture.txt. 250</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>B1.3 Release.txt</td>\n      <td>B1.3 Release.txt. true</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>04  B1验收Charging&amp;RBC.txt</td>\n      <td>04  B1验收Charging&amp;RBC.txt.  L1| L2| L3| | | L4|...</td>\n      <td>1492</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>ULH - Integration Outline and API-Specificatio...</td>\n      <td>ULH - Integration Outline and API-Specificatio...</td>\n      <td>38</td>\n    </tr>\n  </tbody>\n</table>\n<p>417 rows × 3 columns</p>\n\n</div>\n\n\n\n\n```python\n# Tokenize the text and save the number of tokens to a new column\ndf['n_tokens'] = df.text.apply(lambda x: len(tokenizer.encode(x)))\n\n# Visualize the distribution of the number of tokens per row using a histogram\ndf.n_tokens.hist()\n```\n\n\n\n\n    <AxesSubplot:>\n\n\n\n\n![png](chatGPT-with-confluence/output_7_1-3877587.png)\n​    \n\n\n\n```python\nshortened = []\n\n# 循环减少文本\nfor row in df.iterrows():\n    print(row)\n\n    if row[1]['text'] is None:\n        continue\n\n    if row[1]['n_tokens'] > max_tokens:\n        shortened += split_into_many(row[1]['text'])\n    else:\n        shortened.append( row[1]['text'] )\ndf = pd.DataFrame(shortened, columns = ['text'])\ndf['n_tokens'] = df.text.apply(lambda x: len(tokenizer.encode(x)))\ndf.n_tokens.hist()\n```\n\n\n\n\n\n![png](chatGPT-with-confluence/output_8_1-3877587.png)\n​    \n\n\n```python\n##由于官方的限制，1分钟最多发起60个请求，所以为了防止报错此处主动休眠\n##由于数据量过大，如果无法运行，可以在上面一栏    截取部分数据df = df[0:x]  x为截取长度\ndef cal(x,waittime = 0.6):\n    res = openai.Embedding.create(input=x, engine='text-embedding-ada-002')['data'][0]['embedding']\n    time.sleep(waittime)\n    return res\ndf['embeddings'] = df.text.apply(lambda x: cal(x))\n\ndf.to_csv('processed/embeddings.csv')\ndf.head()\n```\n\n\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>n_tokens</th>\n      <th>embeddings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>472</td>\n      <td>[-0.0035752991680055857, 0.015155627392232418,...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试...</td>\n      <td>343</td>\n      <td>[0.012331507168710232, 0.002946529071778059, -...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>454</td>\n      <td>[0.004054947756230831, -0.0028905682265758514,...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>| 203 complete OK |  |   **专属部分** |  | 检查人：Zh...</td>\n      <td>492</td>\n      <td>[0.019448528066277504, 0.00747803645208478, 0....</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>bak. B1. 1 Payment Center Integration Test Rep...</td>\n      <td>481</td>\n      <td>[0.0010055731981992722, -0.013514618389308453,...</td>\n    </tr>\n  </tbody>\n</table>\n\n</div>\n\n\n\n\n```python\n##读取token数据\ndf=pd.read_csv('processed/embeddings.csv', index_col=0)\ndf['embeddings'] = df['embeddings'].apply(eval).apply(np.array)\ndf.head()\n```\n\n\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>n_tokens</th>\n      <th>embeddings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>472</td>\n      <td>[-0.0035752991680055857, 0.015155627392232418,...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试...</td>\n      <td>343</td>\n      <td>[0.012331507168710232, 0.002946529071778059, -...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>454</td>\n      <td>[0.004054947756230831, -0.0028905682265758514,...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>| 203 complete OK |  |   **专属部分** |  | 检查人：Zh...</td>\n      <td>492</td>\n      <td>[0.019448528066277504, 0.00747803645208478, 0....</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>bak. B1. 1 Payment Center Integration Test Rep...</td>\n      <td>481</td>\n      <td>[0.0010055731981992722, -0.013514618389308453,...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n```python\n##输入最大token，返回长度进行提问\nanswer_question(df, question=\"测试用例需要满足那些要求?\", debug=False,use_GPT=True,max_len=1800,max_tokens = 1800)\n```\n\n\n    '测试用例需要满足许多要求，包括但不限于：前提条件、输入数据和期待结果清晰、明确；包含充分的正面、负面异常测试用例；是否从用户层面来设计用户使用场景和使用流程的测试用例；是否简洁，复用性强等。具体要求见上文中的各项检查项。'\n\n\n```python\nanswer_question(df, question=\"一份DD文档或是AD文档需要满足那些要求?,请用中文回答\", debug=False,use_GPT=True,max_len=1800,max_tokens = 1800)\n```\n\n\n    'DD文档或AD文档需要满足以下要求：\\n1. 它应该清晰明了，包括应用的功能、性能、界面、安全等方面。\\n2. 它应该易于理解，包括适当的说明、流程图、状态图等。\\n3. 它应该满足可复用性、易维护性等软件工程的基本原则。\\n4. 它应该包括可靠性需求，描述系统的可用性、健壮性等需求。\\n5. 它应该考虑约束和假设，包括客户和MA的约束和假设。\\n6. 它应该包括详细设计，以阐明更改的原因和过程，并进行一致性评估。\\n7. 它应该考虑软件单元的互操作性、交互、关键性、技术复杂性、风险和可测试性等方面。 \\n8. 它应该包括接口定义，以使接口清楚明了。\\n9. 历史记录应该得到正确维护。'\n\n\n\n\n\n\n\n","source":"_posts/algorithm/chatGPT-with-confluence.md","raw":"---\ntitle: chatGPT with confluence\nauthor: Ray\ntop: true\ncover: false\ndate: 2023-05-12 15:44:05\ncategories: 技术\ntags:\n  - python\n  - chatGpt\n  - 算法\n---\n\n### Target:\n\n由于工作时Confluence中的文件太多，也比较杂乱，难以阅读，所以希望基于chatGPT能够帮助我快速从文件中获取我想要的知识\n\n<!-- more -->\n\n以下是一个demo的代码，参考了GPT官网的做法\n\n\n```python\n##爬虫\nimport requests\nimport re\nimport urllib.request\nfrom bs4 import BeautifulSoup\nfrom collections import deque\nfrom html.parser import HTMLParser\nfrom urllib.parse import urlparse\nimport os\nimport html2text\nfrom atlassian import Confluence\nimport tiktoken\nimport pandas as pd\nimport openai\nfrom openai.embeddings_utils import distances_from_embeddings\nimport numpy as np\nfrom openai.embeddings_utils import distances_from_embeddings, cosine_similarity\nimport time\n\n\n# public 的账号 和confluence空间配置\ndomain = \"confluence.xxxxx.com\"\nfull_url = \"https://confluence.xxxxx.com/\"\nlogin_url = \"https://confluence.xxxxx.com/login.action?os_destination=%2Fdologin.action\"\npage_url = \"https://confluence.xxxxx.com/display/41JTSP/\"\nuser_name = \"xxxx\"\npassword = \"xxxx\"\n# 定义要爬取的空间key，这是目前我们的空间\nspace_key = \"xxxx\"\n##数据保存地址，请自定义\nfilePath = \"\"\nprocessPath = \"\"\n\n##分隔符和替换符，主要用于文件名生成和标题还原\nsplitFlag = \"$\"\nreplaceFlag = \"_\"\n\n\n\n\n##设置openai环境\nopenai.organization = \"\"\nopenai.api_key = \"\"\n```\n\n\n```python\ndef crawler(base_url,username,password,space_key,totalSpace = False):\n    confluence = Confluence(url=base_url, username=username, password=password)\n    ##待实现，爬取所有的space\n    ##获取对应空间\n    space = confluence.get_space(space_key, expand='description.plain,homepage')\n    ##获取space页面id\n    page_id = space[\"homepage\"][\"id\"]\n    \n        # Create a directory to store the text files\n    if not os.path.exists(filePath):\n            os.mkdir(filePath)\n\n    # Create a directory to store the csv files\n    if not os.path.exists(processPath):\n            os.mkdir(processPath)\n    \n    ##子页面\n    child = confluence.get_page_child_by_type(page_id, type='page', start=None, limit=None, expand=None)\n    \n    ##初始化队列\n    queue = deque()\n    for i in child:\n        queue.append(i)\n    \n    while queue:\n        # Get the next URL from the queue\n        childPage = queue.pop()\n        ##拿到页面id\n        html = confluence.get_page_by_id(childPage[\"id\"], expand=\"body.storage\")\n        # 调用方法，将html转为纯文本\n        content = html[\"body\"][\"storage\"][\"value\"]\n        content_text = html2text.html2text(content)\n        \n        ##文本不为空写入\n        if content_text.lstrip() != \"\":\n            title = str(html[\"title\"]).replace(\"/\",replaceFlag)\n    #         if not os.path.exists(\"/Users/lei.zhou/text/\"+html[\"title\"]):\n    #             os.mkdir(\"/Users/lei.zhou/text/\")\n            with open(filePath+ childPage[\"id\"]+splitFlag+title+ \".txt\", \"w\") as f:\n                f.write(content_text)\n\n        ##加入子节点‘\n        for i in confluence.get_page_child_by_type(childPage[\"id\"], type='page', start=None, limit=None, expand=None):\n            queue.append(i)\n\n```\n\n\n```python\nmax_tokens = 500\n\ndef remove_newlines(serie):\n    serie = serie.str.replace('\\n', ' ')\n    serie = serie.str.replace('\\\\n', ' ')\n    serie = serie.str.replace('  ', ' ')\n    serie = serie.str.replace('  ', ' ')\n    return serie\ndef create_context(\n    question, df, max_len=1800, size=\"ada\"\n):\n    \"\"\"\n    寻找最相似的文本段\n    \"\"\"\n    # Get the embeddings for the question\n    q_embeddings = openai.Embedding.create(input=question, engine='text-embedding-ada-002')['data'][0]['embedding']\n    # 使用余弦算法计算最相似的文本\n    df['distances'] = distances_from_embeddings(q_embeddings, df['embeddings'].values, distance_metric='cosine')\n\n\n    returns = []\n    cur_len = 0\n\n    # 不断添加文本到上限\n    for i, row in df.sort_values('distances', ascending=True).iterrows():\n        \n        # 文本创建\n        cur_len += row['n_tokens'] + 4\n        \n        # 超出上限退出\n        if cur_len > max_len:\n            break\n        \n        # 增加文本\n        returns.append(row[\"text\"])\n\n    # 返回\n    return \"\\n\\n###\\n\\n\".join(returns)\n\n\n# token分割\ndef split_into_many(text, max_tokens = max_tokens):\n\n    # 定义分割符号，可以允许自定义\n    sentences = re.split('[.。！？!?]',text)\n\n    # 获取每段的token\n    n_tokens = [len(tokenizer.encode(\" \" + sentence)) for sentence in sentences]\n    \n    chunks = []\n    tokens_so_far = 0\n    chunk = []\n\n    # 遍历\n    for sentence, token in zip(sentences, n_tokens):\n\n        # 如果到目前为止的标记数量加上当前句子中的标记数量大于,大于最大标记数，则将该块添加到块的列表中，并重置到目前为止的块和标记数\n        if tokens_so_far + token > max_tokens:\n            chunks.append(\". \".join(chunk) + \".\")\n            chunk = []\n            tokens_so_far = 0\n\n    \n        if token > max_tokens:\n            continue\n\n        # 添加\n        chunk.append(sentence)\n        tokens_so_far += token + 1\n\n    return chunks\n\n\n##数据，模型，问题，长度，\ndef answer_question(\n    df,\n    model=\"text-davinci-003\",\n    question=\"你有什么问题\",\n    max_len=1800,\n    size=\"ada\",\n    debug=False,\n    max_tokens=1800,\n    stop_sequence=None,\n    use_GPT=False\n):\n    \"\"\"\n    回答问题\n    \"\"\"\n    context = create_context(\n        question,\n        df,\n        max_len=max_len,\n        size=size,\n    )\n    \n    # If debug, print the raw model response\n    if debug:\n        print(\"Context:\\n\" + context)\n        print(\"\\n\\n\")\n        print(f\"Answer the question based on the context below, and if the question can't be answered based on the context, say \\\"I don't know\\\"\\n\\nContext: {context}\\n\\n---\\n\\nQuestion: {question}\\nAnswer:\")\n    if use_GPT:\n        completion = openai.ChatCompletion.create(model=\"gpt-3.5-turbo\",messages=[\n    {\"role\": \"user\", \"content\": f\"Answer the question based on the context below, and if the question can't be answered based on the context, say \\\"I don't know\\\"\\n\\nContext: {context}\\n\\n---\\n\\nQuestion: {question}\\nAnswer:\"}])\n        return completion.to_dict()[\"choices\"][0][\"message\"][\"content\"]\n    try:\n        # Create a completions using the question and context\n        response = openai.Completion.create(\n            prompt=f\"Answer the question based on the context below, and if the question can't be answered based on the context, say \\\"I don't know\\\"\\n\\nContext: {context}\\n\\n---\\n\\nQuestion: {question}\\nAnswer:\",\n            temperature=0,\n            max_tokens=max_tokens,\n            top_p=1,\n            frequency_penalty=0,\n            presence_penalty=0,\n            stop=stop_sequence,\n            model=model,\n        )\n        return response[\"choices\"][0][\"text\"].strip()\n    except Exception as e:\n        print(e)\n        return \"\"\n\n    \n```\n\n\n```python\ncrawler(base_url,username,password,space_key)\n```\n\n```python\n#原始文本\ntexts=[]\n\n# 遍历\nfor file in os.listdir(filePath):\n    # 文件读取\n    with open(filePath+file, \"r\") as f:\n        titles = file.split(splitFlag)\n        if len(titles) <= 1:\n            continue\n        title = titles[1]\n        text = f.read()\n        # 标题还原，把_替换为空格插入\n        texts.append((title.replace(replaceFlag,\" \"), text))\n        \n# pd创建\ndf = pd.DataFrame(texts, columns = ['fname', 'text'])\n\n# 按行分段\ndf['text'] = df.fname + \". \" + remove_newlines(df.text)\ndf.to_csv('processed/scraped.csv')\ndf.head()\n```\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fname</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>bak.B1.1 Payment Center Integration Test Repor...</td>\n      <td>bak.B1.1 Payment Center Integration Test Repor...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit...</td>\n      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>OnlineRadio and OlineMusic B0.2 testcase revie...</td>\n      <td>OnlineRadio and OlineMusic B0.2 testcase revie...</td>\n    </tr>\n  </tbody>\n</table>\n\n\n\n\n```python\ntokenizer = tiktoken.get_encoding(\"cl100k_base\")\n\ndf = pd.read_csv('processed/scraped.csv', index_col=0)\ndf.columns = ['title', 'text']\n\ndf['n_tokens'] = df.text.apply(lambda x: len(tokenizer.encode(x)))\n\ndf\n```\n\n\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>text</th>\n      <th>n_tokens</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>1423</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>1355</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>bak.B1.1 Payment Center Integration Test Repor...</td>\n      <td>bak.B1.1 Payment Center Integration Test Repor...</td>\n      <td>1106</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit...</td>\n      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit...</td>\n      <td>1429</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>OnlineRadio and OlineMusic B0.2 testcase revie...</td>\n      <td>OnlineRadio and OlineMusic B0.2 testcase revie...</td>\n      <td>2736</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>B1 OnePortal Qulification Test Report.txt</td>\n      <td>B1 OnePortal Qulification Test Report.txt.   #...</td>\n      <td>966</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>Detailed Solution Architecture.txt</td>\n      <td>Detailed Solution Architecture.txt. 250</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>B1.3 Release.txt</td>\n      <td>B1.3 Release.txt. true</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>04  B1验收Charging&amp;RBC.txt</td>\n      <td>04  B1验收Charging&amp;RBC.txt.  L1| L2| L3| | | L4|...</td>\n      <td>1492</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>ULH - Integration Outline and API-Specificatio...</td>\n      <td>ULH - Integration Outline and API-Specificatio...</td>\n      <td>38</td>\n    </tr>\n  </tbody>\n</table>\n<p>417 rows × 3 columns</p>\n\n</div>\n\n\n\n\n```python\n# Tokenize the text and save the number of tokens to a new column\ndf['n_tokens'] = df.text.apply(lambda x: len(tokenizer.encode(x)))\n\n# Visualize the distribution of the number of tokens per row using a histogram\ndf.n_tokens.hist()\n```\n\n\n\n\n    <AxesSubplot:>\n\n\n\n\n![png](chatGPT-with-confluence/output_7_1-3877587.png)\n​    \n\n\n\n```python\nshortened = []\n\n# 循环减少文本\nfor row in df.iterrows():\n    print(row)\n\n    if row[1]['text'] is None:\n        continue\n\n    if row[1]['n_tokens'] > max_tokens:\n        shortened += split_into_many(row[1]['text'])\n    else:\n        shortened.append( row[1]['text'] )\ndf = pd.DataFrame(shortened, columns = ['text'])\ndf['n_tokens'] = df.text.apply(lambda x: len(tokenizer.encode(x)))\ndf.n_tokens.hist()\n```\n\n\n\n\n\n![png](chatGPT-with-confluence/output_8_1-3877587.png)\n​    \n\n\n```python\n##由于官方的限制，1分钟最多发起60个请求，所以为了防止报错此处主动休眠\n##由于数据量过大，如果无法运行，可以在上面一栏    截取部分数据df = df[0:x]  x为截取长度\ndef cal(x,waittime = 0.6):\n    res = openai.Embedding.create(input=x, engine='text-embedding-ada-002')['data'][0]['embedding']\n    time.sleep(waittime)\n    return res\ndf['embeddings'] = df.text.apply(lambda x: cal(x))\n\ndf.to_csv('processed/embeddings.csv')\ndf.head()\n```\n\n\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>n_tokens</th>\n      <th>embeddings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>472</td>\n      <td>[-0.0035752991680055857, 0.015155627392232418,...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试...</td>\n      <td>343</td>\n      <td>[0.012331507168710232, 0.002946529071778059, -...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>454</td>\n      <td>[0.004054947756230831, -0.0028905682265758514,...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>| 203 complete OK |  |   **专属部分** |  | 检查人：Zh...</td>\n      <td>492</td>\n      <td>[0.019448528066277504, 0.00747803645208478, 0....</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>bak. B1. 1 Payment Center Integration Test Rep...</td>\n      <td>481</td>\n      <td>[0.0010055731981992722, -0.013514618389308453,...</td>\n    </tr>\n  </tbody>\n</table>\n\n</div>\n\n\n\n\n```python\n##读取token数据\ndf=pd.read_csv('processed/embeddings.csv', index_col=0)\ndf['embeddings'] = df['embeddings'].apply(eval).apply(np.array)\ndf.head()\n```\n\n\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>n_tokens</th>\n      <th>embeddings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>472</td>\n      <td>[-0.0035752991680055857, 0.015155627392232418,...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试...</td>\n      <td>343</td>\n      <td>[0.012331507168710232, 0.002946529071778059, -...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>454</td>\n      <td>[0.004054947756230831, -0.0028905682265758514,...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>| 203 complete OK |  |   **专属部分** |  | 检查人：Zh...</td>\n      <td>492</td>\n      <td>[0.019448528066277504, 0.00747803645208478, 0....</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>bak. B1. 1 Payment Center Integration Test Rep...</td>\n      <td>481</td>\n      <td>[0.0010055731981992722, -0.013514618389308453,...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n```python\n##输入最大token，返回长度进行提问\nanswer_question(df, question=\"测试用例需要满足那些要求?\", debug=False,use_GPT=True,max_len=1800,max_tokens = 1800)\n```\n\n\n    '测试用例需要满足许多要求，包括但不限于：前提条件、输入数据和期待结果清晰、明确；包含充分的正面、负面异常测试用例；是否从用户层面来设计用户使用场景和使用流程的测试用例；是否简洁，复用性强等。具体要求见上文中的各项检查项。'\n\n\n```python\nanswer_question(df, question=\"一份DD文档或是AD文档需要满足那些要求?,请用中文回答\", debug=False,use_GPT=True,max_len=1800,max_tokens = 1800)\n```\n\n\n    'DD文档或AD文档需要满足以下要求：\\n1. 它应该清晰明了，包括应用的功能、性能、界面、安全等方面。\\n2. 它应该易于理解，包括适当的说明、流程图、状态图等。\\n3. 它应该满足可复用性、易维护性等软件工程的基本原则。\\n4. 它应该包括可靠性需求，描述系统的可用性、健壮性等需求。\\n5. 它应该考虑约束和假设，包括客户和MA的约束和假设。\\n6. 它应该包括详细设计，以阐明更改的原因和过程，并进行一致性评估。\\n7. 它应该考虑软件单元的互操作性、交互、关键性、技术复杂性、风险和可测试性等方面。 \\n8. 它应该包括接口定义，以使接口清楚明了。\\n9. 历史记录应该得到正确维护。'\n\n\n\n\n\n\n\n","slug":"algorithm/chatGPT-with-confluence","published":1,"updated":"2023-05-12T07:57:11.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkds2dg000kbml7awxwcee2","content":"<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target:\"></a>Target:</h3><p>由于工作时Confluence中的文件太多，也比较杂乱，难以阅读，所以希望基于chatGPT能够帮助我快速从文件中获取我想要的知识</p>\n<span id=\"more\"></span>\n<p>以下是一个demo的代码，参考了GPT官网的做法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##爬虫</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\"><span class=\"keyword\">from</span> html.parser <span class=\"keyword\">import</span> HTMLParser</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib.parse <span class=\"keyword\">import</span> urlparse</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> html2text</span><br><span class=\"line\"><span class=\"keyword\">from</span> atlassian <span class=\"keyword\">import</span> Confluence</span><br><span class=\"line\"><span class=\"keyword\">import</span> tiktoken</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> openai</span><br><span class=\"line\"><span class=\"keyword\">from</span> openai.embeddings_utils <span class=\"keyword\">import</span> distances_from_embeddings</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> openai.embeddings_utils <span class=\"keyword\">import</span> distances_from_embeddings, cosine_similarity</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># public 的账号 和confluence空间配置</span></span><br><span class=\"line\">domain = <span class=\"string\">&quot;confluence.xxxxx.com&quot;</span></span><br><span class=\"line\">full_url = <span class=\"string\">&quot;https://confluence.xxxxx.com/&quot;</span></span><br><span class=\"line\">login_url = <span class=\"string\">&quot;https://confluence.xxxxx.com/login.action?os_destination=%2Fdologin.action&quot;</span></span><br><span class=\"line\">page_url = <span class=\"string\">&quot;https://confluence.xxxxx.com/display/41JTSP/&quot;</span></span><br><span class=\"line\">user_name = <span class=\"string\">&quot;xxxx&quot;</span></span><br><span class=\"line\">password = <span class=\"string\">&quot;xxxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 定义要爬取的空间key，这是目前我们的空间</span></span><br><span class=\"line\">space_key = <span class=\"string\">&quot;xxxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##数据保存地址，请自定义</span></span><br><span class=\"line\">filePath = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">processPath = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##分隔符和替换符，主要用于文件名生成和标题还原</span></span><br><span class=\"line\">splitFlag = <span class=\"string\">&quot;$&quot;</span></span><br><span class=\"line\">replaceFlag = <span class=\"string\">&quot;_&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##设置openai环境</span></span><br><span class=\"line\">openai.organization = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">openai.api_key = <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">crawler</span>(<span class=\"params\">base_url,username,password,space_key,totalSpace = <span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    confluence = Confluence(url=base_url, username=username, password=password)</span><br><span class=\"line\">    <span class=\"comment\">##待实现，爬取所有的space</span></span><br><span class=\"line\">    <span class=\"comment\">##获取对应空间</span></span><br><span class=\"line\">    space = confluence.get_space(space_key, expand=<span class=\"string\">&#x27;description.plain,homepage&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">##获取space页面id</span></span><br><span class=\"line\">    page_id = space[<span class=\"string\">&quot;homepage&quot;</span>][<span class=\"string\">&quot;id&quot;</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\"># Create a directory to store the text files</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(filePath):</span><br><span class=\"line\">            os.mkdir(filePath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Create a directory to store the csv files</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(processPath):</span><br><span class=\"line\">            os.mkdir(processPath)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">##子页面</span></span><br><span class=\"line\">    child = confluence.get_page_child_by_type(page_id, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;page&#x27;</span>, start=<span class=\"literal\">None</span>, limit=<span class=\"literal\">None</span>, expand=<span class=\"literal\">None</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">##初始化队列</span></span><br><span class=\"line\">    queue = deque()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> child:</span><br><span class=\"line\">        queue.append(i)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        <span class=\"comment\"># Get the next URL from the queue</span></span><br><span class=\"line\">        childPage = queue.pop()</span><br><span class=\"line\">        <span class=\"comment\">##拿到页面id</span></span><br><span class=\"line\">        html = confluence.get_page_by_id(childPage[<span class=\"string\">&quot;id&quot;</span>], expand=<span class=\"string\">&quot;body.storage&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 调用方法，将html转为纯文本</span></span><br><span class=\"line\">        content = html[<span class=\"string\">&quot;body&quot;</span>][<span class=\"string\">&quot;storage&quot;</span>][<span class=\"string\">&quot;value&quot;</span>]</span><br><span class=\"line\">        content_text = html2text.html2text(content)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">##文本不为空写入</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> content_text.lstrip() != <span class=\"string\">&quot;&quot;</span>:</span><br><span class=\"line\">            title = <span class=\"built_in\">str</span>(html[<span class=\"string\">&quot;title&quot;</span>]).replace(<span class=\"string\">&quot;/&quot;</span>,replaceFlag)</span><br><span class=\"line\">    <span class=\"comment\">#         if not os.path.exists(&quot;/Users/lei.zhou/text/&quot;+html[&quot;title&quot;]):</span></span><br><span class=\"line\">    <span class=\"comment\">#             os.mkdir(&quot;/Users/lei.zhou/text/&quot;)</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filePath+ childPage[<span class=\"string\">&quot;id&quot;</span>]+splitFlag+title+ <span class=\"string\">&quot;.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                f.write(content_text)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">##加入子节点‘</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> confluence.get_page_child_by_type(childPage[<span class=\"string\">&quot;id&quot;</span>], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;page&#x27;</span>, start=<span class=\"literal\">None</span>, limit=<span class=\"literal\">None</span>, expand=<span class=\"literal\">None</span>):</span><br><span class=\"line\">            queue.append(i)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max_tokens = <span class=\"number\">500</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">remove_newlines</span>(<span class=\"params\">serie</span>):</span><br><span class=\"line\">    serie = serie.<span class=\"built_in\">str</span>.replace(<span class=\"string\">&#x27;\\n&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    serie = serie.<span class=\"built_in\">str</span>.replace(<span class=\"string\">&#x27;\\\\n&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    serie = serie.<span class=\"built_in\">str</span>.replace(<span class=\"string\">&#x27;  &#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    serie = serie.<span class=\"built_in\">str</span>.replace(<span class=\"string\">&#x27;  &#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> serie</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_context</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    question, df, max_len=<span class=\"number\">1800</span>, size=<span class=\"string\">&quot;ada&quot;</span></span></span><br><span class=\"line\"><span class=\"params\"></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    寻找最相似的文本段</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># Get the embeddings for the question</span></span><br><span class=\"line\">    q_embeddings = openai.Embedding.create(<span class=\"built_in\">input</span>=question, engine=<span class=\"string\">&#x27;text-embedding-ada-002&#x27;</span>)[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"number\">0</span>][<span class=\"string\">&#x27;embedding&#x27;</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 使用余弦算法计算最相似的文本</span></span><br><span class=\"line\">    df[<span class=\"string\">&#x27;distances&#x27;</span>] = distances_from_embeddings(q_embeddings, df[<span class=\"string\">&#x27;embeddings&#x27;</span>].values, distance_metric=<span class=\"string\">&#x27;cosine&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    returns = []</span><br><span class=\"line\">    cur_len = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 不断添加文本到上限</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, row <span class=\"keyword\">in</span> df.sort_values(<span class=\"string\">&#x27;distances&#x27;</span>, ascending=<span class=\"literal\">True</span>).iterrows():</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 文本创建</span></span><br><span class=\"line\">        cur_len += row[<span class=\"string\">&#x27;n_tokens&#x27;</span>] + <span class=\"number\">4</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 超出上限退出</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cur_len &gt; max_len:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 增加文本</span></span><br><span class=\"line\">        returns.append(row[<span class=\"string\">&quot;text&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;\\n\\n###\\n\\n&quot;</span>.join(returns)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># token分割</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">split_into_many</span>(<span class=\"params\">text, max_tokens = max_tokens</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定义分割符号，可以允许自定义</span></span><br><span class=\"line\">    sentences = re.split(<span class=\"string\">&#x27;[.。！？!?]&#x27;</span>,text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取每段的token</span></span><br><span class=\"line\">    n_tokens = [<span class=\"built_in\">len</span>(tokenizer.encode(<span class=\"string\">&quot; &quot;</span> + sentence)) <span class=\"keyword\">for</span> sentence <span class=\"keyword\">in</span> sentences]</span><br><span class=\"line\">    </span><br><span class=\"line\">    chunks = []</span><br><span class=\"line\">    tokens_so_far = <span class=\"number\">0</span></span><br><span class=\"line\">    chunk = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> sentence, token <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(sentences, n_tokens):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果到目前为止的标记数量加上当前句子中的标记数量大于,大于最大标记数，则将该块添加到块的列表中，并重置到目前为止的块和标记数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tokens_so_far + token &gt; max_tokens:</span><br><span class=\"line\">            chunks.append(<span class=\"string\">&quot;. &quot;</span>.join(chunk) + <span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">            chunk = []</span><br><span class=\"line\">            tokens_so_far = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> token &gt; max_tokens:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 添加</span></span><br><span class=\"line\">        chunk.append(sentence)</span><br><span class=\"line\">        tokens_so_far += token + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> chunks</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##数据，模型，问题，长度，</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">answer_question</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    df,</span></span><br><span class=\"line\"><span class=\"params\">    model=<span class=\"string\">&quot;text-davinci-003&quot;</span>,</span></span><br><span class=\"line\"><span class=\"params\">    question=<span class=\"string\">&quot;你有什么问题&quot;</span>,</span></span><br><span class=\"line\"><span class=\"params\">    max_len=<span class=\"number\">1800</span>,</span></span><br><span class=\"line\"><span class=\"params\">    size=<span class=\"string\">&quot;ada&quot;</span>,</span></span><br><span class=\"line\"><span class=\"params\">    debug=<span class=\"literal\">False</span>,</span></span><br><span class=\"line\"><span class=\"params\">    max_tokens=<span class=\"number\">1800</span>,</span></span><br><span class=\"line\"><span class=\"params\">    stop_sequence=<span class=\"literal\">None</span>,</span></span><br><span class=\"line\"><span class=\"params\">    use_GPT=<span class=\"literal\">False</span></span></span><br><span class=\"line\"><span class=\"params\"></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    回答问题</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    context = create_context(</span><br><span class=\"line\">        question,</span><br><span class=\"line\">        df,</span><br><span class=\"line\">        max_len=max_len,</span><br><span class=\"line\">        size=size,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># If debug, print the raw model response</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> debug:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Context:\\n&quot;</span> + context)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n\\n&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \\&quot;I don&#x27;t know\\&quot;\\n\\nContext: <span class=\"subst\">&#123;context&#125;</span>\\n\\n---\\n\\nQuestion: <span class=\"subst\">&#123;question&#125;</span>\\nAnswer:&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> use_GPT:</span><br><span class=\"line\">        completion = openai.ChatCompletion.create(model=<span class=\"string\">&quot;gpt-3.5-turbo&quot;</span>,messages=[</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;user&quot;</span>, <span class=\"string\">&quot;content&quot;</span>: <span class=\"string\">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \\&quot;I don&#x27;t know\\&quot;\\n\\nContext: <span class=\"subst\">&#123;context&#125;</span>\\n\\n---\\n\\nQuestion: <span class=\"subst\">&#123;question&#125;</span>\\nAnswer:&quot;</span>&#125;])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> completion.to_dict()[<span class=\"string\">&quot;choices&quot;</span>][<span class=\"number\">0</span>][<span class=\"string\">&quot;message&quot;</span>][<span class=\"string\">&quot;content&quot;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Create a completions using the question and context</span></span><br><span class=\"line\">        response = openai.Completion.create(</span><br><span class=\"line\">            prompt=<span class=\"string\">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \\&quot;I don&#x27;t know\\&quot;\\n\\nContext: <span class=\"subst\">&#123;context&#125;</span>\\n\\n---\\n\\nQuestion: <span class=\"subst\">&#123;question&#125;</span>\\nAnswer:&quot;</span>,</span><br><span class=\"line\">            temperature=<span class=\"number\">0</span>,</span><br><span class=\"line\">            max_tokens=max_tokens,</span><br><span class=\"line\">            top_p=<span class=\"number\">1</span>,</span><br><span class=\"line\">            frequency_penalty=<span class=\"number\">0</span>,</span><br><span class=\"line\">            presence_penalty=<span class=\"number\">0</span>,</span><br><span class=\"line\">            stop=stop_sequence,</span><br><span class=\"line\">            model=model,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response[<span class=\"string\">&quot;choices&quot;</span>][<span class=\"number\">0</span>][<span class=\"string\">&quot;text&quot;</span>].strip()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crawler(base_url,username,password,space_key)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#原始文本</span></span><br><span class=\"line\">texts=[]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> os.listdir(filePath):</span><br><span class=\"line\">    <span class=\"comment\"># 文件读取</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filePath+file, <span class=\"string\">&quot;r&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        titles = file.split(splitFlag)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(titles) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        title = titles[<span class=\"number\">1</span>]</span><br><span class=\"line\">        text = f.read()</span><br><span class=\"line\">        <span class=\"comment\"># 标题还原，把_替换为空格插入</span></span><br><span class=\"line\">        texts.append((title.replace(replaceFlag,<span class=\"string\">&quot; &quot;</span>), text))</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\"># pd创建</span></span><br><span class=\"line\">df = pd.DataFrame(texts, columns = [<span class=\"string\">&#x27;fname&#x27;</span>, <span class=\"string\">&#x27;text&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按行分段</span></span><br><span class=\"line\">df[<span class=\"string\">&#x27;text&#x27;</span>] = df.fname + <span class=\"string\">&quot;. &quot;</span> + remove_newlines(df.text)</span><br><span class=\"line\">df.to_csv(<span class=\"string\">&#x27;processed/scraped.csv&#x27;</span>)</span><br><span class=\"line\">df.head()</span><br></pre></td></tr></table></figure>\n<p></p>\n<table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>fname</th><br>      <th>text</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>    </tr><br>  </tbody><br></table>\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tokenizer = tiktoken.get_encoding(<span class=\"string\">&quot;cl100k_base&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;processed/scraped.csv&#x27;</span>, index_col=<span class=\"number\">0</span>)</span><br><span class=\"line\">df.columns = [<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;text&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df[<span class=\"string\">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">len</span>(tokenizer.encode(x)))</span><br><span class=\"line\"></span><br><span class=\"line\">df</span><br></pre></td></tr></table></figure>\n<p></p>\n<table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>title</th><br>      <th>text</th><br>      <th>n_tokens</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>1423</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>1355</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>1106</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>1429</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>2736</td><br>    </tr><br>    <tr><br>      <th>…</th><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>    </tr><br>    <tr><br>      <th>412</th><br>      <td>B1 OnePortal Qulification Test Report.txt</td><br>      <td>B1 OnePortal Qulification Test Report.txt.   #…</td><br>      <td>966</td><br>    </tr><br>    <tr><br>      <th>413</th><br>      <td>Detailed Solution Architecture.txt</td><br>      <td>Detailed Solution Architecture.txt. 250</td><br>      <td>8</td><br>    </tr><br>    <tr><br>      <th>414</th><br>      <td>B1.3 Release.txt</td><br>      <td>B1.3 Release.txt. true</td><br>      <td>9</td><br>    </tr><br>    <tr><br>      <th>415</th><br>      <td>04  B1验收Charging&amp;RBC.txt</td><br>      <td>04  B1验收Charging&amp;RBC.txt.  L1| L2| L3| | | L4|…</td><br>      <td>1492</td><br>    </tr><br>    <tr><br>      <th>416</th><br>      <td>ULH - Integration Outline and API-Specificatio…</td><br>      <td>ULH - Integration Outline and API-Specificatio…</td><br>      <td>38</td><br>    </tr><br>  </tbody><br></table><br><p>417 rows × 3 columns</p><br><br><br><br><br><br><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Tokenize the text and save the number of tokens to a new column</span></span><br><span class=\"line\">df[<span class=\"string\">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">len</span>(tokenizer.encode(x)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Visualize the distribution of the number of tokens per row using a histogram</span></span><br><span class=\"line\">df.n_tokens.hist()</span><br></pre></td></tr></table></figure><br><br><br><br><br>    <a href=\"AxesSubplot:\">AxesSubplot:</a><br><br><br><br><br><img src=\"/2023/05/12/algorithm/chatGPT-with-confluence/output_7_1-3877587.png\" alt=\"png\"><br>​<br><br><br><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shortened = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 循环减少文本</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> df.iterrows():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(row)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> row[<span class=\"number\">1</span>][<span class=\"string\">&#x27;text&#x27;</span>] <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> row[<span class=\"number\">1</span>][<span class=\"string\">&#x27;n_tokens&#x27;</span>] &gt; max_tokens:</span><br><span class=\"line\">        shortened += split_into_many(row[<span class=\"number\">1</span>][<span class=\"string\">&#x27;text&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        shortened.append( row[<span class=\"number\">1</span>][<span class=\"string\">&#x27;text&#x27;</span>] )</span><br><span class=\"line\">df = pd.DataFrame(shortened, columns = [<span class=\"string\">&#x27;text&#x27;</span>])</span><br><span class=\"line\">df[<span class=\"string\">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">len</span>(tokenizer.encode(x)))</span><br><span class=\"line\">df.n_tokens.hist()</span><br></pre></td></tr></table></figure><br><br><br><br><br><br><img src=\"/2023/05/12/algorithm/chatGPT-with-confluence/output_8_1-3877587.png\" alt=\"png\"><br>​<br><br><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##由于官方的限制，1分钟最多发起60个请求，所以为了防止报错此处主动休眠</span></span><br><span class=\"line\"><span class=\"comment\">##由于数据量过大，如果无法运行，可以在上面一栏    截取部分数据df = df[0:x]  x为截取长度</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cal</span>(<span class=\"params\">x,waittime = <span class=\"number\">0.6</span></span>):</span><br><span class=\"line\">    res = openai.Embedding.create(<span class=\"built_in\">input</span>=x, engine=<span class=\"string\">&#x27;text-embedding-ada-002&#x27;</span>)[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"number\">0</span>][<span class=\"string\">&#x27;embedding&#x27;</span>]</span><br><span class=\"line\">    time.sleep(waittime)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">df[<span class=\"string\">&#x27;embeddings&#x27;</span>] = df.text.apply(<span class=\"keyword\">lambda</span> x: cal(x))</span><br><span class=\"line\"></span><br><span class=\"line\">df.to_csv(<span class=\"string\">&#x27;processed/embeddings.csv&#x27;</span>)</span><br><span class=\"line\">df.head()</span><br></pre></td></tr></table></figure><br><br><br><br><br><br><table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>text</th><br>      <th>n_tokens</th><br>      <th>embeddings</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>472</td><br>      <td>[-0.0035752991680055857, 0.015155627392232418,…</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试…</td><br>      <td>343</td><br>      <td>[0.012331507168710232, 0.002946529071778059, -…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>454</td><br>      <td>[0.004054947756230831, -0.0028905682265758514,…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>| 203 complete OK |  |   <strong>专属部分</strong> |  | 检查人：Zh…</td><br>      <td>492</td><br>      <td>[0.019448528066277504, 0.00747803645208478, 0….</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>bak. B1. 1 Payment Center Integration Test Rep…</td><br>      <td>481</td><br>      <td>[0.0010055731981992722, -0.013514618389308453,…</td><br>    </tr><br>  </tbody><br></table>\n\n<p></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##读取token数据</span></span><br><span class=\"line\">df=pd.read_csv(<span class=\"string\">&#x27;processed/embeddings.csv&#x27;</span>, index_col=<span class=\"number\">0</span>)</span><br><span class=\"line\">df[<span class=\"string\">&#x27;embeddings&#x27;</span>] = df[<span class=\"string\">&#x27;embeddings&#x27;</span>].apply(<span class=\"built_in\">eval</span>).apply(np.array)</span><br><span class=\"line\">df.head()</span><br></pre></td></tr></table></figure>\n<p></p>\n<p><table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>text</th><br>      <th>n_tokens</th><br>      <th>embeddings</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>472</td><br>      <td>[-0.0035752991680055857, 0.015155627392232418,…</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试…</td><br>      <td>343</td><br>      <td>[0.012331507168710232, 0.002946529071778059, -…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>454</td><br>      <td>[0.004054947756230831, -0.0028905682265758514,…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>| 203 complete OK |  |   <strong>专属部分</strong> |  | 检查人：Zh…</td><br>      <td>492</td><br>      <td>[0.019448528066277504, 0.00747803645208478, 0….</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>bak. B1. 1 Payment Center Integration Test Rep…</td><br>      <td>481</td><br>      <td>[0.0010055731981992722, -0.013514618389308453,…</td><br>    </tr><br>  </tbody><br></table><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##输入最大token，返回长度进行提问</span></span><br><span class=\"line\">answer_question(df, question=<span class=\"string\">&quot;测试用例需要满足那些要求?&quot;</span>, debug=<span class=\"literal\">False</span>,use_GPT=<span class=\"literal\">True</span>,max_len=<span class=\"number\">1800</span>,max_tokens = <span class=\"number\">1800</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>&apos;测试用例需要满足许多要求，包括但不限于：前提条件、输入数据和期待结果清晰、明确；包含充分的正面、负面异常测试用例；是否从用户层面来设计用户使用场景和使用流程的测试用例；是否简洁，复用性强等。具体要求见上文中的各项检查项。&apos;\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">answer_question(df, question=<span class=\"string\">&quot;一份DD文档或是AD文档需要满足那些要求?,请用中文回答&quot;</span>, debug=<span class=\"literal\">False</span>,use_GPT=<span class=\"literal\">True</span>,max_len=<span class=\"number\">1800</span>,max_tokens = <span class=\"number\">1800</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>&apos;DD文档或AD文档需要满足以下要求：\\n1. 它应该清晰明了，包括应用的功能、性能、界面、安全等方面。\\n2. 它应该易于理解，包括适当的说明、流程图、状态图等。\\n3. 它应该满足可复用性、易维护性等软件工程的基本原则。\\n4. 它应该包括可靠性需求，描述系统的可用性、健壮性等需求。\\n5. 它应该考虑约束和假设，包括客户和MA的约束和假设。\\n6. 它应该包括详细设计，以阐明更改的原因和过程，并进行一致性评估。\\n7. 它应该考虑软件单元的互操作性、交互、关键性、技术复杂性、风险和可测试性等方面。 \\n8. 它应该包括接口定义，以使接口清楚明了。\\n9. 历史记录应该得到正确维护。&apos;\n</code></pre>","site":{"data":{}},"excerpt":"<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target:\"></a>Target:</h3><p>由于工作时Confluence中的文件太多，也比较杂乱，难以阅读，所以希望基于chatGPT能够帮助我快速从文件中获取我想要的知识</p>","more":"<p>以下是一个demo的代码，参考了GPT官网的做法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##爬虫</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\"><span class=\"keyword\">from</span> html.parser <span class=\"keyword\">import</span> HTMLParser</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib.parse <span class=\"keyword\">import</span> urlparse</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> html2text</span><br><span class=\"line\"><span class=\"keyword\">from</span> atlassian <span class=\"keyword\">import</span> Confluence</span><br><span class=\"line\"><span class=\"keyword\">import</span> tiktoken</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> openai</span><br><span class=\"line\"><span class=\"keyword\">from</span> openai.embeddings_utils <span class=\"keyword\">import</span> distances_from_embeddings</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> openai.embeddings_utils <span class=\"keyword\">import</span> distances_from_embeddings, cosine_similarity</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># public 的账号 和confluence空间配置</span></span><br><span class=\"line\">domain = <span class=\"string\">&quot;confluence.xxxxx.com&quot;</span></span><br><span class=\"line\">full_url = <span class=\"string\">&quot;https://confluence.xxxxx.com/&quot;</span></span><br><span class=\"line\">login_url = <span class=\"string\">&quot;https://confluence.xxxxx.com/login.action?os_destination=%2Fdologin.action&quot;</span></span><br><span class=\"line\">page_url = <span class=\"string\">&quot;https://confluence.xxxxx.com/display/41JTSP/&quot;</span></span><br><span class=\"line\">user_name = <span class=\"string\">&quot;xxxx&quot;</span></span><br><span class=\"line\">password = <span class=\"string\">&quot;xxxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 定义要爬取的空间key，这是目前我们的空间</span></span><br><span class=\"line\">space_key = <span class=\"string\">&quot;xxxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##数据保存地址，请自定义</span></span><br><span class=\"line\">filePath = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">processPath = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##分隔符和替换符，主要用于文件名生成和标题还原</span></span><br><span class=\"line\">splitFlag = <span class=\"string\">&quot;$&quot;</span></span><br><span class=\"line\">replaceFlag = <span class=\"string\">&quot;_&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##设置openai环境</span></span><br><span class=\"line\">openai.organization = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">openai.api_key = <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">crawler</span>(<span class=\"params\">base_url,username,password,space_key,totalSpace = <span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    confluence = Confluence(url=base_url, username=username, password=password)</span><br><span class=\"line\">    <span class=\"comment\">##待实现，爬取所有的space</span></span><br><span class=\"line\">    <span class=\"comment\">##获取对应空间</span></span><br><span class=\"line\">    space = confluence.get_space(space_key, expand=<span class=\"string\">&#x27;description.plain,homepage&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">##获取space页面id</span></span><br><span class=\"line\">    page_id = space[<span class=\"string\">&quot;homepage&quot;</span>][<span class=\"string\">&quot;id&quot;</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\"># Create a directory to store the text files</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(filePath):</span><br><span class=\"line\">            os.mkdir(filePath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Create a directory to store the csv files</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(processPath):</span><br><span class=\"line\">            os.mkdir(processPath)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">##子页面</span></span><br><span class=\"line\">    child = confluence.get_page_child_by_type(page_id, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;page&#x27;</span>, start=<span class=\"literal\">None</span>, limit=<span class=\"literal\">None</span>, expand=<span class=\"literal\">None</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">##初始化队列</span></span><br><span class=\"line\">    queue = deque()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> child:</span><br><span class=\"line\">        queue.append(i)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        <span class=\"comment\"># Get the next URL from the queue</span></span><br><span class=\"line\">        childPage = queue.pop()</span><br><span class=\"line\">        <span class=\"comment\">##拿到页面id</span></span><br><span class=\"line\">        html = confluence.get_page_by_id(childPage[<span class=\"string\">&quot;id&quot;</span>], expand=<span class=\"string\">&quot;body.storage&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 调用方法，将html转为纯文本</span></span><br><span class=\"line\">        content = html[<span class=\"string\">&quot;body&quot;</span>][<span class=\"string\">&quot;storage&quot;</span>][<span class=\"string\">&quot;value&quot;</span>]</span><br><span class=\"line\">        content_text = html2text.html2text(content)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">##文本不为空写入</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> content_text.lstrip() != <span class=\"string\">&quot;&quot;</span>:</span><br><span class=\"line\">            title = <span class=\"built_in\">str</span>(html[<span class=\"string\">&quot;title&quot;</span>]).replace(<span class=\"string\">&quot;/&quot;</span>,replaceFlag)</span><br><span class=\"line\">    <span class=\"comment\">#         if not os.path.exists(&quot;/Users/lei.zhou/text/&quot;+html[&quot;title&quot;]):</span></span><br><span class=\"line\">    <span class=\"comment\">#             os.mkdir(&quot;/Users/lei.zhou/text/&quot;)</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filePath+ childPage[<span class=\"string\">&quot;id&quot;</span>]+splitFlag+title+ <span class=\"string\">&quot;.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                f.write(content_text)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">##加入子节点‘</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> confluence.get_page_child_by_type(childPage[<span class=\"string\">&quot;id&quot;</span>], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;page&#x27;</span>, start=<span class=\"literal\">None</span>, limit=<span class=\"literal\">None</span>, expand=<span class=\"literal\">None</span>):</span><br><span class=\"line\">            queue.append(i)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max_tokens = <span class=\"number\">500</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">remove_newlines</span>(<span class=\"params\">serie</span>):</span><br><span class=\"line\">    serie = serie.<span class=\"built_in\">str</span>.replace(<span class=\"string\">&#x27;\\n&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    serie = serie.<span class=\"built_in\">str</span>.replace(<span class=\"string\">&#x27;\\\\n&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    serie = serie.<span class=\"built_in\">str</span>.replace(<span class=\"string\">&#x27;  &#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    serie = serie.<span class=\"built_in\">str</span>.replace(<span class=\"string\">&#x27;  &#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> serie</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_context</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    question, df, max_len=<span class=\"number\">1800</span>, size=<span class=\"string\">&quot;ada&quot;</span></span></span><br><span class=\"line\"><span class=\"params\"></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    寻找最相似的文本段</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># Get the embeddings for the question</span></span><br><span class=\"line\">    q_embeddings = openai.Embedding.create(<span class=\"built_in\">input</span>=question, engine=<span class=\"string\">&#x27;text-embedding-ada-002&#x27;</span>)[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"number\">0</span>][<span class=\"string\">&#x27;embedding&#x27;</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 使用余弦算法计算最相似的文本</span></span><br><span class=\"line\">    df[<span class=\"string\">&#x27;distances&#x27;</span>] = distances_from_embeddings(q_embeddings, df[<span class=\"string\">&#x27;embeddings&#x27;</span>].values, distance_metric=<span class=\"string\">&#x27;cosine&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    returns = []</span><br><span class=\"line\">    cur_len = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 不断添加文本到上限</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, row <span class=\"keyword\">in</span> df.sort_values(<span class=\"string\">&#x27;distances&#x27;</span>, ascending=<span class=\"literal\">True</span>).iterrows():</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 文本创建</span></span><br><span class=\"line\">        cur_len += row[<span class=\"string\">&#x27;n_tokens&#x27;</span>] + <span class=\"number\">4</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 超出上限退出</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cur_len &gt; max_len:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 增加文本</span></span><br><span class=\"line\">        returns.append(row[<span class=\"string\">&quot;text&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;\\n\\n###\\n\\n&quot;</span>.join(returns)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># token分割</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">split_into_many</span>(<span class=\"params\">text, max_tokens = max_tokens</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定义分割符号，可以允许自定义</span></span><br><span class=\"line\">    sentences = re.split(<span class=\"string\">&#x27;[.。！？!?]&#x27;</span>,text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取每段的token</span></span><br><span class=\"line\">    n_tokens = [<span class=\"built_in\">len</span>(tokenizer.encode(<span class=\"string\">&quot; &quot;</span> + sentence)) <span class=\"keyword\">for</span> sentence <span class=\"keyword\">in</span> sentences]</span><br><span class=\"line\">    </span><br><span class=\"line\">    chunks = []</span><br><span class=\"line\">    tokens_so_far = <span class=\"number\">0</span></span><br><span class=\"line\">    chunk = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> sentence, token <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(sentences, n_tokens):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果到目前为止的标记数量加上当前句子中的标记数量大于,大于最大标记数，则将该块添加到块的列表中，并重置到目前为止的块和标记数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tokens_so_far + token &gt; max_tokens:</span><br><span class=\"line\">            chunks.append(<span class=\"string\">&quot;. &quot;</span>.join(chunk) + <span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">            chunk = []</span><br><span class=\"line\">            tokens_so_far = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> token &gt; max_tokens:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 添加</span></span><br><span class=\"line\">        chunk.append(sentence)</span><br><span class=\"line\">        tokens_so_far += token + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> chunks</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##数据，模型，问题，长度，</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">answer_question</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    df,</span></span><br><span class=\"line\"><span class=\"params\">    model=<span class=\"string\">&quot;text-davinci-003&quot;</span>,</span></span><br><span class=\"line\"><span class=\"params\">    question=<span class=\"string\">&quot;你有什么问题&quot;</span>,</span></span><br><span class=\"line\"><span class=\"params\">    max_len=<span class=\"number\">1800</span>,</span></span><br><span class=\"line\"><span class=\"params\">    size=<span class=\"string\">&quot;ada&quot;</span>,</span></span><br><span class=\"line\"><span class=\"params\">    debug=<span class=\"literal\">False</span>,</span></span><br><span class=\"line\"><span class=\"params\">    max_tokens=<span class=\"number\">1800</span>,</span></span><br><span class=\"line\"><span class=\"params\">    stop_sequence=<span class=\"literal\">None</span>,</span></span><br><span class=\"line\"><span class=\"params\">    use_GPT=<span class=\"literal\">False</span></span></span><br><span class=\"line\"><span class=\"params\"></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    回答问题</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    context = create_context(</span><br><span class=\"line\">        question,</span><br><span class=\"line\">        df,</span><br><span class=\"line\">        max_len=max_len,</span><br><span class=\"line\">        size=size,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># If debug, print the raw model response</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> debug:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Context:\\n&quot;</span> + context)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n\\n&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \\&quot;I don&#x27;t know\\&quot;\\n\\nContext: <span class=\"subst\">&#123;context&#125;</span>\\n\\n---\\n\\nQuestion: <span class=\"subst\">&#123;question&#125;</span>\\nAnswer:&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> use_GPT:</span><br><span class=\"line\">        completion = openai.ChatCompletion.create(model=<span class=\"string\">&quot;gpt-3.5-turbo&quot;</span>,messages=[</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;user&quot;</span>, <span class=\"string\">&quot;content&quot;</span>: <span class=\"string\">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \\&quot;I don&#x27;t know\\&quot;\\n\\nContext: <span class=\"subst\">&#123;context&#125;</span>\\n\\n---\\n\\nQuestion: <span class=\"subst\">&#123;question&#125;</span>\\nAnswer:&quot;</span>&#125;])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> completion.to_dict()[<span class=\"string\">&quot;choices&quot;</span>][<span class=\"number\">0</span>][<span class=\"string\">&quot;message&quot;</span>][<span class=\"string\">&quot;content&quot;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Create a completions using the question and context</span></span><br><span class=\"line\">        response = openai.Completion.create(</span><br><span class=\"line\">            prompt=<span class=\"string\">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \\&quot;I don&#x27;t know\\&quot;\\n\\nContext: <span class=\"subst\">&#123;context&#125;</span>\\n\\n---\\n\\nQuestion: <span class=\"subst\">&#123;question&#125;</span>\\nAnswer:&quot;</span>,</span><br><span class=\"line\">            temperature=<span class=\"number\">0</span>,</span><br><span class=\"line\">            max_tokens=max_tokens,</span><br><span class=\"line\">            top_p=<span class=\"number\">1</span>,</span><br><span class=\"line\">            frequency_penalty=<span class=\"number\">0</span>,</span><br><span class=\"line\">            presence_penalty=<span class=\"number\">0</span>,</span><br><span class=\"line\">            stop=stop_sequence,</span><br><span class=\"line\">            model=model,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response[<span class=\"string\">&quot;choices&quot;</span>][<span class=\"number\">0</span>][<span class=\"string\">&quot;text&quot;</span>].strip()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crawler(base_url,username,password,space_key)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#原始文本</span></span><br><span class=\"line\">texts=[]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> os.listdir(filePath):</span><br><span class=\"line\">    <span class=\"comment\"># 文件读取</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filePath+file, <span class=\"string\">&quot;r&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        titles = file.split(splitFlag)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(titles) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        title = titles[<span class=\"number\">1</span>]</span><br><span class=\"line\">        text = f.read()</span><br><span class=\"line\">        <span class=\"comment\"># 标题还原，把_替换为空格插入</span></span><br><span class=\"line\">        texts.append((title.replace(replaceFlag,<span class=\"string\">&quot; &quot;</span>), text))</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\"># pd创建</span></span><br><span class=\"line\">df = pd.DataFrame(texts, columns = [<span class=\"string\">&#x27;fname&#x27;</span>, <span class=\"string\">&#x27;text&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按行分段</span></span><br><span class=\"line\">df[<span class=\"string\">&#x27;text&#x27;</span>] = df.fname + <span class=\"string\">&quot;. &quot;</span> + remove_newlines(df.text)</span><br><span class=\"line\">df.to_csv(<span class=\"string\">&#x27;processed/scraped.csv&#x27;</span>)</span><br><span class=\"line\">df.head()</span><br></pre></td></tr></table></figure>\n<p></p>\n<table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>fname</th><br>      <th>text</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>    </tr><br>  </tbody><br></table>\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tokenizer = tiktoken.get_encoding(<span class=\"string\">&quot;cl100k_base&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;processed/scraped.csv&#x27;</span>, index_col=<span class=\"number\">0</span>)</span><br><span class=\"line\">df.columns = [<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;text&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df[<span class=\"string\">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">len</span>(tokenizer.encode(x)))</span><br><span class=\"line\"></span><br><span class=\"line\">df</span><br></pre></td></tr></table></figure>\n<p></p>\n<table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>title</th><br>      <th>text</th><br>      <th>n_tokens</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>1423</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>1355</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>1106</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>1429</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>2736</td><br>    </tr><br>    <tr><br>      <th>…</th><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>    </tr><br>    <tr><br>      <th>412</th><br>      <td>B1 OnePortal Qulification Test Report.txt</td><br>      <td>B1 OnePortal Qulification Test Report.txt.   #…</td><br>      <td>966</td><br>    </tr><br>    <tr><br>      <th>413</th><br>      <td>Detailed Solution Architecture.txt</td><br>      <td>Detailed Solution Architecture.txt. 250</td><br>      <td>8</td><br>    </tr><br>    <tr><br>      <th>414</th><br>      <td>B1.3 Release.txt</td><br>      <td>B1.3 Release.txt. true</td><br>      <td>9</td><br>    </tr><br>    <tr><br>      <th>415</th><br>      <td>04  B1验收Charging&amp;RBC.txt</td><br>      <td>04  B1验收Charging&amp;RBC.txt.  L1| L2| L3| | | L4|…</td><br>      <td>1492</td><br>    </tr><br>    <tr><br>      <th>416</th><br>      <td>ULH - Integration Outline and API-Specificatio…</td><br>      <td>ULH - Integration Outline and API-Specificatio…</td><br>      <td>38</td><br>    </tr><br>  </tbody><br></table><br><p>417 rows × 3 columns</p><br><br><br><br><br><br><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Tokenize the text and save the number of tokens to a new column</span></span><br><span class=\"line\">df[<span class=\"string\">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">len</span>(tokenizer.encode(x)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Visualize the distribution of the number of tokens per row using a histogram</span></span><br><span class=\"line\">df.n_tokens.hist()</span><br></pre></td></tr></table></figure><br><br><br><br><br>    <a href=\"AxesSubplot:\">AxesSubplot:</a><br><br><br><br><br><img src=\"/2023/05/12/algorithm/chatGPT-with-confluence/output_7_1-3877587.png\" alt=\"png\"><br>​<br><br><br><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shortened = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 循环减少文本</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> df.iterrows():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(row)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> row[<span class=\"number\">1</span>][<span class=\"string\">&#x27;text&#x27;</span>] <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> row[<span class=\"number\">1</span>][<span class=\"string\">&#x27;n_tokens&#x27;</span>] &gt; max_tokens:</span><br><span class=\"line\">        shortened += split_into_many(row[<span class=\"number\">1</span>][<span class=\"string\">&#x27;text&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        shortened.append( row[<span class=\"number\">1</span>][<span class=\"string\">&#x27;text&#x27;</span>] )</span><br><span class=\"line\">df = pd.DataFrame(shortened, columns = [<span class=\"string\">&#x27;text&#x27;</span>])</span><br><span class=\"line\">df[<span class=\"string\">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">len</span>(tokenizer.encode(x)))</span><br><span class=\"line\">df.n_tokens.hist()</span><br></pre></td></tr></table></figure><br><br><br><br><br><br><img src=\"/2023/05/12/algorithm/chatGPT-with-confluence/output_8_1-3877587.png\" alt=\"png\"><br>​<br><br><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##由于官方的限制，1分钟最多发起60个请求，所以为了防止报错此处主动休眠</span></span><br><span class=\"line\"><span class=\"comment\">##由于数据量过大，如果无法运行，可以在上面一栏    截取部分数据df = df[0:x]  x为截取长度</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cal</span>(<span class=\"params\">x,waittime = <span class=\"number\">0.6</span></span>):</span><br><span class=\"line\">    res = openai.Embedding.create(<span class=\"built_in\">input</span>=x, engine=<span class=\"string\">&#x27;text-embedding-ada-002&#x27;</span>)[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"number\">0</span>][<span class=\"string\">&#x27;embedding&#x27;</span>]</span><br><span class=\"line\">    time.sleep(waittime)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">df[<span class=\"string\">&#x27;embeddings&#x27;</span>] = df.text.apply(<span class=\"keyword\">lambda</span> x: cal(x))</span><br><span class=\"line\"></span><br><span class=\"line\">df.to_csv(<span class=\"string\">&#x27;processed/embeddings.csv&#x27;</span>)</span><br><span class=\"line\">df.head()</span><br></pre></td></tr></table></figure><br><br><br><br><br><br><table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>text</th><br>      <th>n_tokens</th><br>      <th>embeddings</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>472</td><br>      <td>[-0.0035752991680055857, 0.015155627392232418,…</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试…</td><br>      <td>343</td><br>      <td>[0.012331507168710232, 0.002946529071778059, -…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>454</td><br>      <td>[0.004054947756230831, -0.0028905682265758514,…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>| 203 complete OK |  |   <strong>专属部分</strong> |  | 检查人：Zh…</td><br>      <td>492</td><br>      <td>[0.019448528066277504, 0.00747803645208478, 0….</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>bak. B1. 1 Payment Center Integration Test Rep…</td><br>      <td>481</td><br>      <td>[0.0010055731981992722, -0.013514618389308453,…</td><br>    </tr><br>  </tbody><br></table>\n\n<p></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##读取token数据</span></span><br><span class=\"line\">df=pd.read_csv(<span class=\"string\">&#x27;processed/embeddings.csv&#x27;</span>, index_col=<span class=\"number\">0</span>)</span><br><span class=\"line\">df[<span class=\"string\">&#x27;embeddings&#x27;</span>] = df[<span class=\"string\">&#x27;embeddings&#x27;</span>].apply(<span class=\"built_in\">eval</span>).apply(np.array)</span><br><span class=\"line\">df.head()</span><br></pre></td></tr></table></figure>\n<p></p>\n<p><table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>text</th><br>      <th>n_tokens</th><br>      <th>embeddings</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>472</td><br>      <td>[-0.0035752991680055857, 0.015155627392232418,…</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试…</td><br>      <td>343</td><br>      <td>[0.012331507168710232, 0.002946529071778059, -…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>454</td><br>      <td>[0.004054947756230831, -0.0028905682265758514,…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>| 203 complete OK |  |   <strong>专属部分</strong> |  | 检查人：Zh…</td><br>      <td>492</td><br>      <td>[0.019448528066277504, 0.00747803645208478, 0….</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>bak. B1. 1 Payment Center Integration Test Rep…</td><br>      <td>481</td><br>      <td>[0.0010055731981992722, -0.013514618389308453,…</td><br>    </tr><br>  </tbody><br></table><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##输入最大token，返回长度进行提问</span></span><br><span class=\"line\">answer_question(df, question=<span class=\"string\">&quot;测试用例需要满足那些要求?&quot;</span>, debug=<span class=\"literal\">False</span>,use_GPT=<span class=\"literal\">True</span>,max_len=<span class=\"number\">1800</span>,max_tokens = <span class=\"number\">1800</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>&apos;测试用例需要满足许多要求，包括但不限于：前提条件、输入数据和期待结果清晰、明确；包含充分的正面、负面异常测试用例；是否从用户层面来设计用户使用场景和使用流程的测试用例；是否简洁，复用性强等。具体要求见上文中的各项检查项。&apos;\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">answer_question(df, question=<span class=\"string\">&quot;一份DD文档或是AD文档需要满足那些要求?,请用中文回答&quot;</span>, debug=<span class=\"literal\">False</span>,use_GPT=<span class=\"literal\">True</span>,max_len=<span class=\"number\">1800</span>,max_tokens = <span class=\"number\">1800</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>&apos;DD文档或AD文档需要满足以下要求：\\n1. 它应该清晰明了，包括应用的功能、性能、界面、安全等方面。\\n2. 它应该易于理解，包括适当的说明、流程图、状态图等。\\n3. 它应该满足可复用性、易维护性等软件工程的基本原则。\\n4. 它应该包括可靠性需求，描述系统的可用性、健壮性等需求。\\n5. 它应该考虑约束和假设，包括客户和MA的约束和假设。\\n6. 它应该包括详细设计，以阐明更改的原因和过程，并进行一致性评估。\\n7. 它应该考虑软件单元的互操作性、交互、关键性、技术复杂性、风险和可测试性等方面。 \\n8. 它应该包括接口定义，以使接口清楚明了。\\n9. 历史记录应该得到正确维护。&apos;\n</code></pre>"}],"PostAsset":[{"_id":"source/_posts/LeetCode/LeetCode-386/1603875858-aRThUF-QQ20201028-170405@2x.png","post":"clhkds2de0009bml7hcej0unv","slug":"1603875858-aRThUF-QQ20201028-170405@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/基于springboot——一个简单的BDD实践/WX20230512-151458@2x.png","post":"clhkds2db0003bml77s13br6e","slug":"WX20230512-151458@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构——链表、栈、队列/WX20230512-133517@2x.png","post":"clhkds2dd0007bml7gnfs8h6z","slug":"WX20230512-133517@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构——链表、栈、队列/WX20230512-134440@2x.png","post":"clhkds2dd0007bml7gnfs8h6z","slug":"WX20230512-134440@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构——链表、栈、队列/WX20230512-135224@2x.png","post":"clhkds2dd0007bml7gnfs8h6z","slug":"WX20230512-135224@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构——链表、栈、队列/WX20230512-135651@2x.png","post":"clhkds2dd0007bml7gnfs8h6z","slug":"WX20230512-135651@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/algorithm/chatGPT-with-confluence/output_7_1-3877587.png","post":"clhkds2dg000kbml7awxwcee2","slug":"output_7_1-3877587.png","modified":1,"renderable":1},{"_id":"source/_posts/algorithm/chatGPT-with-confluence/output_7_1.png","post":"clhkds2dg000kbml7awxwcee2","slug":"output_7_1.png","modified":1,"renderable":1},{"_id":"source/_posts/algorithm/chatGPT-with-confluence/output_8_1-3877587.png","post":"clhkds2dg000kbml7awxwcee2","slug":"output_8_1-3877587.png","modified":1,"renderable":1},{"_id":"source/_posts/algorithm/chatGPT-with-confluence/output_8_1.png","post":"clhkds2dg000kbml7awxwcee2","slug":"output_8_1.png","modified":1,"renderable":1},{"_id":"source/_posts/algorithm/KMP-algorithm/1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg","post":"clhkds2dg000jbml79lpve4nz","slug":"1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/algorithm/KMP-algorithm/1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg","post":"clhkds2dg000jbml79lpve4nz","slug":"1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/algorithm/KMP-algorithm/1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg","post":"clhkds2dg000jbml79lpve4nz","slug":"1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/algorithm/KMP-algorithm/1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg","post":"clhkds2dg000jbml79lpve4nz","slug":"1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/algorithm/KMP-algorithm/1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg","post":"clhkds2dg000jbml79lpve4nz","slug":"1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"clhkds2d90001bml7etg2b9r9","category_id":"clhkds2dc0004bml75ch94en1","_id":"clhkds2df000gbml78sw20dth"},{"post_id":"clhkds2df000ebml79egq567v","category_id":"clhkds2de000bbml70hkx3ki8","_id":"clhkds2dh000lbml77gep6yqt"},{"post_id":"clhkds2db0003bml77s13br6e","category_id":"clhkds2de000bbml70hkx3ki8","_id":"clhkds2di000obml7gfc90amf"},{"post_id":"clhkds2df000fbml79ox1f6ao","category_id":"clhkds2de000bbml70hkx3ki8","_id":"clhkds2di000qbml78tvn1er8"},{"post_id":"clhkds2dg000jbml79lpve4nz","category_id":"clhkds2de000bbml70hkx3ki8","_id":"clhkds2di000ubml7anjjese7"},{"post_id":"clhkds2dd0007bml7gnfs8h6z","category_id":"clhkds2de000bbml70hkx3ki8","_id":"clhkds2di000vbml7eea5dvrd"},{"post_id":"clhkds2dg000kbml7awxwcee2","category_id":"clhkds2de000bbml70hkx3ki8","_id":"clhkds2dj000xbml7f15681i7"},{"post_id":"clhkds2de0009bml7hcej0unv","category_id":"clhkds2de000bbml70hkx3ki8","_id":"clhkds2dj000zbml7dvaw0pyz"},{"post_id":"clhkds2de000abml73rvk4epx","category_id":"clhkds2de000bbml70hkx3ki8","_id":"clhkds2dj0011bml74r7y7dd8"}],"PostTag":[{"post_id":"clhkds2d90001bml7etg2b9r9","tag_id":"clhkds2dd0005bml71fuedpyn","_id":"clhkds2df000dbml7940j04tr"},{"post_id":"clhkds2db0003bml77s13br6e","tag_id":"clhkds2de000cbml78w78bzgp","_id":"clhkds2di000pbml7bwb9d7a5"},{"post_id":"clhkds2db0003bml77s13br6e","tag_id":"clhkds2df000ibml77xet8wwx","_id":"clhkds2di000sbml7cvgy7m4n"},{"post_id":"clhkds2dd0007bml7gnfs8h6z","tag_id":"clhkds2dh000nbml70jb29ks5","_id":"clhkds2dj000ybml70jk584jq"},{"post_id":"clhkds2dd0007bml7gnfs8h6z","tag_id":"clhkds2df000ibml77xet8wwx","_id":"clhkds2dj0010bml7ajfr4tsy"},{"post_id":"clhkds2de0009bml7hcej0unv","tag_id":"clhkds2di000wbml7bale3pe8","_id":"clhkds2dj0015bml7bp29dfd5"},{"post_id":"clhkds2de0009bml7hcej0unv","tag_id":"clhkds2df000ibml77xet8wwx","_id":"clhkds2dj0016bml77qs85ccs"},{"post_id":"clhkds2de0009bml7hcej0unv","tag_id":"clhkds2dj0013bml789me3imm","_id":"clhkds2dj0018bml724oagfsi"},{"post_id":"clhkds2de000abml73rvk4epx","tag_id":"clhkds2di000wbml7bale3pe8","_id":"clhkds2dj001abml7e1b6fuez"},{"post_id":"clhkds2de000abml73rvk4epx","tag_id":"clhkds2df000ibml77xet8wwx","_id":"clhkds2dj001bbml72mtwgoeb"},{"post_id":"clhkds2df000ebml79egq567v","tag_id":"clhkds2di000wbml7bale3pe8","_id":"clhkds2dk001gbml745ko6mbe"},{"post_id":"clhkds2df000ebml79egq567v","tag_id":"clhkds2df000ibml77xet8wwx","_id":"clhkds2dk001hbml7888x97zy"},{"post_id":"clhkds2df000ebml79egq567v","tag_id":"clhkds2dk001dbml7hyrzf0sw","_id":"clhkds2dk001jbml7h31b36cs"},{"post_id":"clhkds2df000ebml79egq567v","tag_id":"clhkds2dk001ebml73yng8je2","_id":"clhkds2dk001kbml78snjfzri"},{"post_id":"clhkds2df000fbml79ox1f6ao","tag_id":"clhkds2di000wbml7bale3pe8","_id":"clhkds2dk001nbml7hxxxcakq"},{"post_id":"clhkds2df000fbml79ox1f6ao","tag_id":"clhkds2df000ibml77xet8wwx","_id":"clhkds2dk001obml7gxklfwu7"},{"post_id":"clhkds2df000fbml79ox1f6ao","tag_id":"clhkds2dj0013bml789me3imm","_id":"clhkds2dk001qbml7g5ee53sd"},{"post_id":"clhkds2dg000jbml79lpve4nz","tag_id":"clhkds2df000ibml77xet8wwx","_id":"clhkds2dk001rbml78n7get26"},{"post_id":"clhkds2dg000jbml79lpve4nz","tag_id":"clhkds2dk001mbml78f6zaxf5","_id":"clhkds2dl001tbml704okbrgd"},{"post_id":"clhkds2dg000kbml7awxwcee2","tag_id":"clhkds2dk001pbml7eymt3kdp","_id":"clhkds2dl001vbml7ebp26pml"},{"post_id":"clhkds2dg000kbml7awxwcee2","tag_id":"clhkds2dk001sbml74mimen0d","_id":"clhkds2dl001wbml7fueub941"},{"post_id":"clhkds2dg000kbml7awxwcee2","tag_id":"clhkds2dk001mbml78f6zaxf5","_id":"clhkds2dl001xbml762j7byq8"}],"Tag":[{"name":"Trying","_id":"clhkds2dd0005bml71fuedpyn"},{"name":"项目","_id":"clhkds2de000cbml78w78bzgp"},{"name":"java","_id":"clhkds2df000ibml77xet8wwx"},{"name":"数据结构","_id":"clhkds2dh000nbml70jb29ks5"},{"name":"力扣之旅","_id":"clhkds2di000wbml7bale3pe8"},{"name":"DFS","_id":"clhkds2dj0013bml789me3imm"},{"name":"前缀和","_id":"clhkds2dk001dbml7hyrzf0sw"},{"name":"单调队列","_id":"clhkds2dk001ebml73yng8je2"},{"name":"算法","_id":"clhkds2dk001mbml78f6zaxf5"},{"name":"python","_id":"clhkds2dk001pbml7eymt3kdp"},{"name":"chatGpt","_id":"clhkds2dk001sbml74mimen0d"}]}}