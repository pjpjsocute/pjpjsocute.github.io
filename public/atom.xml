<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ray’ Person blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ray.github.io/"/>
  <updated>2023-05-12T06:09:49.407Z</updated>
  <id>http://ray.github.io/</id>
  
  <author>
    <name>Ray zhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构——链表、栈、队列</title>
    <link href="http://ray.github.io/2023/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/"/>
    <id>http://ray.github.io/2023/05/12/数据结构——链表、栈、队列/</id>
    <published>2023-05-12T05:15:17.000Z</published>
    <updated>2023-05-12T06:09:49.407Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    链表、队列、栈，是数据结构中最基础的几个结构，而链表是最基础的。之后的复杂数据结构大都是在其基础上演化出来的。</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>​    一种线程数据结构，与数组不同的是，它在内存空间中不一定是顺序存储的，为了保证链表中元素的连续性，一般使用一个指针来找到下一个元素。</p><p><img src="/.io//WX20230512-133517@2x.png" alt="linkedlist"></p><span id="more"></span><p>使用java实现一个链表链表，首先需要定义一个节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">        T       value;</span><br><span class="line">        Node&lt;T&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因此，对于链表来说，如果想要根据索引查找元素，只能从头开始，时间复杂度O(N).</p><p>如果在Node中增加了前驱节点，那么就会成为双向链表。</p><p><img src="/.io//WX20230512-134440@2x.png" alt="doublelinkedlist"></p><p>Java中的LinkedList就是典型的双向链表。</p><p>如果在LinkedList上结合HashMap(Set)就是<strong>LinkedHashMap</strong>(Set),既保证了元素的有序性，有可以O1获取元素。</p><p>一个简单的链表实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">        T       value;</span><br><span class="line">        Node&lt;T&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 长度/length</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer N;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根节点/root</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node    root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化根节点/init root</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>);</span><br><span class="line">        N = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入/insert</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="comment">// 新建结点/new</span></span><br><span class="line">        Node&lt;T&gt; tNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(value);</span><br><span class="line">        <span class="comment">// 插入结点/insert</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> root.next;</span><br><span class="line">        root.next = tNode;</span><br><span class="line">        tNode.next = next;</span><br><span class="line">        <span class="comment">// 长度+1/length++</span></span><br><span class="line">        N++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除/delete</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除/delete</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> root.next;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">next1</span> <span class="operator">=</span> next.next;</span><br><span class="line">        root.next = next1;</span><br><span class="line">        <span class="comment">// 长度-1/length--</span></span><br><span class="line">        N--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> root.next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            System.out.println(curr.value);</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大-小元素等。链表也是实现跳表的基础。"><a href="#算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大-小元素等。链表也是实现跳表的基础。" class="headerlink" title="算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大/小元素等。链表也是实现跳表的基础。"></a>算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大/小元素等。链表也是实现跳表的基础。</h4><h3 id="队列-栈"><a href="#队列-栈" class="headerlink" title="队列/栈"></a>队列/栈</h3><p>​    链表和队列本质上是一种特殊的单链表，不同之处在于他们限制了元素的插入/删除顺序。</p><h4 id="队列："><a href="#队列：" class="headerlink" title="队列："></a>队列：</h4><p>​    对于队列来说，元素从一端进入，从另一端出去，也就是先入的元素先被删除，英文叫做：First In，First Out，简写FIFO。</p><p><img src="/.io//WX20230512-135224@2x.png" alt="queue"></p><p>​    队列比较经典的使用是在广度优先搜索当中(树的层序遍历其实也是广度优先搜索)。除此之外，队列也可以拥有顺序，称之为优先队列，在java已经有实现，称之为<strong>PriorityQueue</strong>。</p><h4 id="栈："><a href="#栈：" class="headerlink" title="栈："></a>栈：</h4><p>​    栈则相反，元素从一端进，就要从一端出。也就是先进后出，英文叫做：First In，Last Out，简称FILO。</p><p><img src="/.io//WX20230512-135651@2x.png" alt="stack"></p><p>​    栈在算法中经常使用到，诸如括号标点匹配问题，单调栈问题等，递归也是一种特殊的对栈的使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;​    链表、队列、栈，是数据结构中最基础的几个结构，而链表是最基础的。之后的复杂数据结构大都是在其基础上演化出来的。&lt;/p&gt;
&lt;h3 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h3&gt;&lt;p&gt;​    一种线程数据结构，与数组不同的是，它在内存空间中不一定是顺序存储的，为了保证链表中元素的连续性，一般使用一个指针来找到下一个元素。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/.io//WX20230512-133517@2x.png&quot; alt=&quot;linkedlist&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://ray.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据结构" scheme="http://ray.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="java" scheme="http://ray.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>写在开始</title>
    <link href="http://ray.github.io/2023/05/12/%E5%86%99%E5%9C%A8%E5%BC%80%E5%A7%8B/"/>
    <id>http://ray.github.io/2023/05/12/写在开始/</id>
    <published>2023-05-12T04:14:16.000Z</published>
    <updated>2023-05-12T04:25:26.232Z</updated>
    
    <content type="html"><![CDATA[<p>​        很早之前就有一个想要搭建个人博客的想法，但是由于学业，工作等原因一直没有付诸于实践。在入职新公司后，由于有了时间，加上一些个人原因，使得我决定开始搭建一个简单的个人blog。Blog中将会记录我的在技术上遇到的一些问题和尝试，以及记录自己的学习和成长过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​        很早之前就有一个想要搭建个人博客的想法，但是由于学业，工作等原因一直没有付诸于实践。在入职新公司后，由于有了时间，加上一些个人原因，使得我决定开始搭建一个简单的个人blog。Blog中将会记录我的在技术上遇到的一些问题和尝试，以及记录自己的学习和成长过程。
      
    
    </summary>
    
      <category term="life" scheme="http://ray.github.io/categories/life/"/>
    
    
      <category term="Trying" scheme="http://ray.github.io/tags/Trying/"/>
    
  </entry>
  
</feed>
